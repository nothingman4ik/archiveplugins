__id__ = "all_mention"
__name__ = "all mention"
__author__ = "@pluginsnerex"
__version__ = "3.6.0"
__description__ = """–ü–ª–∞–≥–∏–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏ –≥–∏–±–∫–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–æ—Å—Ç –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏, –ª–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è, –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–µ–±—è."""

# -*- coding: utf-8 -*-
# —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ Plugin IDE - @PluginIDE

__icon__ = "IslomjonAnimeEmoji/53"
__min_version__ = "11.12.0"

import threading
import time
import traceback
import re
import random
from typing import Any, Set, Dict, Optional, List

from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import send_message, send_request, get_messages_controller, get_user_config
from ui.settings import Header, Selector, Switch, Input, Divider
from ui.bulletin import BulletinHelper
from org.telegram.tgnet import TLRPC
from org.telegram.messenger import UserObject

class AllMentionUltimaPlugin(BasePlugin):
    def on_plugin_load(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞."""
        self.add_on_send_message_hook()
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞. >_o
        self._stop_events: Dict[int, threading.Event] = {}
        self.log(f"[{__name__}] –ø–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

    def on_plugin_unload(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞."""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ
        for event in self._stop_events.values():
            event.set()
        self._stop_events.clear()
        self.log(f"[{__name__}] –ø–ª–∞–≥–∏–Ω –≤—ã–≥—Ä—É–∂–µ–Ω.")

    def create_settings(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞."""
        all_cmd = self.get_setting("all_command", ".all")
        admins_cmd = self.get_setting("admins_command", ".all admins")
        random_cmd = self.get_setting("random_command", ".all random")
        silent_cmd = self.get_setting("silent_command", ".all night")
        online_cmd = self.get_setting("online_command", ".all online")
        offline_cmd = self.get_setting("offline_command", ".all offline")
        stop_cmd = self.get_setting("all_stop_command", ".all stop")

        help_text_pi = (
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "<–∫–æ–º–∞–Ω–¥–∞> [—Ç–µ–∫—Å—Ç] [—á–∏—Å–ª–æ-–ª–∏–º–∏—Ç]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã—à–µ):\n\n"
            f"‚Ä¢ `{all_cmd}` - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö\n"
            f"‚Ä¢ `{admins_cmd}` - —É–ø–æ–º—è–Ω—É—Ç—å –∞–¥–º–∏–Ω–æ–≤\n"
            f"‚Ä¢ `{random_cmd} 5` - —É–ø–æ–º—è–Ω—É—Ç—å 5 —Å–ª—É—á–∞–π–Ω—ã—Ö\n"
            f"‚Ä¢ `{online_cmd}` - —É–ø–æ–º—è–Ω—É—Ç—å —Ç–µ—Ö, –∫—Ç–æ –æ–Ω–ª–∞–π–Ω\n"
            f"‚Ä¢ `{offline_cmd}` - —É–ø–æ–º—è–Ω—É—Ç—å —Ç–µ—Ö, –∫—Ç–æ –æ—Ñ—Ñ–ª–∞–π–Ω\n"
            f"‚Ä¢ `{silent_cmd}` - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –±–µ–∑ @ (—Ç–∏—Ö–æ)\n"
            f"‚Ä¢ `{stop_cmd}` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
            "–¢–µ–∫—Å—Ç –∏ –ª–∏–º–∏—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ."
        )
        
        return [
            Header("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
            Input(key="all_command", text="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å–µ—Ö", default=".all", icon="msg_edit"),
            Input(key="admins_command", text="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", default=".all admins", icon="msg_admins"),
            Input(key="random_command", text="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö", default=".all random", icon="msg_rate_up"),
            Input(key="online_command", text="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω", default=".all online", icon="msg_online"),
            Input(key="offline_command", text="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω", default=".all offline", icon="msg_contacts_time"),
            Input(key="silent_command", text="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–∏—Ö–∏—Ö", default=".all night", icon="msg_bell_mute"),
            Input(key="all_stop_command", text="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", default=".all stop", icon="msg_pollstop"),
            Divider(),
            Header("–û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"),
            Input(key="default_header", text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", default="üîî –û–±—â–∏–π —Å–±–æ—Ä!", icon="msg_topic_create"),
            Selector(key="send_mode", text="–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏", items=["–ß–∞—Å—Ç—è–º–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", "–û–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"], default=0, icon="msg_share"),
            Input(key="message_delay", text="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ (—Å–µ–∫)", default="1.5", icon="msg_recent"),
            Divider(),
            Header("–°—Ç–∏–ª—å –∏ —Ñ–∏–ª—å—Ç—Ä—ã"),
            Selector(key="silent_name_style", text="–°—Ç–∏–ª—å '—Ç–∏—Ö–∏—Ö' —É–ø–æ–º–∏–Ω–∞–Ω–∏–π", items=["–ü–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏", "–¢–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏", "–ö–∞–∫ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö"], default=0, icon="msg_contacts"),
            Switch(key="mention_no_username", text="–£–ø–æ–º–∏–Ω–∞—Ç—å –±–µ–∑ @username", subtext="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º —Å–∫—Ä—ã—Ç", default=True, icon="msg_filled_menu_users"),
            Switch(key="include_bots", text="–£–ø–æ–º–∏–Ω–∞—Ç—å –±–æ—Ç–æ–≤", default=False, icon="input_bot1"),
            Divider(text=help_text_pi)
        ]

    def _parse_command_pi(self, command_body: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: –ª–∏–º–∏—Ç –∏ —Ç–µ–∫—Å—Ç."""
        parts = command_body.split()
        limit = None
        
        if not parts:
            return {"limit": None, "header": ""}
            
        if parts and parts[-1].isdigit():
            limit = int(parts.pop(-1))

        header = ' '.join(parts).strip()
        
        return {"limit": limit, "header": header}

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not hasattr(params, 'message') or not isinstance(params.message, str):
            return HookResult()

        msg = params.message.strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        stop_command = self.get_setting("all_stop_command", ".all stop").strip()
        if msg.lower() == stop_command:
            stop_event = self._stop_events.get(params.peer)
            if stop_event:
                stop_event.set() # –ü–æ—Å—ã–ª–∞–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–¥–µ—Å—å, –æ–Ω–æ —É–¥–∞–ª–∏—Ç—Å—è —Å–∞–º–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞
                BulletinHelper.show_success("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
            else:
                BulletinHelper.show_info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return HookResult(strategy=HookStrategy.CANCEL)

        # –ö–∞—Ä—Ç–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        commands_map = {
            self.get_setting("admins_command", ".all admins").strip(): 'a',
            self.get_setting("random_command", ".all random").strip(): 'r',
            self.get_setting("online_command", ".all online").strip(): 'o',
            self.get_setting("offline_command", ".all offline").strip(): 'f',
            self.get_setting("silent_command", ".all night").strip(): 's',
            self.get_setting("all_command", ".all").strip(): None,
        }
        
        filters = set()
        command_body = ""
        matched = False

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –∫ —Å–∞–º–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        for cmd_prefix, filter_char in sorted(commands_map.items(), key=lambda item: len(item[0]), reverse=True):
            if msg.lower().startswith(cmd_prefix):
                if filter_char:
                    filters.add(filter_char)
                command_body = msg[len(cmd_prefix):].strip()
                matched = True
                break

        if not matched:
            return HookResult()
            
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é
        if params.peer in self._stop_events:
            BulletinHelper.show_error("–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return HookResult(strategy=HookStrategy.CANCEL)
            
        parsed_args = self._parse_command_pi(command_body)
        parsed_args['filters'] = filters

        header_pi = parsed_args['header']
        if not header_pi or not re.search(r'\S', header_pi):
            header_pi = self.get_setting("default_header", "üîî –û–±—â–∏–π —Å–±–æ—Ä!")

        send_mode_idx = self.get_setting("send_mode", 0)
        send_mode = "multi" if send_mode_idx == 0 else "one"
        mention_noname = self.get_setting("mention_no_username", True)
        include_bots = self.get_setting("include_bots", False)
        try:
            delay = float(self.get_setting("message_delay", "1.5"))
        except ValueError:
            delay = 1.5

        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        stop_event = threading.Event()
        self._stop_events[params.peer] = stop_event

        thread = threading.Thread(
            target=self.process_all_command, 
            args=(params.peer, parsed_args, header_pi, send_mode, mention_noname, include_bots, delay, stop_event),
            daemon=True
        )
        thread.start()

        return HookResult(strategy=HookStrategy.CANCEL)

    def process_all_command(self, peer_id: int, parsed_args: Dict, header: str, send_mode: str, mention_noname: bool, include_bots: bool, delay: float, stop_event: threading.Event):
        """–°–æ–±–∏—Ä–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        try:
            if stop_event.is_set(): return
            BulletinHelper.show_info("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            controller = get_messages_controller()
            chat = controller.getChat(-peer_id)

            if not chat:
                BulletinHelper.show_error("–û—à–∏–±–∫–∞: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            input_channel = controller.getInputChannel(chat)
            if not input_channel:
                BulletinHelper.show_error("–û—à–∏–±–∫–∞: –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.")
                return

            all_users = {}
            all_participants = []

            def on_response(response, error):
                nonlocal all_users, all_participants
                if stop_event.is_set(): return
                if error:
                    BulletinHelper.show_error(f"–û—à–∏–±–∫–∞ API: {error.text}")
                    return

                all_users.update({user.id: user for user in response.users.toArray()})
                participants_from_response = list(response.participants.toArray())
                all_participants.extend(participants_from_response)

                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if len(participants_from_response) == 200:
                    req.offset += 200
                    send_request(req, on_response)
                else:
                    self.send_mentions(peer_id, all_users, all_participants, parsed_args, header, send_mode, mention_noname, include_bots, delay, stop_event)

            req = TLRPC.TL_channels_getParticipants()
            req.channel = input_channel
            req.filter = TLRPC.TL_channelParticipantsRecent()
            req.offset = 0
            req.limit = 200
            req.hash = 0
            send_request(req, on_response)

        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –≤ process_all_command: {traceback.format_exc()}")
            BulletinHelper.show_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Ç–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            if peer_id in self._stop_events:
                del self._stop_events[peer_id]

    def is_user_online(self, user: TLRPC.User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
        if not hasattr(user, 'status') or user.status is None:
            return False
        return user.status.__class__.__name__ in ("TL_userStatusOnline", "TL_userStatusRecently")

    def send_mentions(self, peer_id, users, participants, parsed_args, header, send_mode, mention_noname, include_bots, delay, stop_event):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ."""
        try:
            if stop_event.is_set(): return
            
            filters = parsed_args.get('filters', set())
            limit = parsed_args.get('limit')
            my_id = get_user_config().getClientUserId()
            eligible_users: List[TLRPC.User] = []

            for p in participants:
                if stop_event.is_set(): break
                try:
                    user_id = p.peer.user_id
                    user = users.get(user_id)
                    if not user or user.id == my_id or user.deleted: continue
                    if user.bot and not include_bots: continue
                    
                    is_admin = isinstance(p, (TLRPC.TL_channelParticipantAdmin, TLRPC.TL_channelParticipantCreator))
                    if 'a' in filters and not is_admin: continue
                    
                    is_online = self.is_user_online(user)
                    if 'o' in filters and not is_online: continue
                    if 'f' in filters and is_online: continue
                    
                    eligible_users.append(user)
                except Exception:
                    continue

            if stop_event.is_set() or not eligible_users:
                if not stop_event.is_set():
                    BulletinHelper.show_info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                return

            users_to_mention = eligible_users
            if 'r' in filters:
                random.shuffle(users_to_mention)
            if limit is not None:
                users_to_mention = users_to_mention[:limit]

            BulletinHelper.show_success(f"–ù–∞—á–∏–Ω–∞—é —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ {len(users_to_mention)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

            mentions = []
            silent_name_style = self.get_setting("silent_name_style", 0)

            for user in users_to_mention:
                mention_text = None
                if 's' in filters:
                    if silent_name_style == 0:
                        display_name = user.first_name or ""
                        if user.last_name:
                            display_name += f" {user.last_name}"
                        mention_text = display_name.strip() or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    elif silent_name_style == 1:
                        mention_text = user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    elif silent_name_style == 2:
                        mention_text = UserObject.getDisplayName(user) or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                elif user.username:
                    mention_text = f"@{user.username}"
                elif mention_noname:
                    display_name = UserObject.getDisplayName(user) or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    mention_text = f"[{display_name}](tg://user?id={user.id})"
                
                if mention_text:
                    mentions.append(mention_text)

            if stop_event.is_set() or not mentions:
                if not stop_event.is_set():
                    BulletinHelper.show_info("–ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
                return

            if send_mode == "one":
                full_message_pi = header + "\n\n" + " ".join(mentions)
                if len(full_message_pi.encode('utf-16-le')) // 2 > 4096:
                    BulletinHelper.show_error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º '–ß–∞—Å—Ç—è–º–∏'.")
                elif not stop_event.is_set():
                    send_message({"peer": peer_id, "message": full_message_pi})
            else:
                if not stop_event.is_set():
                    send_message({"peer": peer_id, "message": header})
                    time.sleep(delay)
                
                chunk = ""
                for m in mentions:
                    if stop_event.is_set(): break
                    if len((chunk + m + " ").encode('utf-16-le')) // 2 > 4096:
                        send_message({"peer": peer_id, "message": chunk.strip()})
                        time.sleep(delay)
                        chunk = m + " "
                    else:
                        chunk += m + " "
                
                if chunk.strip() and not stop_event.is_set():
                    send_message({"peer": peer_id, "message": chunk.strip()})

            if not stop_event.is_set():
                BulletinHelper.show_success("–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if peer_id in self._stop_events:
                del self._stop_events[peer_id]