import traceback

from base_plugin import BasePlugin
from hook_utils import find_class
from ui.settings import Selector
from java import jint


__name__ = "Round Videos Configurator"
__description__ = "Allows to set custom resolution and bitrate for round videos."
__version__ = "1.0.0"
__id__ = "Round_Videos_Configurator"
__author__ = "@immat0x1"
__icon__ = "exteraPlugins/0"
__min_version__ = "11.12.0"


class RoundVideoSettingsPlugin(BasePlugin):
    RESOLUTIONS = [128, 256, 384, 512, 640]
    BITRATES = [600, 800, 1000, 1200, 1400]

    class ResolutionHook:
        def __init__(self, plugin) -> None:
            self.plugin = plugin

        def replace_hooked_method(self, param):
            setting_index = self.plugin.get_setting("resolution", 2)
            resolution_value = self.plugin.RESOLUTIONS[setting_index]
            return jint(resolution_value)

    class BitrateHook:
        def __init__(self, plugin) -> None:
            self.plugin = plugin

        def replace_hooked_method(self, param):
            setting_index = self.plugin.get_setting("bitrate", 3)
            bitrate_value = self.plugin.BITRATES[setting_index]
            return jint(bitrate_value)

    def create_settings(self):
        return [
            Selector(
                key="resolution",
                text="Resolution, px",
                items=[str(r) for r in self.RESOLUTIONS],
                default=2
            ),
            Selector(
                key="bitrate",
                text="Bitrate, kbit/s",
                items=[str(b) for b in self.BITRATES],
                default=2
            )
        ]

    def on_plugin_load(self):
        try:
            system_utils = find_class("com.exteragram.messenger.utils.SystemUtils")
            if not system_utils:
                return

            resolution_method = system_utils.getClass().getDeclaredMethod("getRoundVideoResolution")
            if resolution_method:
                self.hook_method(resolution_method, self.ResolutionHook(self))

            bitrate_method = system_utils.getClass().getDeclaredMethod("getRoundVideoBitrate")
            if bitrate_method:
                self.hook_method(bitrate_method, self.BitrateHook(self))

        except Exception:
            self.log("Failed to apply hooks. See traceback below.")
            traceback.print_exc()