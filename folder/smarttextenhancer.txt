import requests
import threading
import json
import traceback
from typing import Any, Optional, Callable

from base_plugin import BasePlugin, HookResult, HookStrategy, MenuItemData, MenuItemType
from android_utils import log, run_on_ui_thread
from client_utils import run_on_queue, get_last_fragment, send_message
from ui.settings import Header, Switch, Divider, Input, Selector, Text
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder
from org.telegram.messenger import ApplicationLoader
from com.exteragram.messenger.plugins.ui import PluginSettingsActivity
from com.exteragram.messenger.plugins import PluginsController

__id__ = "smart_text_enhancer"
__name__ = "SmartTextEnhancer"
__description__ = "–£–º–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n–ö–æ–º–∞–Ω–¥—ã:\n   .emojify - –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏\n   .rewrite - –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç\n   .fix - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏\n\n–ê–≤—Ç–æ—Ä: Oniel"
__author__ = "@i_am_oniel"
__version__ = "1.0.2"
__icon__ = "msg_photo_text_regular"
__min_version__ = "11.12.0"

API_ENDPOINTS = {
    "emojify": "https://keyboard.yandex.net/gpt/emoji",
    "rewrite": "https://keyboard.yandex.net/gpt/rewrite",
    "fix": "https://keyboard.yandex.net/gpt/fix"
}

API_HEADERS = {
    "Content-Type": "application/json; charset=utf-8",
    "User-Agent": "okhttp/4.12.0",
    "Connection": "Keep-Alive",
    "Accept-Encoding": "gzip"
}

DEFAULT_COMMANDS = {
    "emojify": [".emojify", ".emoji"],
    "rewrite": [".rewrite", ".rw"],
    "fix": [".fix", ".correct"]
}

QUICK_MACROS = {
    "üòÄ": "emojify",
    "‚úèÔ∏è": "rewrite",
    "‚úÖ": "fix"
}

DEFAULT_AUTO_COMMANDS = {
    "emojify": ["—ç–º–æ–¥–∑–∏", "—Å–º–∞–π–ª—ã", "emoji"],
    "rewrite": ["–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å", "—É–ª—É—á—à–∏—Ç—å", "rewrite"],
    "fix": ["–∏—Å–ø—Ä–∞–≤–∏—Ç—å", "–æ—à–∏–±–∫–∏", "fix"]
}


class SmartTextEnhancerPlugin(BasePlugin):
    
    def __init__(self):
        super().__init__()
        self.progress_dialog: Optional[AlertDialogBuilder] = None
        self.processing_requests = set()
        self.settings_menu_item = None
        self.sent_messages = set()
        
    def on_plugin_load(self):
        self.add_on_send_message_hook(priority=50)
        self._create_settings_menu_item()
        log("[SmartTextEnhancer] –ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    def create_settings(self):
        auto_enabled = self.get_setting("auto_mode_enabled", False)
        auto_type = self.get_setting("auto_mode_type", 0)
        
        return [
            Header(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"),
            
            Switch(
                key="auto_mode_enabled",
                text="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫—É",
                default=False,
                subtext="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
                icon="msg_online"
            ),
            
            Selector(
                key="auto_mode_type",
                text="–¢–∏–ø –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏",
                default=0,
                items=["–≠–º–æ–¥–∑–∏", "–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", "–ò—Å–ø—Ä–∞–≤–∏—Ç—å", "–ù–µ—Å–∫–æ–ª—å–∫–æ"],
                icon="msg_palette"
            ) if auto_enabled else None,
            
            Switch(
                key="auto_enable_emojify",
                text="–î–æ–±–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏",
                default=True,
                subtext="–í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"
            ) if auto_enabled and auto_type == 3 else None,
            
            Switch(
                key="auto_enable_rewrite",
                text="–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç",
                default=True,
                subtext="–í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"
            ) if auto_enabled and auto_type == 3 else None,
            
            Switch(
                key="auto_enable_fix",
                text="–ò—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏",
                default=True,
                subtext="–í–∫–ª—é—á–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"
            ) if auto_enabled and auto_type == 3 else None,
            
            Divider() if auto_enabled else None,
            
            Header(text="–ö–æ–º–∞–Ω–¥—ã"),

            Input(
                key="custom_emojify_commands",
                text="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —ç–º–æ–¥–∑–∏",
                default="",
                subtext=self._get_commands_description("emojify")
            ),
            
            Input(
                key="custom_rewrite_commands",
                text="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è",
                default="",
                subtext=self._get_commands_description("rewrite")
            ),
            
            Input(
                key="custom_fix_commands",
                text="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                default="",
                subtext=self._get_commands_description("fix")
            ),
            
            Divider(),
            
            Header(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
            
            Switch(
                key="enable_reply_processing",
                text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤",
                default=True,
                subtext="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç–µ",
                icon="msg_reply"
            ),
            
            Selector(
                key="request_timeout",
                text="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞",
                default=1,
                items=["5 —Å–µ–∫", "10 —Å–µ–∫", "15 —Å–µ–∫", "30 —Å–µ–∫"],
                icon="msg_timer"
            ),
            
            Switch(
                key="show_loading_indicator",
                text="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏",
                default=True,
                subtext="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                icon="msg_loading"
            ),
            
            Divider(),
            
            Header(text="–°–ø—Ä–∞–≤–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            
            Text(
                text="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
                icon="msg_info",
                on_click=lambda view: self._show_help_dialog()
            ),
            
            Text(
                text="–¢–µ—Å—Ç API",
                icon="msg_download",
                on_click=lambda view: self._test_api()
            )
        ]
    
    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not hasattr(params, 'message') or not isinstance(params.message, str):
            return HookResult()
            
        message = params.message.strip()
        
        message_hash = hash(message)
        if message_hash in self.sent_messages:
            self.sent_messages.discard(message_hash)
            return HookResult()
        
        if self.get_setting("enable_macros", True):
            for macro, action_type in QUICK_MACROS.items():
                if message == macro:
                    return self._handle_macro_command(action_type, params)
        
        for action_type, commands in DEFAULT_COMMANDS.items():
            for command in commands:
                if message.startswith(command):
                    return self._handle_text_command(action_type, command, message, params)
        
        if self.get_setting("auto_mode_enabled", False):
            return self._handle_auto_mode(message, params)
            
        return HookResult()
    
    def _handle_macro_command(self, action_type: str, params: Any) -> HookResult:
        if not self.get_setting("enable_reply_processing", True) or not params.replyToMsg:
            if self.get_setting("show_loading_indicator", True):
                BulletinHelper.show_error("–î–ª—è –º–∞–∫—Ä–æ—Å–æ–≤ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º")
            return HookResult(strategy=HookStrategy.CANCEL)
            
        reply_text = self._extract_text_from_message(params.replyToMsg)
        if not reply_text:
            if self.get_setting("show_loading_indicator", True):
                BulletinHelper.show_error("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return HookResult(strategy=HookStrategy.CANCEL)
            
        self._process_text_async(action_type, reply_text, params)
        return HookResult(strategy=HookStrategy.CANCEL)
    
    def _handle_text_command(self, action_type: str, command: str, message: str, params: Any) -> HookResult:
        text_to_process = message[len(command):].strip()
        
        if not text_to_process:
            if self.get_setting("enable_reply_processing", True) and params.replyToMsg:
                text_to_process = self._extract_text_from_message(params.replyToMsg)
            
            if not text_to_process:
                params.message = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {command} <—Ç–µ–∫—Å—Ç>\n–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º"
                return HookResult(strategy=HookStrategy.MODIFY, params=params)
        
        self._process_text_async(action_type, text_to_process, params)
        return HookResult(strategy=HookStrategy.CANCEL)
    
    def _handle_auto_mode(self, message: str, params: Any) -> HookResult:
        auto_type = self.get_setting("auto_mode_type", 0)
        
        if auto_type == 3:
            enabled_types = []
            if self.get_setting("auto_enable_fix", True):
                enabled_types.append("fix")
            if self.get_setting("auto_enable_rewrite", True):
                enabled_types.append("rewrite")
            if self.get_setting("auto_enable_emojify", True):
                enabled_types.append("emojify")
            
            if enabled_types:
                self._process_multiple_types_sequential(enabled_types, message, params)
        else:
            action_types = ["emojify", "rewrite", "fix"]
            if auto_type < len(action_types):
                action_type = action_types[auto_type]
                self._process_text_async(action_type, message, params)
        
        return HookResult(strategy=HookStrategy.CANCEL)
    
    def _process_multiple_types_sequential(self, action_types: list, text: str, params: Any):
        if self.get_setting("show_loading_indicator", True):
            self._show_progress_dialog("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        
        run_on_queue(lambda: self._process_sequential_request(action_types, text, params))
    
    def _process_sequential_request(self, action_types: list, text: str, params: Any):
        request_id = id(threading.current_thread())
        self.processing_requests.add(request_id)
        
        try:
            current_text = text
            timeout_index = self.get_setting("request_timeout", 1)
            timeout_values = [5, 10, 15, 30]
            timeout = timeout_values[timeout_index] if timeout_index < len(timeout_values) else 10
            
            for action_type in action_types:
                try:
                    url = API_ENDPOINTS.get(action_type)
                    if not url:
                        continue
                    
                    payload = {"text": current_text}
                    response = requests.post(
                        url,
                        headers=API_HEADERS,
                        data=json.dumps(payload, ensure_ascii=False).encode('utf-8'),
                        timeout=timeout
                    )
                    
                    if response.status_code == 200:
                        result_data = response.json()
                        processed_text = result_data.get('response', '')
                        if processed_text:
                            current_text = processed_text
                        
                except Exception as e:
                    log(f"[SmartTextEnhancer] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {action_type}: {e}")
                    continue
            
            if current_text != text:
                self.sent_messages.add(hash(current_text))
                
                message_params = {
                    "message": current_text,
                    "peer": params.peer,
                    "replyToMsg": params.replyToMsg,
                    "replyToTopMsg": params.replyToTopMsg
                }
                
                run_on_ui_thread(lambda: send_message(message_params))
                
                if self.get_setting("show_loading_indicator", True):
                    run_on_ui_thread(lambda: BulletinHelper.show_success("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))
            else:
                if self.get_setting("show_loading_indicator", True):
                    run_on_ui_thread(lambda: BulletinHelper.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç"))
                
        except Exception as e:
            self._handle_error("–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏", e)
        finally:
            self.processing_requests.discard(request_id)
            if self.get_setting("show_loading_indicator", True):
                run_on_ui_thread(self._dismiss_progress_dialog)
    
    def _extract_text_from_message(self, message_obj) -> Optional[str]:
        try:
            if hasattr(message_obj, 'message') and message_obj.message:
                return str(message_obj.message).strip()
            return None
        except Exception as e:
            log(f"[SmartTextEnhancer] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def _process_text_async(self, action_type: str, text: str, params: Any, is_auto_multiple: bool = False):
        if not text or len(text.strip()) == 0:
            if self.get_setting("show_loading_indicator", True):
                BulletinHelper.show_error("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
            
        if self.get_setting("show_loading_indicator", True):
            action_names = {"emojify": "—ç–º–æ–¥–∑–∏", "rewrite": "–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ", "fix": "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"}
            action_name = action_names.get(action_type, action_type)
            self._show_progress_dialog(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {action_name}...")
        
        run_on_queue(lambda: self._process_text_request(action_type, text, params, is_auto_multiple))
    
    def _process_text_request(self, action_type: str, text: str, params: Any, is_auto_multiple: bool = False):
        request_id = id(threading.current_thread())
        self.processing_requests.add(request_id)
        
        try:
            url = API_ENDPOINTS.get(action_type)
            if not url:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏: {action_type}")
            
            payload = {"text": text}
            timeout_index = self.get_setting("request_timeout", 1)
            timeout_values = [5, 10, 15, 30]
            timeout = timeout_values[timeout_index] if timeout_index < len(timeout_values) else 10
            
            response = requests.post(
                url,
                headers=API_HEADERS,
                data=json.dumps(payload, ensure_ascii=False).encode('utf-8'),
                timeout=timeout
            )
            
            if response.status_code == 200:
                result_data = response.json()
                processed_text = result_data.get('response', '')
                
                if processed_text:
                    self._send_processed_result(action_type, text, processed_text, params, is_auto_multiple)
                else:
                    self._handle_error("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", None)
            else:
                self._handle_error(f"–û—à–∏–±–∫–∞ API: {response.status_code}", None)
                
        except requests.exceptions.Timeout:
            self._handle_error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞", None)
        except requests.exceptions.ConnectionError:
            self._handle_error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", None)
        except Exception as e:
            self._handle_error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", e)
        finally:
            self.processing_requests.discard(request_id)
            if self.get_setting("show_loading_indicator", True):
                run_on_ui_thread(self._dismiss_progress_dialog)
    
    def _send_processed_result(self, action_type: str, original_text: str, processed_text: str, params: Any, is_auto_multiple: bool = False):
        try:
            self.sent_messages.add(hash(processed_text))
            
            message_params = {
                "message": processed_text,
                "peer": params.peer,
                "replyToMsg": params.replyToMsg,
                "replyToTopMsg": params.replyToTopMsg
            }
            
            run_on_ui_thread(lambda: send_message(message_params))
            
            if self.get_setting("show_loading_indicator", True):
                action_names = {"emojify": "—ç–º–æ–¥–∑–∏", "rewrite": "–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ", "fix": "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"}
                action_name = action_names.get(action_type, action_type)
                run_on_ui_thread(lambda: BulletinHelper.show_success(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {action_name}"))
            
        except Exception as e:
            log(f"[SmartTextEnhancer] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            if self.get_setting("show_loading_indicator", True):
                run_on_ui_thread(lambda: BulletinHelper.show_error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"))
    
    def _handle_error(self, message: str, exception: Optional[Exception]):
        log(f"[SmartTextEnhancer] {message}")
        if exception:
            log(f"[SmartTextEnhancer] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(exception)}")
            log(f"[SmartTextEnhancer] Traceback: {traceback.format_exc()}")
        
        if self.get_setting("show_loading_indicator", True):
            run_on_ui_thread(lambda: BulletinHelper.show_error(message))
    
    def _show_progress_dialog(self, title: str):
        def show_dialog():
            try:
                fragment = get_last_fragment()
                if not fragment:
                    return
                    
                activity = fragment.getParentActivity()
                if not activity:
                    activity = ApplicationLoader.applicationContext
                
                self.progress_dialog = AlertDialogBuilder(activity, AlertDialogBuilder.ALERT_TYPE_SPINNER)
                self.progress_dialog.set_title(title)
                self.progress_dialog.set_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
                self.progress_dialog.set_cancelable(False)
                self.progress_dialog.show()
                
            except Exception as e:
                log(f"[SmartTextEnhancer] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
        
        run_on_ui_thread(show_dialog)
    
    def _dismiss_progress_dialog(self):
        if self.progress_dialog:
            try:
                self.progress_dialog.dismiss()
            except Exception as e:
                log(f"[SmartTextEnhancer] –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            finally:
                self.progress_dialog = None
    
    def _show_help_dialog(self):
        help_text = """ü§ñ SmartTextEnhancer - –°–ø—Ä–∞–≤–∫–∞

üìù –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ .emojify <—Ç–µ–∫—Å—Ç> - –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏
‚Ä¢ .rewrite <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç
‚Ä¢ .fix <—Ç–µ–∫—Å—Ç> - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏

üéØ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ):
‚Ä¢ üòÄ - –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏
‚Ä¢ ‚úèÔ∏è - –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç
‚Ä¢ ‚úÖ - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏

‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º:
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏.

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è"""

        def show_dialog():
            try:
                fragment = get_last_fragment()
                if not fragment:
                    return
                    
                activity = fragment.getParentActivity()
                if not activity:
                    return
                
                dialog = AlertDialogBuilder(activity)
                dialog.set_title("üìñ –°–ø—Ä–∞–≤–∫–∞ SmartTextEnhancer")
                dialog.set_message(help_text)
                dialog.set_positive_button("–ü–æ–Ω—è—Ç–Ω–æ", lambda d, w: d.dismiss())
                dialog.show()
                
            except Exception as e:
                log(f"[SmartTextEnhancer] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏: {e}")
        
        run_on_ui_thread(show_dialog)
    
    def _test_api(self):
        test_text = "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä"
        
        def test_request():
            try:
                self._show_progress_dialog("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
                
                results = []
                for action_type, url in API_ENDPOINTS.items():
                    try:
                        response = requests.post(
                            url,
                            headers=API_HEADERS,
                            data=json.dumps({"text": test_text}, ensure_ascii=False).encode('utf-8'),
                            timeout=10
                        )
                        
                        if response.status_code == 200:
                            results.append(f"‚úÖ {action_type}: OK")
                        else:
                            results.append(f"‚ùå {action_type}: {response.status_code}")
                            
                    except Exception as e:
                        results.append(f"‚ùå {action_type}: {str(e)}")
                
                result_text = "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:\n\n" + "\n".join(results)
                
                def show_results():
                    self._dismiss_progress_dialog()
                    fragment = get_last_fragment()
                    if fragment and fragment.getParentActivity():
                        dialog = AlertDialogBuilder(fragment.getParentActivity())
                        dialog.set_title("–¢–µ—Å—Ç API")
                        dialog.set_message(result_text)
                        dialog.set_positive_button("OK", lambda d, w: d.dismiss())
                        dialog.show()
                
                run_on_ui_thread(show_results)
                
            except Exception as e:
                run_on_ui_thread(self._dismiss_progress_dialog)
                self._handle_error("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API", e)
        
        run_on_queue(test_request)
    
    def _create_settings_menu_item(self):
        if self.settings_menu_item is not None:
            return
            
        menu_item = MenuItemData(
            menu_type=MenuItemType.DRAWER_MENU,
            text="SmartTextEnhancer",
            icon="msg_photo_text_regular",
            priority=15,
            on_click=lambda context: self._open_plugin_settings()
        )
        self.settings_menu_item = self.add_menu_item(menu_item)
    
    def _open_plugin_settings(self):
        try:
            java_plugin = PluginsController.getInstance().plugins.get(self.id)
            if java_plugin:
                run_on_ui_thread(lambda: get_last_fragment().presentFragment(PluginSettingsActivity(java_plugin)))
        except Exception as e:
            log(f"[SmartTextEnhancer] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def _get_custom_commands(self):
        try:
            custom_emojify = self.get_setting("custom_emojify_commands", "").strip()
            custom_rewrite = self.get_setting("custom_rewrite_commands", "").strip()
            custom_fix = self.get_setting("custom_fix_commands", "").strip()
            
            commands = {}
            if custom_emojify:
                commands["emojify"] = [cmd.strip().lower() for cmd in custom_emojify.split(",") if cmd.strip()]
            if custom_rewrite:
                commands["rewrite"] = [cmd.strip().lower() for cmd in custom_rewrite.split(",") if cmd.strip()]
            if custom_fix:
                commands["fix"] = [cmd.strip().lower() for cmd in custom_fix.split(",") if cmd.strip()]
            
            return commands
        except Exception as e:
            log(f"[SmartTextEnhancer] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
            return {}
    
    def _get_commands_description(self, action_type: str) -> str:
        try:
            default_commands = DEFAULT_AUTO_COMMANDS.get(action_type, [])
            
            custom_commands = []
            if action_type == "emojify":
                custom_text = self.get_setting("custom_emojify_commands", "").strip()
            elif action_type == "rewrite":
                custom_text = self.get_setting("custom_rewrite_commands", "").strip()
            elif action_type == "fix":
                custom_text = self.get_setting("custom_fix_commands", "").strip()
            else:
                custom_text = ""
            
            if custom_text:
                custom_commands = [cmd.strip() for cmd in custom_text.split(",") if cmd.strip()]
            
            all_commands = default_commands + custom_commands
            if all_commands:
                commands_text = ", ".join(all_commands)
                return f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {commands_text}"
            else:
                default_text = ", ".join(default_commands)
                return f"–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {default_text}. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                
        except Exception as e:
            log(f"[SmartTextEnhancer] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
            return "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
    
    
    def on_plugin_unload(self):
        self.processing_requests.clear()
        self.sent_messages.clear()
        
        if self.progress_dialog:
            run_on_ui_thread(self._dismiss_progress_dialog)
        
        log("[SmartTextEnhancer] –ü–ª–∞–≥–∏–Ω –≤—ã–≥—Ä—É–∂–µ–Ω")