# –ü—Ä–∏–≤–µ—Ç! üëã
# –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º –∫–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π —É–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞: @RnPlugins
# –Ø –Ω–µ –ø—Ä–æ—Ç–∏–≤, –¥–µ–ª–∞–π –∫—Ä—É—Ç—ã–µ —à—Ç—É–∫–∏, —Ä–∞–∑–≤–∏–≤–∞–π, —É–ª—É—á—à–∞–π ‚Äî —Ç–æ–ª—å–∫–æ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º üôå
# –ü—É—Å—Ç—å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è, —É–¥–∞—á–∏ —Ç–µ–±–µ –≤ –∫–æ–¥–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!)

"""–í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–º –ø–ª–∞–≥–∏–Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è
—Ç–æ–ª—å–∫–æ –∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –¥–æ–º–µ–Ω–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, GitHub),
—á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ExteraGram.
–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª—é–±—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º,
–∞ —Ç–∞–∫–∂–µ –Ω–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —ç—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –≤ –ø–ª–∞–Ω–µ —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""

__id__ = "ai_status"
__name__ = "AI Status"
__description__ = """Automatic generation of bio/geo/name/username using AI.

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–æ/–≥–µ–æ/–∏–º–µ–Ω–∏/—é–∑ —Å –ø–æ–º–æ—â—å—é –ò–ò."""
__icon__ = "RnPluginsS/3"
__version__ = "1.0.8"
__author__ = "@RnPlugins, api by pollinations.ai"
__min_version__ = "11.12.0"

import threading, time, re, requests, json
from datetime import datetime
from org.telegram.messenger import LocaleController
from org.telegram.tgnet.tl import TL_account
from client_utils import send_request, get_user_config, get_last_fragment
from ui.settings import Header, Switch, Input, Text, Divider, Selector
from ui.bulletin import BulletinHelper

AI_API_URL = "https://text.pollinations.ai/openai/v1/chat/completions"
MEMORY_LIMIT = 25


def parse_interval(interval_str):
    pattern = r'(\d+)\s*(d|h|m|s)'
    matches = re.findall(pattern, interval_str.lower())
    if not matches:
        BulletinHelper.show_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!", get_last_fragment())
    total = 0
    for v, u in matches:
        v = int(v)
        if u=='d': total += v*86400
        elif u=='h': total += v*3600
        elif u=='m': total += v*60
        elif u=='s': total += v
    return max(total, 30)

def clean_ai_text(text):
    if not text: return ""
    text = re.sub(r'\[.*?\]\(.*?\)', '', text)
    text = re.sub(r'http[s]?://\S+', '', text)
    text = re.sub(r'[*_~`#]', '', text)
    text = re.sub(r'\s{2,}', ' ', text)
    text = re.sub(r'\(\)', '', text)
    return text.strip()
    
def tr():
    lang = LocaleController.getInstance().getCurrentLocale().getLanguage()
    strings = {
        'ru': {
            'enable_name': "–í–∫–ª—é—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ò–º–µ–Ω–∏",
            'head_enable_name': "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–º–µ–Ω–∏",
            'sett_name': "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ò–º—è/–§–∞–º–∏–ª–∏—é",
            'head_enable_bio': "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–∏–æ",
            'enable_bio': "–í–∫–ª—é—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–∏–æ",
            'sett_bio': "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ë–∏–æ",
            'head_enable_geo': "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ì–µ–æ (TgPremium)",
            'enable_geo': "–í–∫–ª—é—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ì–µ–æ",
            'sett_geo': "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ì–µ–æ",
            'head_enable_un': "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Æ–∑–µ—Ä–Ω–µ–π–º–∞",
            'enable_un': "–í–∫–ª—é—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Æ–∑–µ—Ä–Ω–µ–π–º–∞",
            'sett_un': "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Æ–∑–µ—Ä–Ω–µ–π–º",
            'head_other': "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ",
            'debug_mode': "–û—Ç–ª–∞–¥–∫–∞",
            'debug_mode_desc': "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            
            'interval': "–ò–Ω—Ç–µ—Ä–≤–∞–ª",
            'sub_interval': "–§–æ—Ä–º–∞—Ç: 1d 2h 3m 4s",
            'div_interval': "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ, —á–µ—Ä–µ–∑ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è.",
            't_prompt': "–ü—Ä–æ–º–ø—Ç",
            'def_name': "–ü—Ä–∏–¥—É–º–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è",
            'sub_name': "–ù–∞–ø—Ä.: –ü—Ä–∏–¥—É–º–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º",
            'text_on_error': "–¢–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ",
            't_search': "–î–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
            'sub_search': "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, AI –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∏—Å–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.",
            't_memory': "–ü–∞–º—è—Ç—å",
            'sub_memory': "–ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤",
            'generate_now': "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å",
            'div_un': "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–µ–Ω—è—Ç—å –Ω–µ —á–∞—â–µ 1 –¥–Ω—è.",
            'def_un': "–ü—Ä–∏–¥—É–º–∞–π —é–∑–µ—Ä–Ω–µ–π–º. –û–¥–Ω–æ —Å–ª–æ–≤–æ, –Ω–∞ English, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å: _AiS",
            'def_bio': "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º",
            'ai_error': "–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            'generating': "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è",
            'generated': "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ",
            
            'add_menu': "–ü—É–Ω–∫—Ç –≤ –º–µ–Ω—é",
            'sub_add_menu': "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —ç—Ç–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å–ª–µ–≤–∞",
            
            'clear_memory': "–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å",
            'clear_memory_title': "–û—á–∏—Å—Ç–∏—Ç—å ",
            'clear_memory_confirm': "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞?",
            'yes': "–î–∞",
            'cancel': "–û—Ç–º–µ–Ω–∞",
            'cleaned': "–æ—á–∏—â–µ–Ω–æ",
            'memory_limit': "–û–±—ä—ë–º –ø–∞–º—è—Ç–∏",
            'memory_limit_desc': "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
            'model': "–ù–µ–π—Ä–æ—Å–µ—Ç—å",
            'models_api_list': ["gpt-4.1-nano", "deepseek-v3", "grok-3-mini", "gpt-4o-mini-search", "evil"],
            'models_list': ["GPT-4.1 Nano", "DeepSeek V3", "Grok-3 Mini", "GPT-4o-search (–î–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)", "Evil (–±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã)"]
        },
        'en': {
            'enable_name': "Enable Name Update",
            'head_enable_name': "Name Settings",
            'sett_name': "Set First/Last Name",
            'head_enable_bio': "Bio Settings",
            'enable_bio': "Enable Bio Update",
            'sett_bio': "Set Bio",
            'head_enable_geo': "Geo Settings (TgPremium)",
            'enable_geo': "Enable Geo Update",
            'sett_geo': "Set Geo",
            'head_enable_un': "Username Settings",
            'enable_un': "Enable Username Update",
            'sett_un': "Set Username",
            'head_other': "Additional",
            'debug_mode': "Debug",
            'debug_mode_desc': "Show debug information",

            'interval': "Interval",
            'sub_interval': "Format: 1d 2h 3m 4s",
            'div_interval': "Set the time interval for changing the text.",
            't_prompt': "Prompt",
            'def_name': "Come up with a creative name",
            'sub_name': "E.g.: Come up with a creative nickname",
            'text_on_error': "Text on error",
            't_search': "Internet Access",
            'sub_search': "If enabled, AI will have access to web search.",
            't_memory': "Memory",
            'sub_memory': "Helps avoid frequent repetitions",
            'generate_now': "Generate Now",
            'div_un': "It is recommended to change no more than once per day.",
            'def_un': "Come up with a username. One word, in English, no symbols. Add at the end: _AiS",
            'def_bio': "Generate a creative Telegram status",
            'ai_error': "AI Unavailable",
            'generating': "Generating",
            'generated': "generated",
            
            'add_menu': "Menu Item",
            'sub_add_menu': "Add a button for these settings to the left sidebar menu",
            
            'clear_memory': "Clean memory",
            'clear_memory_title': "Clear ",
            'clear_memory_confirm': "Are you sure you want to clear this memory?",
            'yes': "Yes",
            'cancel': "Cancel",
            'cleaned': "cleaned",
            'memory_limit': "Memory capacity",
            'memory_limit_desc': "Maximum number of saved generations",
            'model': "Neural network",
            'models_api_list': ["gpt-4.1-nano", "deepseek-v3", "grok-3-mini", "gpt-4o-mini-search", "evil"],
            'models_list': ["GPT-4.1 Nano", "DeepSeek V3", "Grok-3 Mini", "GPT-4o-search (Internet Access)", "Evil (uncensored)"]
        },

    }
    lang_key = 'ru' if lang.startswith('ru') else 'en'
    return strings[lang_key]

class AIStatusPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.running = False
        self.memory = {"name":[], "bio":[], "geo":[], "username":[]}

    def on_plugin_load(self):
        self.running = True
        threading.Thread(target=self.worker, daemon=True).start()

    def on_plugin_unload(self):
        self.running = False

    def create_settings(self):
        s = tr()
        return [
            Header(text=s["head_enable_name"]),
            Switch(key="enable_name", text=s['enable_name'], default=False, icon="msg_openprofile"),
            Text(text=s["sett_name"], icon="msg_download_settings", create_sub_fragment=self.create_name_settings),
            Divider(),
            Header(text=s["head_enable_bio"]),
            Switch(key="enable_bio", text=s["enable_bio"], default=False, icon="msg_online"),
            Text(text=s["sett_bio"], icon="msg_download_settings", create_sub_fragment=self.create_bio_settings),
            Divider(),
            Header(text=s["head_enable_geo"]),
            Switch(key="enable_geo", text=s["enable_geo"], default=False, icon="menu_premium_location"),
            Text(text=s["sett_geo"], icon="msg_download_settings", create_sub_fragment=self.create_geo_settings),
            Divider(),
            Header(text=s["head_enable_un"]),
            Switch(key="enable_username", text=s["enable_un"], default=False, icon="msg_openprofile"),
            Text(text=s["sett_un"], icon="msg_download_settings", create_sub_fragment=self.create_username_settings),
            Divider(),
            Header(text=s["head_other"]),
            Switch(key="debug_mode", text=s["debug_mode"], subtext=s["debug_mode_desc"], default=False, icon="msg_info"),
        ]

    def create_name_settings(self):
        s = tr()
        return [
            Input(key="name_interval", text=s["interval"], default="30m", subtext=s["sub_interval"], icon="msg_recent"),
            Divider(s["div_interval"]),
            Input(key="name_prompt", text=s["t_prompt"], default=s["def_name"], subtext=s["sub_name"], icon="msg_photo_text_regular"),
            Input(key="name_fallback", text=s["text_on_error"], default="...", icon="msg_info"),
            Divider(),
            
            Selector(
                key="name_model",
                text=s["model"],
                default=0,
                items=s["models_list"], icon="msg_folders_bots"
            ),
            
            Divider(),
            
            Switch(key="mem_name", text=s["t_memory"], subtext=s["sub_memory"], default=False, icon="files_storage"),
            Input(key="name_memory_limit", text=s["memory_limit"], subtext=s["memory_limit_desc"], default="15", icon="msg_pin"),
            Text(text=s["clear_memory"], icon="msg_delete", red=True,
                 on_click=lambda v: self.confirm_clear_memory("name")),
            Divider(),
            Text(text=s["generate_now"], icon="msg_header_draw", accent=True, on_click=lambda v: self.manual_generate("name")),
        ]

    def create_username_settings(self):
        s = tr()
        return [
            Input(key="username_interval", text=s["interval"], default="30m", subtext=s["sub_interval"], icon="msg_recent"),
            Divider(s["div_un"]),
            Input(key="username_prompt", text=s["t_prompt"], default=s["def_un"], subtext=s["sub_name"], icon="msg_photo_text_regular"),
            Input(key="username_fallback", text=s["text_on_error"], default="user123", icon="msg_info"),
            Divider(),
            
            Selector(
                key="username_model",
                text=s["model"],
                default=0,
                items=s["models_list"], icon="msg_folders_bots"
            ),
            
            Divider(),
            
            Switch(key="mem_username", text=s["t_memory"], subtext=s["sub_memory"], default=False, icon="files_storage"),
            Input(key="username_memory_limit", text=s["memory_limit"], subtext=s["memory_limit_desc"], default="15", icon="msg_pin"),
            Text(text=s["clear_memory"], icon="msg_delete", red=True,
                 on_click=lambda v: self.confirm_clear_memory("username")),
            Divider(),
            Text(text=s["generate_now"], icon="msg_header_draw", accent=True, on_click=lambda v: self.manual_generate("username")),
        ]

    def create_bio_settings(self):
        s = tr()
        return [
            Input(key="bio_interval", text=s["interval"], default="30m", subtext=s["sub_interval"], icon="msg_recent"),
            Divider(s["div_interval"]),
            Input(key="bio_prompt", text=s["t_prompt"], default=s["def_bio"], subtext=s["sub_name"], icon="msg_photo_text_regular"),
            Input(key="bio_fallback", text=s["text_on_error"], default=s["ai_error"], icon="msg_info"),
            Divider(),
            
            Selector(
                key="bio_model",
                text=s["model"],
                default=0,
                items=s["models_list"], icon="msg_folders_bots"
            ),
            
            Divider(),
            
            Switch(key="mem_bio", text=s["t_memory"], subtext=s["sub_memory"], default=False, icon="files_storage"),
            Input(key="bio_memory_limit", text=s["memory_limit"], subtext=s["memory_limit_desc"], default="15", icon="msg_pin"),
            Text(text=s["clear_memory"], icon="msg_delete", red=True,
                 on_click=lambda v: self.confirm_clear_memory("bio")),
            Divider(),
            Text(text=s["generate_now"], icon="msg_header_draw", accent=True, on_click=lambda v: self.manual_generate("bio")),
        ]

    def create_geo_settings(self):
        s = tr()
        return [
            Input(key="geo_interval", text=s["interval"], default="30m", subtext=s["sub_interval"], icon="msg_recent"),
            Divider(s["div_interval"]),
            Input(key="geo_prompt", text=s["t_prompt"], default=s["def_bio"], subtext=s["sub_name"], icon="msg_photo_text_regular"),
            Input(key="geo_fallback", text=s["text_on_error"], default=s["ai_error"], icon="msg_info"),
            Divider(),
            
            Selector(
                key="geo_model",
                text=s["model"],
                default=0,
                items=s["models_list"], icon="msg_folders_bots"
            ),
            
            Divider(),
            
            Switch(key="mem_geo", text=s["t_memory"], subtext=s["sub_memory"], default=False, icon="files_storage"),
            Input(key="geo_memory_limit", text=s["memory_limit"], subtext=s["memory_limit_desc"], default="15", icon="msg_pin"),
            Text(text=s["clear_memory"], icon="msg_delete", red=True,
                 on_click=lambda v: self.confirm_clear_memory("geo")),
            Divider(),
            Text(text=s["generate_now"], icon="msg_header_draw", accent=True, on_click=lambda v: self.manual_generate("geo")),
        ]

    def worker(self):
        last = {"name":0,"username":0,"bio":0,"geo":0}
        while self.running:
            now = time.time()
            for mode in ("name","username","bio","geo"):
                if self.get_setting(f"enable_{mode}", False):
                    interval = parse_interval(self.get_setting(f"{mode}_interval", "30m"))
                    if now - last[mode] >= interval:
                        getattr(self, f"update_{mode}")()
                        last[mode] = now
            time.sleep(5)

    def build_system_prompt(self, mode):
        t = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        limit = int(self.get_setting(f"{mode}_memory_limit", 15))
        mem = ""
        if self.get_setting(f"mem_{mode}", False):
            mem_list = self.memory.get(mode, [])[-limit:]
            if mem_list:
                mem = "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π, —É–∂–µ –±—ã–ª–æ: " + ", ".join(mem_list)
        base = f"–¢—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–ª—å –∫–æ—Ä–æ—Ç–∫—É—é, —á–∏—Å—Ç—É—é, –ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Ñ—Ä–∞–∑—É –¥–ª—è  {mode} –≤ Telegram.\n–ù–µ –ø–∏—à–∏ ¬´—Ö–æ—Ä–æ—à–æ¬ª, ¬´–ø—Ä–∏–≤–µ—Ç¬ª, ¬´```¬ª, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ, –ø–∏—à–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω—É —Ñ—Ä–∞–∑—É, –ø–æ —Å–∫–æ–ª—å–∫—É –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º. –ü–∏—à–∏ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {t}."
        return base + ("\n\n " + mem if mem else "")

    def get_ai_status(self, prompt, mode):
        s = tr()
        model = s["models_api_list"][self.get_setting(f"{mode}_model", 0)]
        try:
            sc = [{"role":"system","content":self.build_system_prompt(mode)},
                  {"role":"user","content":prompt}]
            resp = requests.post(AI_API_URL, json={"model":model,"messages":sc}, timeout=15)
            if resp.status_code==200:
                text = clean_ai_text(resp.json()["choices"][0]["message"]["content"])
                if self.get_setting(f"mem_{mode}", False):
                    self.memory.setdefault(mode, []).append(text)
                    self.memory[mode] = self.memory[mode][-MEMORY_LIMIT:]
                return text
            if self.get_setting("debug_mode", False):
                return f"–û—à–∏–±–∫–∞ API: {resp.status_code}"
        except Exception as e:
            if self.get_setting("debug_mode", False):
                return f"–û—à–∏–±–∫–∞: {e}"
        return None

    def update_name(self):
        text = self.get_ai_status(self.get_setting("name_prompt",""), "name") or self.get_setting("name_fallback","")
        parts = text.split()
        req = TL_account.updateProfile()
        req.flags = (1<<0)|(1<<1)
        req.first_name = parts[0][:64]
        req.last_name = " ".join(parts[1:])[:64] if len(parts)>1 else ""
        send_request(req, ())

    def update_username(self):
        text = self.get_ai_status(self.get_setting("username_prompt",""), "username") or self.get_setting("username_fallback","")
        req = TL_account.updateUsername()
        req.username = text
        send_request(req, ())

    def update_bio(self):
        text = self.get_ai_status(self.get_setting("bio_prompt",""), "bio") or self.get_setting("bio_fallback","")
        max_len = 140 if get_user_config().isPremium() else 70
        req = TL_account.updateProfile()
        req.flags = 4
        req.about = text[:max_len]
        send_request(req, ())

    def update_geo(self):
        text = self.get_ai_status(self.get_setting("geo_prompt",""), "geo") or self.get_setting("geo_fallback","")
        req = TL_account.updateBusinessLocation()
        req.flags = 1
        req.address = text[:96]
        send_request(req, ())

    def manual_generate(self, mode):
        s = tr()
        BulletinHelper.show_info(f"{s['generating']} {mode}...", get_last_fragment())
        threading.Thread(target=lambda: (getattr(self, f"update_{mode}")(), BulletinHelper.show_success(f"{mode.capitalize()} {s['generated']}.", get_last_fragment())), daemon=True).start()
        
    def confirm_clear_memory(self, mode):
        s = tr()
        fragment = get_last_fragment()
        if not fragment:
            return
        activity = fragment.getParentActivity()
        if not activity:
            return
        from ui.alert import AlertDialogBuilder
        builder = AlertDialogBuilder(activity)
        builder.set_title(s["clear_memory_title"])
        builder.set_message(s[f"clear_memory_confirm"])
        def on_yes(bld, which):
            self.memory[mode] = []
            bld.dismiss()
            BulletinHelper.show_success(f"{mode.capitalize()} {s['cleaned']}", fragment)
        builder.set_positive_button(s["yes"], on_yes)
        builder.make_button_red(AlertDialogBuilder.BUTTON_POSITIVE)
        builder.set_negative_button(s["cancel"], lambda bld, which: bld.dismiss())
        builder.show()
        
# –ü—Ä–∏–≤–µ—Ç! üëã
# –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º –∫–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π —É–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞: @RnPlugins
# –Ø –Ω–µ –ø—Ä–æ—Ç–∏–≤, –¥–µ–ª–∞–π –∫—Ä—É—Ç—ã–µ —à—Ç—É–∫–∏, —Ä–∞–∑–≤–∏–≤–∞–π, —É–ª—É—á—à–∞–π ‚Äî —Ç–æ–ª—å–∫–æ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º üôå
# –ü—É—Å—Ç—å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è, —É–¥–∞—á–∏ —Ç–µ–±–µ –≤ –∫–æ–¥–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!)