from base_plugin import BasePlugin, MethodReplacement
from hook_utils import find_class
from ui.settings import Input
from ui.bulletin import BulletinHelper
from java.lang import Boolean, Runnable
from org.telegram.tgnet.tl import TL_stars
from decimal import Decimal

__id__ = "feel-yourself-rich"
__name__ = "Feel Rich"
__description__ = "*Locally* modify stars balance in your profile"
__author__ = "@PESSDES_Plugins"
__min_version__ = "11.12.0"
__icon__ = "VoiceToText7/1"
__version__ = "1.2"

StarsController = find_class("org.telegram.ui.Stars.StarsController").getClass()

class FeelYourselfRichPlugin(BasePlugin):
    stars_amount: Decimal = 1000
    
    def on_plugin_load(self):
        getBalance = StarsController.getDeclaredMethod("getBalance", Boolean.TYPE, Runnable.getClass(), Boolean.TYPE)
        self.hook_method(getBalance, GetBalanceHook(self))
    
    def create_settings(self):
        return [
            Input("amount", "Stars amount", default="1000", icon="filled_giveaway_stars", on_change=self.set_stars_amount)
        ]

    def set_stars_amount(self, value):
        value = str(value)
        try:
            self.stars_amount = Decimal(value)
        except ValueError:
            self.set_setting("amount", str(self.stars_amount))
            BulletinHelper.show_error("Invalid amount")
        self.log(f'Settings stars amount: {value}, set to {self.stars_amount}')

class GetBalanceHook(MethodReplacement):
    def __init__(self, plugin: FeelYourselfRichPlugin):
        self.plugin = plugin
    
    changed = False
      
    def replace_hooked_method(self, param):
        # Устанавливаем значение после первого запуска плагина
        if not self.changed and self.plugin.stars_amount == 1000:
            self.plugin.set_stars_amount(self.plugin.get_setting("amount", "1000"))
        self.changed = True
        
        amount = self.decimal_to_amount(self.plugin.stars_amount)
        return amount
    
    @staticmethod
    def decimal_to_amount(value: Decimal) -> TL_stars.StarsAmount:
        frac_part = round(value % 1 * 100, 2)
        nanos = int(frac_part * 10_000_000)

        amount = TL_stars.StarsAmount(int(value))
        amount.nanos = nanos
        return amount