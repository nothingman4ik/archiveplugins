import requests
import random
import string
import os
import time
import uuid
from typing import Any, Optional
from bs4 import BeautifulSoup
from java.util import ArrayList, Locale
from java.io import File
from org.telegram.messenger import ApplicationLoader
from org.telegram.ui.ActionBar import AlertDialog

from android_utils import log, run_on_ui_thread
from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import run_on_queue, get_last_fragment, get_send_messages_helper
from ui.bulletin import BulletinHelper

__id__ = "lightshot_random"
__name__ = "Lightshot Random"
__description__ = "ищет рандомную фотку с Lightshot [.lsr]"
__author__ = "@melishy"
__version__ = "1.0.1"
__icon__ = "melishyPlugins/1"
__min_version__ = "11.12.0"

class LightshotRandomPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.fetching = False

    def on_plugin_load(self):
        self.add_on_send_message_hook()

    def _get_strings(self):
        lang = Locale.getDefault().getLanguage()
        
        strings = {
            'ru': {
                'searching': "Ищем случайный скриншот...",
                'already_searching': "Уже ищем изображение, подождите...",
                'success': "Случайный скриншот найден!",
                'not_found': "Случайный скриншот не найден, попробуйте еще раз",
                'process_failed': "Не удалось обработать изображение",
                'error': "Ошибка"
            },
            'en': {
                'searching': "Searching for random screenshot...",
                'already_searching': "Already searching for image, please wait...",
                'success': "Random screenshot found!",
                'not_found': "No random screenshot found, try again",
                'process_failed': "Failed to process image", 
                'error': "Error"
            }
        }
        
        return strings.get(lang, strings['en']) if lang.startswith('ru') else strings['en']

    def _generate_screenshot_id(self) -> str:
        first_chars = 'abcdefghijklmnopqrstuvwxyz123456789'
        rest_chars = 'abcdefghijklmnopqrstuvwxyz0123456789'
        
        first_char = random.choice(first_chars)
        rest_chars_str = ''.join(random.choice(rest_chars) for _ in range(5))
        
        return first_char + rest_chars_str

    def _extract_image_from_html(self, html_content: str) -> Optional[str]:
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
            img_tag = soup.find('img', class_='no-click screenshot-image')
            
            if not img_tag:
                img_tag = soup.find('img', id='screenshot-image')
            
            if img_tag and img_tag.get('src'):
                img_url = img_tag['src']
                
                if not img_url or 'error' in img_url or '0_173a7b_211be8ff.png' in img_url:
                    return None
                
                if img_url.startswith('//'):
                    img_url = 'https:' + img_url
                
                return img_url
            
            return None
            
        except Exception as e:
            log(f"HTML parsing error: {e}")
            return None

    def _download_random_screenshot(self, params, progress_dialog):
        strings = self._get_strings()
        
        try:
            max_attempts = 20
            fail_streak = 0

            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }

            while fail_streak < max_attempts:
                try:
                    screenshot_id = self._generate_screenshot_id()
                    lightshot_url = f"https://prnt.sc/{screenshot_id}"
                    
                    log(f"Trying: {lightshot_url}")
                    
                    response = requests.get(lightshot_url, headers=headers, timeout=10)
                    
                    if response.status_code == 200:
                        image_url = self._extract_image_from_html(response.text)
                        
                        if image_url:
                            log(f"Found image URL: {image_url}")
                            
                            image_response = requests.get(image_url, headers=headers, timeout=10, stream=True)
                            
                            if image_response.status_code == 200:
                                content_type = image_response.headers.get('content-type', '')
                                
                                if 'image' in content_type:
                                    base_dir = ApplicationLoader.getFilesDirFixed()
                                    temp_dir = File(base_dir, "exteraGram LightshotImages")
                                    if not temp_dir.exists():
                                        temp_dir.mkdirs()
                                    
                                    ext = image_url.split(".")[-1].split("?")[0]
                                    if ext not in ['jpg', 'jpeg', 'png', 'gif', 'webp']:
                                        ext = 'jpg'
                                    
                                    filename = f"lightshot_{screenshot_id}.{ext}"
                                    temp_path = File(temp_dir, filename).getAbsolutePath()
                                    
                                    with open(temp_path, 'wb') as f:
                                        for chunk in image_response.iter_content(8192):
                                            if chunk:
                                                f.write(chunk)
                                    
                                    if not os.path.exists(temp_path) or os.path.getsize(temp_path) < 5000:
                                        os.remove(temp_path) if os.path.exists(temp_path) else None
                                        fail_streak += 1
                                        continue
                                    
                                    send_helper = get_send_messages_helper()
                                    generated_photo = send_helper.generatePhotoSizes(temp_path, None)
                                    
                                    if not generated_photo:
                                        BulletinHelper.show_error(strings['process_failed'])
                                        os.remove(temp_path)
                                        if progress_dialog: 
                                            progress_dialog.dismiss()
                                        return
                                    
                                    params.photo = generated_photo
                                    params.path = temp_path
                                    params.caption = lightshot_url
                                    params.message = None
                                    
                                    if not hasattr(params, "entities") or params.entities is None:
                                        params.entities = ArrayList()
                                    
                                    run_on_ui_thread(lambda: get_send_messages_helper().sendMessage(params))
                                    BulletinHelper.show_success(strings['success'])
                                    
                                    def cleanup():
                                        time.sleep(10)
                                        try:
                                            os.remove(temp_path)
                                        except Exception:
                                            pass
                                    run_on_queue(cleanup)
                                    
                                    return
                    
                    fail_streak += 1
                    log(f"Attempt {fail_streak} failed, retrying...")
                    
                    if fail_streak < max_attempts:
                        time.sleep(0.25)
                    
                except Exception as e:
                    fail_streak += 1
                    log(f"Attempt {fail_streak} failed with error: {e}")
                    
                    if fail_streak < max_attempts:
                        time.sleep(0.25)

            BulletinHelper.show_error(strings['not_found'])
            
        except Exception as e:
            BulletinHelper.show_error(f"{strings['error']}: {e}")
            log(f"Download error: {e}")
        finally:
            self.fetching = False
            if progress_dialog:
                try: 
                    progress_dialog.dismiss()
                except Exception: 
                    pass

    def on_send_message_hook(self, account, params):
        if not hasattr(params, "message") or not isinstance(params.message, str):
            return HookResult()
        
        msg = params.message.strip()
        
        if not (msg == '.lsr' or msg.startswith('.lsr ')):
            return HookResult()
        
        strings = self._get_strings()
        
        if self.fetching:
            BulletinHelper.show_info(strings['already_searching'])
            return HookResult(strategy=HookStrategy.CANCEL)
        
        self.fetching = True
        
        try:
            progress_dialog = AlertDialog(get_last_fragment().getParentActivity(), 3)
            progress_dialog.setMessage(strings['searching'])
            progress_dialog.show()
        except Exception:
            progress_dialog = None
        
        run_on_queue(lambda: self._download_random_screenshot(params, progress_dialog))
        
        return HookResult(strategy=HookStrategy.CANCEL)