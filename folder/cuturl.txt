import requests
from org.telegram.ui.ActionBar import AlertDialog
from ui.settings import Header, Divider, Input, Selector, Switch
from base_plugin import BasePlugin, HookResult, HookStrategy
from android_utils import log, run_on_ui_thread
from client_utils import send_message, get_last_fragment, run_on_queue
from java.util import Locale
from markdown_utils import parse_markdown

__id__ = "cuturl"
__name__ = "CutURL"
__description__ = "Shorten URLs using Cutt.ly, TinyURL, is.gd, Cleanuri, Bitly or Clck.ru. Use .cut <link>"
__author__ = "@AGeekApple, @exteraDevPlugins"
__version__ = "1.0.1"
__min_version__ = "11.12.0"
__icon__ = "ApplePlugins/2"

TRANSLATIONS = {
    "usage": {
        "en": "Usage: .cut <url>",
        "pt": "Uso: .cut <url>",
        "es": "Uso: .cut <url>",
        "ru": "Использование: .cut <url>",
        "fr": "Utilisation : .cut <url>"
    },
    "api_key_not_set": {
        "en": "API key not set. Set it in plugin settings.",
        "pt": "Chave API não configurada. Defina nas configurações.",
        "es": "Clave API no establecida. Defínela en ajustes.",
        "ru": "Ключ API не установлен. Установите в настройках.",
        "fr": "Clé API non définie. Définissez-la dans les paramètres."
    },
    "bitly_token_not_set": {
        "en": "Bitly token not set. Set it in plugin settings.",
        "pt": "Token Bitly não configurado. Defina nas configurações.",
        "es": "Token de Bitly no establecido. Defínelo en ajustes.",
        "ru": "Токен Bitly не установлен. Установите в настройках.",
        "fr": "Jeton Bitly non défini. Définissez-le dans les paramètres."
    },
    "shortening_url": {
        "en": "Shortening URL...",
        "pt": "Encurtando URL...",
        "es": "Acortando URL...",
        "ru": "Сокращение URL...",
        "fr": "Raccourcissement de l’URL..."
    },
    "error_shortening": {
        "en": "Error shortening URL: {error}",
        "pt": "Erro ao encurtar URL: {error}",
        "es": "Error al acortar URL: {error}",
        "ru": "Ошибка при сокращении URL: {error}",
        "fr": "Erreur lors du raccourcissement : {error}"
    },
    "error_general": {
        "en": "Error: {error}",
        "pt": "Erro: {error}",
        "es": "Error: {error}",
        "ru": "Ошибка: {error}",
        "fr": "Erreur : {error}"
    },
    "shortening_text": {
        "en": "Shortening...",
        "pt": "Encurtando...",
        "es": "Acortando...",
        "ru": "Сокращение...",
        "fr": "Raccourcissement..."
    },
    "shortener": {
        "en": "Shortener",
        "pt": "Encurtador",
        "es": "Acortador",
        "ru": "Сократитель",
        "fr": "Raccourcisseur"
    },
    "cuturl_settings": {
        "en": "CutURL Settings",
        "pt": "Configurações do CutURL",
        "es": "Configuraciones de CutURL",
        "ru": "Настройки CutURL",
        "fr": "Paramètres CutURL"
    },
    "cuturl_usage": {
        "en": "Use .cut <url> to shorten links",
        "pt": "Use .cut <url> para encurtar links",
        "es": "Usa .cut <url> para acortar enlaces",
        "ru": "Используйте .cut <url> для сокращения ссылок",
        "fr": "Utilisez .cut <url> pour raccourcir des liens"
    },
    "enable_token_inputs": {
        "en": "Enable token inputs",
        "pt": "Ativar entrada de tokens",
        "es": "Habilitar entradas de tokens",
        "ru": "Включить ввод токенов",
        "fr": "Activer les champs de jeton"
    },
    "show_api_fields": {
        "en": "Show API/token fields for Cutt.ly and Bitly",
        "pt": "Mostrar campos de API/token para Cutt.ly e Bitly",
        "es": "Mostrar campos de API/token para Cutt.ly y Bitly",
        "ru": "Показать поля API/токена для Cutt.ly и Bitly",
        "fr": "Afficher les champs API/jeton pour Cutt.ly et Bitly"
    },
    "cuttly_api": {
        "en": "Cutt.ly API Key",
        "pt": "Chave da API Cutt.ly",
        "es": "Clave API de Cutt.ly",
        "ru": "API ключ Cutt.ly",
        "fr": "Clé API Cutt.ly"
    },
    "cuttly_sub": {
        "en": "Only needed for Cutt.ly. Get it from https://cutt.ly",
        "pt": "Necessário apenas para o Cutt.ly. Obtenha em https://cutt.ly",
        "es": "Solo se necesita para Cutt.ly. Consíguelo en https://cutt.ly",
        "ru": "Нужно только для Cutt.ly. Получите на https://cutt.ly",
        "fr": "Nécessaire uniquement pour Cutt.ly. Obtenez-le sur https://cutt.ly"
    },
    "bitly_token": {
        "en": "Bitly Access Token",
        "pt": "Token de Acesso Bitly",
        "es": "Token de Acceso Bitly",
        "ru": "Токен доступа Bitly",
        "fr": "Jeton d'accès Bitly"
    },
    "bitly_sub": {
        "en": "Needed only if Bitly is selected",
        "pt": "Necessário apenas se o Bitly estiver selecionado",
        "es": "Solo necesario si se selecciona Bitly",
        "ru": "Нужно только если выбран Bitly",
        "fr": "Nécessaire uniquement si Bitly est sélectionné"
    },
    "monospace_toggle": {
        "en": "Tap to copy",
        "pt": "Toque para copiar",
        "es": "Toca para copiar",
        "ru": "Нажмите, чтобы скопировать",
        "fr": "Touchez pour copier"
    },
    "monospace_sub": {
        "en": "Link in code style for quick copy",
        "pt": "Link em estilo código para copiar rápido",
        "es": "Enlace en estilo código para copia rápida",
        "ru": "Ссылка в стиле кода для копирования",
        "fr": "Lien en style code pour copie rapide"
    }
}

def tr(key, **kwargs):
    lang = Locale.getDefault().getLanguage()
    texts = TRANSLATIONS.get(key, {})
    text = texts.get(lang, texts.get("en", ""))
    return text.format(**kwargs) if kwargs else text

class CutURL(BasePlugin):
    def create_settings(self):
        enable_tokens = self.get_setting("enable_tokens", False)

        return [
            Header(tr("cuturl_settings")),
            Divider(tr("cuturl_usage")),

            Selector(
                key="shortener_index",
                icon="filled_link_solar",
                text=tr("shortener"),
                default=0,
                items=["Cutt.ly", "TinyURL", "is.gd", "Cleanuri", "Bitly", "Clck.ru"]
            ),

            Switch(
                key="enable_tokens",
                text=tr("enable_token_inputs"),
                icon="fingerprint_remix",
                default=False,
                subtext=tr("show_api_fields"),
                on_change=lambda _: self.reload_settings()
            ),

            Input(
                key="api_key",
                text=tr("cuttly_api"),
                icon="menu_feature_links2",
                default="",
                subtext=tr("cuttly_sub")
            ) if enable_tokens else None,

            Input(
                key="bitly_token",
                text=tr("bitly_token"),
                icon="msg_instant_link",
                default="",
                subtext=tr("bitly_sub")
            ) if enable_tokens else None,

            Switch(
                key="use_monospace",
                text=tr("monospace_toggle"),
                icon="msg_link_2_remix",
                default=True,
                subtext=tr("monospace_sub")
            ),
        ]

    def on_plugin_load(self):
        self.add_on_send_message_hook()
        log("[CutURL] Plugin loaded")

    def on_plugin_unload(self):
        log("[CutURL] Plugin unloaded")

    def on_send_message_hook(self, account, params):
        if not hasattr(params, "message") or not isinstance(params.message, str):
            return HookResult()

        msg = params.message.strip()

        if not msg.startswith(".cut"):
            return HookResult()

        parts = msg.split(maxsplit=1)
        if len(parts) < 2:
            params.message = tr("usage")
            return HookResult(strategy=HookStrategy.MODIFY, params=params)

        url_to_shorten = parts[1].strip()
        shortener_index = self.get_setting("shortener_index", 0)
        api_key = self.get_setting("api_key", "").strip()
        bitly_token = self.get_setting("bitly_token", "").strip()
        use_monospace = self.get_setting("use_monospace", True)

        def shorten():
            try:
                fragment = get_last_fragment()
                if fragment:
                    run_on_ui_thread(lambda: self._show_dialog(fragment))

                short_link = self._shorten_url(shortener_index, url_to_shorten, api_key, bitly_token)
                self._send_formatted(params, short_link, use_monospace)

            except Exception as e:
                log(f"[CutURL] Exception: {e}")
                send_message({
                    "peer": getattr(params, "peer", None),
                    "message": tr("error_general", error=str(e))
                })
            finally:
                run_on_ui_thread(self._dismiss_dialog)

        run_on_queue(shorten)
        params.message = tr("shortening_text")
        return HookResult(strategy=HookStrategy.CANCEL)

    def _show_dialog(self, fragment):
        self.dialog = AlertDialog(fragment.getParentActivity(), 3)
        self.dialog.setMessage(tr("shortening_url"))
        self.dialog.show()

    def _dismiss_dialog(self):
        try:
            if hasattr(self, "dialog") and self.dialog and self.dialog.isShowing():
                self.dialog.dismiss()
        except Exception:
            pass
        self.dialog = None

    def _shorten_url(self, shortener_index, url, api_key, bitly_token):
        if shortener_index == 0:
            if not api_key:
                raise Exception(tr("api_key_not_set"))
            res = requests.get("https://cutt.ly/api/api.php", params={
                "key": api_key,
                "short": url
            }, timeout=10)
            data = res.json()
            if data.get("url", {}).get("status") != 7:
                err = data.get("url", {}).get("title") or data.get("url", {}).get("error", "Unknown error")
                raise Exception(tr("error_shortening", error=err))
            return data["url"]["shortLink"]

        elif shortener_index == 1:
            res = requests.get("https://tinyurl.com/api-create.php", params={"url": url}, timeout=10)
            return res.text.strip()

        elif shortener_index == 2:
            res = requests.get("https://is.gd/create.php", params={"format": "simple", "url": url}, timeout=10)
            return res.text.strip()

        elif shortener_index == 3:
            res = requests.post("https://cleanuri.com/api/v1/shorten", data={"url": url}, timeout=10)
            data = res.json()
            if "result_url" not in data:
                raise Exception(tr("error_shortening", error=data.get("error", "Unknown error")))
            return data["result_url"]

        elif shortener_index == 4:
            if not bitly_token:
                raise Exception(tr("bitly_token_not_set"))
            headers = {"Authorization": f"Bearer {bitly_token}"}
            json_data = {"long_url": url}
            res = requests.post("https://api-ssl.bitly.com/v4/shorten", json=json_data, headers=headers, timeout=10)
            data = res.json()
            if "link" not in data:
                raise Exception(tr("error_shortening", error=data.get("message", "Unknown error")))
            return data["link"]

        elif shortener_index == 5:
            headers = {
                "User-Agent": "Mozilla/5.0 (compatible; CutURLPlugin/1.0; +https://t.me/AGeekApple)"
            }
            res = requests.get("https://clck.ru/--", params={"url": url}, headers=headers, timeout=10)
            content = res.text.strip()
            log(f"[CutURL] clck.ru response: {content}")

            if res.status_code != 200:
                raise Exception(tr("error_shortening", error=f"HTTP {res.status_code} from clck.ru"))

            if not content.startswith("https://clck.ru/"):
                raise Exception(tr("error_shortening", error=f"Invalid response from clck.ru: {content[:100]}"))

            return content

        else:
            raise Exception("Unknown shortener selected.")

    def _send_formatted(self, params, link, use_monospace):
        if use_monospace:
            try:
                parsed = parse_markdown(f"`{link}`")
                send_message({
                    "peer": getattr(params, "peer", None),
                    "message": parsed.text,
                    "entities": [e.to_tlrpc_object() for e in parsed.entities]
                })
            except Exception:
                send_message({
                    "peer": getattr(params, "peer", None),
                    "message": link
                })
        else:
            send_message({
                "peer": getattr(params, "peer", None),
                "message": link
            })
