__id__ = "nowMediaRn"
__name__ = "nowMedia"
__author__ = "@RooniPlugin"
__version__ = "1.0.3"
__description__ = """‚ÄºÔ∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! ‚ÄºÔ∏è
–ö—Ä–∞—Å–∏–≤–∞—è –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–µ–º–∞—è –º–µ–¥–∏–∞-–∫–∞—Ä—Ç–æ—á–∫–∞ —Å –º–µ–¥–∏–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–∞–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å. –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. (–ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .nm)"""

__icon__ = "sPluginIDE/18"
__min_version__ = "11.12.0"

import os
import json
import math
import traceback
import requests
import threading
import time
import re
import random
import uuid
from typing import Any, Optional, List, Tuple, Callable

# –ü–ª–∞–≥–∏–Ω —Ç—Ä–µ–±—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É Pillow, –∫–æ—Ç–æ—Ä–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ exteraGram.
# pi
try:
    from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageOps, ImageColor, ImageEnhance
except ImportError:
    raise ImportError("–≠—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Pillow.")

from base_plugin import BasePlugin, HookResult, HookStrategy, MethodHook, MenuItemData, MenuItemType
from markdown_utils import parse_markdown
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder
from client_utils import send_message, get_send_messages_helper, run_on_queue, get_last_fragment, send_request, get_user_config
from android_utils import run_on_ui_thread, log
from java.io import File, FileOutputStream
from java.util import Locale, ArrayList
from org.telegram.messenger import ApplicationLoader, LocaleController, AndroidUtilities
from org.telegram.tgnet import TLRPC
from org.telegram.tgnet.tl import TL_account
from ui.settings import Header, Input, Divider, Switch, Selector, Text
from hook_utils import find_class
from android.content import Intent
from android.net import Uri
from android.app import Activity
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º (=^„Çß^=)
from com.exteragram.messenger.plugins import PluginsController
from com.exteragram.messenger.plugins.ui import PluginSettingsActivity
from android.view import KeyEvent
from android.media import AudioManager

# —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ Plugin IDE - @PluginIDE
TEMP_DIR = "nowMedia_Ultimate"
MEGA_OVERLAY_URL = "https://raw.githubusercontent.com/Igroshka/-/87bf3aaf764fa81bcd190c9ebff1de3bb213edcc/img/mega_overlay.png"
MEGA_OVERLAY_NAME = "mega_overlay.png"
COMPANION_APP_PKG = "you.rooni.nowMedia"
DOWNLOAD_URL = "https://t.me/RnPlugins/548"
FILE_PICK_REQUEST_CODE = 2024 # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞

PREDEFINED_FONTS = {
    "Neutraface": "https://github.com/Igroshka/-/raw/refs/heads/main/font/NeutraDemiSC.ttf",
    "Couriercy": "https://github.com/Igroshka/-/raw/refs/heads/main/font/couriercyrps.ttf",
    "Roboto": "https://github.com/Igroshka/-/raw/refs/heads/main/font/Roboto-Regular.ttf",
    "Times New Roman": "https://github.com/Igroshka/-/raw/refs/heads/main/font/timesnewromanpsmt.ttf",
    "Impact": "https://github.com/Igroshka/-/raw/refs/heads/main/font/Impact.ttf",
    "Aisoo": "https://github.com/Igroshka/-/raw/refs/heads/main/font/1/aisoo.ttf",
    "Neucha": "https://github.com/Igroshka/-/raw/refs/heads/main/font/1/Neucha.ttf",
    "Caviar Dream": "https://github.com/Igroshka/-/raw/refs/heads/main/font/1/CaviarDreamBold.ttf",
    "Ruslan Display": "https://github.com/Igroshka/-/raw/refs/heads/main/font/1/Ruslan%20Display.ttf",
    "Lunasima": "https://github.com/Igroshka/-/raw/refs/heads/main/font/1/Lunasima.ttf"
}
DEFAULT_TEMPLATE = """*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* `{artist}`
*–¢—Ä–µ–∫:* `{title}`
*–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:* `{appName}`"""
NORMALIZATION_MAP = {
    '‚Äô': "'", '‚Äò': "'", '‚Äù': '"', '‚Äú': '"', '‚Äî': '-', '‚Äì': '-', '√©': 'e', '√°': 'a', '√≠': 'i', '√≥': 'o', '√∫': 'u',
    '√â': 'E', '√Å': 'A', '√ç': 'I', '√ì': 'O', '√ö': 'U', '√º': 'u', '√±': 'n', '√ß': 'c', '√ü': 'ss'
}

PRESETS = {
    "Default": {"layout_style":0, "padding":"25", "bg_style":0, "blur_radius":"50", "wet_glass_blur_radius":"30", "background_dim":"75", "cover_rounding":"20", "cover_shadow_enable":True, "border_enable":True, "border_width":"3", "use_dominant_color":True, "text_color":"#FFFFFF"},
    "Discord Dark": {"layout_style":0, "padding":"20", "bg_style":6, "bg_solid_color":"#2f3136", "cover_rounding":"8", "cover_shadow_enable":False, "border_enable":False, "text_color":"#FFFFFF", "bar_color": "#5865F2", "bar_bg_color": "#4e545c", "use_dominant_color":False, "font_choice": 2, "narrow_horizontal": False, "artist_alpha": 5},
    "Discord Light": {"layout_style":0, "padding":"20", "bg_style":6, "bg_solid_color":"#f2f3f5", "cover_rounding":"8", "cover_shadow_enable":False, "border_enable":False, "text_color":"#2e3338", "bar_color": "#5865F2", "bar_bg_color": "#d5d7da", "use_dominant_color":False, "font_choice": 2, "narrow_horizontal": False, "artist_alpha": 5},
    "Spotify Rich": {"layout_style":2, "padding":"30", "bg_style":0, "blur_radius":"80", "wet_glass_blur_radius":"40", "background_dim":"150", "cover_rounding":"15", "cover_shadow_enable":True, "cover_shadow_blur": "40", "border_enable":False, "use_dominant_color":True, "text_color":"#FFFFFF", "font_choice":2, "bar_color": "#1DB954", "bar_adaptive_lighten": False},
    "Retro Gaming": {"layout_style":0, "padding":"20", "bg_style":4, "pixel_size": "24", "background_dim":"100", "cover_rounding":"5", "cover_shadow_enable":False, "border_enable":True, "border_width": "5", "border_adaptive_color":False, "border_color": "#EAE3D4", "use_dominant_color":False, "bar_color": "#D35400", "bar_bg_color": "#40EAE3D4", "text_color":"#EAE3D4", "font_choice":1},
    "Neon Dreams": {"layout_style":3, "padding":"25", "bg_style":7, "bg_gradient_start":"#000000", "bg_gradient_end":"#2a004f", "background_dim":"100", "cover_rounding":"10", "cover_shadow_enable":True, "cover_shadow_color": "#FF00FF80", "border_enable":True, "border_width": "4", "border_adaptive_color":False, "border_color": "#00FFFF", "use_dominant_color":False, "bar_color": "#FF00FF", "bar_bg_color":"#4000FFFF", "progress_bar_style": 5, "gradient_end_color": "#00FFFF", "text_color":"#FFFFFF", "font_choice": 4},
    "Minimalist": {"layout_style":0, "padding":"30", "bg_style":0, "blur_radius":"100", "wet_glass_blur_radius":"50", "background_dim":"50", "cover_rounding":"999", "cover_shadow_enable":False, "border_enable":False, "use_dominant_color":True, "bar_adaptive_lighten":True, "text_color":"#FFFFFF", "artist_alpha": 10},
    "Clean White": {"layout_style":4, "padding":"40", "bg_style":6, "bg_solid_color": "#FFFFFF", "background_dim":"0", "cover_rounding":"10", "cover_shadow_enable":True, "cover_shadow_color":"#40000000", "cover_shadow_blur":"30", "border_enable":False, "use_dominant_color":True, "bar_adaptive_lighten":False, "text_color":"#000000", "artist_alpha": 10},
    "Vintage Vinyl": {"layout_style":0, "padding":"25", "bg_style":6, "bg_solid_color": "#4a3b31", "cover_rounding":"5", "border_enable":True, "border_width":"15", "border_color":"#d3c0a3", "text_color":"#d3c0a3", "bar_color":"#d3c0a3", "bar_bg_color":"#6f5f4f", "font_choice":3, "use_dominant_color":False, "cover_shadow_enable":True, "cover_shadow_color":"#80000000"},
    "Cyberpunk Glitch": {"layout_style":1, "padding":"20", "bg_style":7, "bg_gradient_start":"#0d0221", "bg_gradient_end":"#000000", "cover_rounding":"0", "border_enable":True, "border_width":"2", "border_color":"#f0f", "text_color":"#0ff", "bar_color":"#f0f", "bar_bg_color":"#30FF00FF", "font_choice":1, "progress_bar_style":3, "cover_shadow_enable":True, "cover_shadow_color":"#80FF00FF", "use_dominant_color":False},
    "Polaroid Snap": {"layout_style":5, "padding":"20", "bg_style":0, "blur_radius":"20", "wet_glass_blur_radius":"15", "background_dim":"100", "cover_rounding":"5", "border_enable":False, "text_color":"#333333", "font_choice":5, "bar_color":"#555555", "use_dominant_color":False},
    "Apple Music Inspired": {"layout_style":4, "padding":"30", "bg_style":6, "bg_solid_color":"#FFFFFF", "cover_rounding":"10", "border_enable":False, "text_color":"#000000", "font_choice":2, "use_dominant_color":True, "bar_adaptive_lighten":False, "cover_shadow_enable":True, "cover_shadow_blur":"35", "cover_shadow_color":"#30000000", "artist_pos":1},
}

def get_tr():
    lang = LocaleController.getInstance().getCurrentLocale().getLanguage()
    md_sub = "Markdown: *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, ~–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~, ||—Å–ø–æ–π–ª–µ—Ä||, `–º–æ–Ω–æ`, __–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__, [—Å—Å—ã–ª–∫–∞](url)."
    ru = {
        "header_main": "nowMedia", "command": "–ö–æ–º–∞–Ω–¥–∞", "command_sub": "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏",
        "cat_layout": "–ú–∞–∫–µ—Ç –∏ —Ñ–æ–Ω", "cat_appearance": "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "cat_elements": "–≠–ª–µ–º–µ–Ω—Ç—ã", "cat_font": "–®—Ä–∏—Ñ—Ç –∏ —Ç–µ–∫—Å—Ç", "cat_caption": "–ü–æ–¥–ø–∏—Å—å", "cat_broadcast": "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è", "cat_history": "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤", "cat_additional": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ",
        "layout_style": "–°—Ç–∏–ª—å –º–∞–∫–µ—Ç–∞", "quality": "–ö–∞—á–µ—Å—Ç–≤–æ", "quality_items": ["–û–±—ã—á–Ω–æ–µ", "–í—ã—Å–æ–∫–æ–µ"], "padding": "–û—Ç—Å—Ç—É–ø—ã (px)", "theme_preset": "–ü—Ä–µ—Å–µ—Ç —Å—Ç–∏–ª—è",
        "theme_preset_items": ["–°–≤–æ–π", "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "Discord Dark", "Discord Light", "Spotify Rich", "Retro Gaming", "Neon Dreams", "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", "Clean White", "Vintage Vinyl", "Cyberpunk Glitch", "Polaroid Snap", "Apple Music Inspired", "üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π"],
        "bg_header": "–§–æ–Ω", "bg_style": "–°—Ç–∏–ª—å —Ñ–æ–Ω–∞", "blur_radius": "–†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞", "wet_glass_blur": "–†–∞–∑–º—ã—Ç–∏–µ –¥–ª—è '–ú–æ–∫—Ä–æ–≥–æ —Å—Ç–µ–∫–ª–∞'", "use_mega_overlay": "–£–∑–æ—Ä –Ω–∞ —Ñ–æ–Ω–µ", "background_dim": "–ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ (0-255)", "bg_crop_mode": "–†–µ–∂–∏–º –æ–±—Ä–µ–∑–∫–∏ —Ñ–æ–Ω–∞", "bg_solid_color": "–¶–≤–µ—Ç —Å–ø–ª–æ—à–Ω–æ–≥–æ —Ñ–æ–Ω–∞ (HEX)", "bg_gradient_start": "–ù–∞—á–∞–ª–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (HEX)", "bg_gradient_end": "–ö–æ–Ω–µ—Ü –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (HEX)",
        "glass_alpha": "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å—Ç–µ–∫–ª–∞ (0-255)", "flow_strength": "–°–∏–ª–∞ —Ç–µ—á–µ–Ω–∏—è (px)", "pixel_size": "–†–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è",
        "sketch_header": "–≠—Å–∫–∏–∑", "sketch_thickness": "–¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π —ç—Å–∫–∏–∑–∞", "sketch_brightness": "–Ø—Ä–∫–æ—Å—Ç—å –ª–∏–Ω–∏–π —ç—Å–∫–∏–∑–∞ (0-100)",
        "cover_header": "–û–±–ª–æ–∂–∫–∞", "cover_rounding": "–°–∫—Ä—É–≥–ª–µ–Ω–∏–µ", "cover_shadow_enable": "–¢–µ–Ω—å", "cover_shadow_blur": "–†–∞–∑–º—ã—Ç–∏–µ —Ç–µ–Ω–∏", "cover_shadow_color": "–¶–≤–µ—Ç —Ç–µ–Ω–∏ (HEX, #AARRGGBB)", "cover_shadow_offset_x": "–°–º–µ—â–µ–Ω–∏–µ —Ç–µ–Ω–∏ –ø–æ X", "cover_shadow_offset_y": "–°–º–µ—â–µ–Ω–∏–µ —Ç–µ–Ω–∏ –ø–æ Y",
        "border_header": "–û–±–≤–æ–¥–∫–∞", "border_enable": "–í–∫–ª—é—á–∏—Ç—å", "border_width": "–®–∏—Ä–∏–Ω–∞", "border_color": "–¶–≤–µ—Ç (HEX)", "border_adaptive_color": "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ü–≤–µ—Ç", "border_adaptive_lighten": "–û—Å–≤–µ—Ç–ª—è—Ç—å –∞–≤—Ç–æ-—Ü–≤–µ—Ç",
        "elements_header": "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", "show_app_icon": "–ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "show_progress_bar": "–ü–æ–ª–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", "show_timers": "–¢–∞–π–º–µ—Ä—ã",
        "app_icon_on_cover": "–ò–∫–æ–Ω–∫–∞ –Ω–∞ –æ–±–ª–æ–∂–∫–µ", "app_icon_corner": "–£–≥–æ–ª –¥–ª—è –∏–∫–æ–Ω–∫–∏", "app_icon_margin": "–û—Ç—Å—Ç—É–ø –∏–∫–æ–Ω–∫–∏ –æ—Ç –∫—Ä–∞—è",
        "progress_bar_header": "–ü–æ–ª–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", "progress_bar_style": "–°—Ç–∏–ª—å", "progress_bar_height": "–í—ã—Å–æ—Ç–∞", "use_dominant_color": "–ê–≤—Ç–æ-—Ü–≤–µ—Ç", "bar_color": "–¶–≤–µ—Ç (HEX)", "bar_adaptive_lighten": "–û—Å–≤–µ—Ç–ª—è—Ç—å –∞–≤—Ç–æ-—Ü–≤–µ—Ç", "bar_bg_color": "–¶–≤–µ—Ç —Ñ–æ–Ω–∞ (HEX)", "bar_bg_adaptive": "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω",
        "font_header": "–®—Ä–∏—Ñ—Ç", "artist_size": "–†–∞–∑–º–µ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "title_size": "–†–∞–∑–º–µ—Ä —Ç—Ä–µ–∫–∞", "timer_size": "–†–∞–∑–º–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤", "app_icon_size": "–†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏", "font_choice": "–í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞", "custom_font_file": "–°–≤–æ–π —à—Ä–∏—Ñ—Ç", "custom_font_file_sub": "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .ttf/.otf", "text_color": "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (HEX)", "text_alpha": "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞", "artist_pos": "–ü–æ–∑–∏—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "artist_alpha": "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "artist_title_spacing": "–û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏", "font_not_selected": "–ù–µ –≤—ã–±—Ä–∞–Ω", "current_font": "–¢–µ–∫—É—â–∏–π —à—Ä–∏—Ñ—Ç: {name}",
        "caption_header": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∏", "template": "–®–∞–±–ª–æ–Ω", "template_sub": f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{artist}}, {{title}}, {{appName}}. {md_sub}",
        "error_folder": "–ü–∞–ø–∫–∞ /Download/.nowMedia –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error_json": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞", "error_cover": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É",
        "error_generating": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "error_font_download": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞", "error_overlay_download": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–∑–æ—Ä–∞", "generating": "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞-–∫–∞—Ä—Ç–æ—á–∫–∏...",
        "generated": "–ú–µ–¥–∏–∞-–∫–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞!", "font_downloading": "–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞...", "overlay_downloading": "–£–∑–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞...", "snake_thickness": "–¢–æ–ª—â–∏–Ω–∞ –∑–º–µ–π–∫–∏",
        "gradient_end_color": "–ö–æ–Ω–µ—á–Ω—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞",
        "companion_needed_header": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-–∫–æ–º–ø–∞–Ω—å–æ–Ω", "companion_needed_text": "–î–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 'nowMedia' –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ.",
        "download_button": "–°–∫–∞—á–∞—Ç—å nowMedia", "check_button": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", "cancel_button": "–û—Ç–º–µ–Ω–∞", "plugin_by": "–ü–ª–∞–≥–∏–Ω –æ—Ç @RooniPlugin. –° –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º-–∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–º nowMedia. –°–æ–∑–¥–∞–Ω–æ –≤ @PluginIDE",
        "permission_needed_title": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", "permission_needed_text": "–î–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞, –ø–ª–∞–≥–∏–Ω—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–∫–Ω–µ.",
        "permission_error_title": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", "permission_no_activity": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.", "permission_intent_error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.",
        "broadcast_header": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏", "broadcast_enable": "–í–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é", "broadcast_target": "–ö—É–¥–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å", "broadcast_target_items": ["–ë–∏–æ (–û —Å–µ–±–µ)", "–ì–µ–æ (Premium)"],
        "broadcast_template": "–®–∞–±–ª–æ–Ω —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏", "broadcast_template_sub": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {artist}, {title}, {progress_percent}, {appName}. Markdown –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
        "broadcast_interval_active": "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–≥—Ä–∞–µ—Ç)", "broadcast_interval_idle": "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–∞—É–∑–∞)",
        "broadcast_interval_sub": "–§–æ—Ä–º–∞—Ç: 5s, 1m, 2h. –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥.",
        "broadcast_paused_text": "–¢–µ–∫—Å—Ç –ø—Ä–∏ –ø–∞—É–∑–µ", "broadcast_paused_text_sub": "–ß—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å, –∫–æ–≥–¥–∞ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç. –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å.",
        "narrow_horizontal": "–£–∑–∫–∏–π —Ä–µ–∂–∏–º (–≥–æ—Ä–∏–∑.)", "narrow_horizontal_sub": "–î–µ–ª–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä–µ–∑–∫–∏ –≤ —á–∞—Ç–µ.",
        "history_command": "–ö–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏", "history_command_sub": "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–∫–æ–≤.", "history_template": "–®–∞–±–ª–æ–Ω –ø—É–Ω–∫—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏", "history_template_sub": f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{i}}, {{artist}}, {{title}}, {{appName}}, {{time}}, {{date}}. {md_sub}", "history_empty": "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –ø—É—Å—Ç–∞.",
        "broadcast_filter_mode": "–†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞", "broadcast_filter_mode_items": ["–í—ã–∫–ª—é—á–µ–Ω", "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"], "broadcast_filter_header": "–§–∏–ª—å—Ç—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", "broadcast_filter_apps_header": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞", "broadcast_filter_apps_not_found": "–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (mediaApps.json) –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "random_preset_active": "–í–∫–ª—é—á–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º!", "random_preset_sub": "–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–π. –û—Ç–∫–ª—é—á–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        "layouts_list": ["–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (—Å–ª–µ–≤–∞)", "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (—Å–ø—Ä–∞–≤–∞)", "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π", "–û–±–ª–æ–∂–∫–∞ —Å–≤–µ—Ä—Ö—É", "Polaroid", "Overlay (—Å–Ω–∏–∑—É)", "Overlay (—Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É)", "–í —Ü–µ–Ω—Ç—Ä–µ"],
        "cat_filters": "–§–∏–ª—å—Ç—Ä—ã –û–±–ª–æ–∂–∫–∏", "use_bg_filters": "–ü—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –∫ —Ñ–æ–Ω—É",
        "filter_bw": "–ß/–ë", "filter_sepia": "–°–µ–ø–∏—è", "filter_invert": "–ò–Ω–≤–µ—Ä—Å–∏—è", "filter_solarize": "–°–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è", "filter_posterize": "–ü–æ—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", "filter_colorize": "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "filter_contrast": "–ö–æ–Ω—Ç—Ä–∞—Å—Ç", "filter_blur": "–ì–∞—É—Å—Å–æ–≤–æ —Ä–∞–∑–º—ã—Ç–∏–µ", "filter_emboss": "–¢–∏—Å–Ω–µ–Ω–∏–µ", "filter_contour": "–ö–æ–Ω—Ç—É—Ä",
        "filter_no_settings": "–≠—Ç–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –∏–º–µ—é—Ç –¥–æ–ø. –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        "filter_colorize_color": "–¶–≤–µ—Ç –¥–ª—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è (HEX)", "filter_solarize_threshold": "–ü–æ—Ä–æ–≥ —Å–æ–ª—è—Ä–∏–∑–∞—Ü–∏–∏ (0-255)", "filter_posterize_bits": "–ë–∏—Ç—ã –ø–æ—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (1-8)", "filter_contrast_factor": "–°–∏–ª–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (e.g. 1.5)", "filter_blur_radius": "–†–∞–¥–∏—É—Å —Ä–∞–∑–º—ã—Ç–∏—è (–ì–∞—É—Å—Å)",
        "drawer_item_title": "–ü—É–Ω–∫—Ç –≤ –º–µ–Ω—é", "drawer_item_sub": "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É 'nowMedia' –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é",
        "history_filter_header": "–§–∏–ª—å—Ç—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏", "history_filter_mode": "–†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏", "history_filter_mode_items": ["–í—ã–∫–ª—é—á–µ–Ω", "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"], "history_filter_apps_header": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞", "history_filter_apps_not_found": "–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (mediaApps.json) –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "history_title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏", "history_blockquote": "–ò—Å—Ç–æ—Ä–∏—è –≤ —Ü–∏—Ç–∞—Ç–µ", "history_blockquote_sub": "–û–±–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –≤ —Å–≤–µ—Ä–Ω—É—Ç—É—é —Ü–∏—Ç–∞—Ç—É",
        "history_full_list_link": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ nowMedia",
        "additional_header": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ü—Ä–æ—á–µ–µ", "cmd_play": "–ö–æ–º–∞–Ω–¥–∞ Play", "cmd_pause": "–ö–æ–º–∞–Ω–¥–∞ Pause", "cmd_next": "–ö–æ–º–∞–Ω–¥–∞ Next", "cmd_prev": "–ö–æ–º–∞–Ω–¥–∞ Previous", "cmd_toggle_sub": "–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã Play –∏ Pause –æ–¥–∏–Ω–∞–∫–æ–≤—ã, –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å.", "settings_command": "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", "settings_command_sub": "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        "history_message_limit": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
    }
    en = {
        "header_main": "nowMedia", "command": "Command", "command_sub": "Command to create the card",
        "cat_layout": "Layout & Background", "cat_appearance": "Appearance", "cat_elements": "Elements", "cat_font": "Font & Text", "cat_caption": "Caption", "cat_broadcast": "Broadcast", "cat_history": "Track History", "cat_additional": "Additional",
        "layout_style": "Layout style", "quality": "Quality", "quality_items": ["Normal", "High"], "padding": "Padding (px)", "theme_preset": "Style Preset",
        "theme_preset_items": ["Custom", "Default", "Discord Dark", "Discord Light", "Spotify Rich", "Retro Gaming", "Neon Dreams", "Minimalist", "Clean White", "Vintage Vinyl", "Cyberpunk Glitch", "Polaroid Snap", "Apple Music Inspired", "üé≤ Random"],
        "bg_header": "Background", "bg_style": "Background Style", "blur_radius": "Background blur", "wet_glass_blur": "Blur for 'Wet Glass'", "use_mega_overlay": "Pattern on background", "background_dim": "Background dim (0-255)", "bg_crop_mode": "Background crop mode", "bg_solid_color": "Solid background color (HEX)", "bg_gradient_start": "Gradient start (HEX)", "bg_gradient_end": "Gradient end (HEX)",
        "glass_alpha": "Glass transparency (0-255)", "flow_strength": "Flow strength (px)", "pixel_size": "Pixel size",
        "sketch_header": "Sketch", "sketch_thickness": "Sketch line thickness", "sketch_brightness": "Sketch line brightness (0-100)",
        "cover_header": "Cover", "cover_rounding": "Rounding", "cover_shadow_enable": "Shadow", "cover_shadow_blur": "Shadow blur", "cover_shadow_color": "Shadow color (HEX, #AARRGGBB)", "cover_shadow_offset_x": "Shadow offset X", "cover_shadow_offset_y": "Shadow offset Y",
        "border_header": "Border", "border_enable": "Enable", "border_width": "Width", "border_color": "Color (HEX)", "border_adaptive_color": "Adaptive color", "border_adaptive_lighten": "Lighten auto-color",
        "elements_header": "Elements visibility", "show_app_icon": "App icon", "show_progress_bar": "Progress bar", "show_timers": "Timers",
        "app_icon_on_cover": "Icon on cover", "app_icon_corner": "Corner for icon", "app_icon_margin": "Icon margin from edge",
        "progress_bar_header": "Progress Bar", "progress_bar_style": "Style", "progress_bar_height": "Height", "use_dominant_color": "Auto-color", "bar_color": "Color (HEX)", "bar_adaptive_lighten": "Lighten auto-color", "bar_bg_color": "Background color (HEX)", "bar_bg_adaptive": "Adaptive background",
        "font_header": "Font", "artist_size": "Artist size", "title_size": "Track size", "timer_size": "Timers size", "app_icon_size": "Icon size", "font_choice": "Font choice", "custom_font_file": "Custom Font", "custom_font_file_sub": "Select a .ttf/.otf file", "text_color": "Text color (HEX)", "text_alpha": "Text transparency", "artist_pos": "Artist position", "artist_alpha": "Artist transparency", "artist_title_spacing": "Spacing between texts", "font_not_selected": "Not selected", "current_font": "Current font: {name}",
        "caption_header": "Caption settings", "template": "Template", "template_sub": f"Variables: {{artist}}, {{title}}, {{appName}}. {md_sub}",
        "error_folder": "/Download/.nowMedia folder not found", "error_json": "Failed to load track metadata", "error_cover": "Failed to load cover image",
        "error_generating": "Error generating image", "error_font_download": "Error downloading font", "error_overlay_download": "Error downloading overlay", "generating": "Generating media card...",
        "generated": "Media card is ready!", "font_downloading": "Font not found. Downloading...", "overlay_downloading": "Overlay not found. Downloading...", "snake_thickness": "Snake thickness",
        "gradient_end_color": "Gradient end color",
        "companion_needed_header": "Companion App Required", "companion_needed_text": "This plugin requires the 'nowMedia' app to be installed to get data about the current track.",
        "download_button": "Download nowMedia", "check_button": "Check", "cancel_button": "Cancel", "plugin_by": "Plugin by @RooniPlugin. With nowMedia companion app. Created in @PluginIDE",
        "permission_needed_title": "Permission Required", "permission_needed_text": "To read data from the companion app, the plugin needs access to all files. Please grant this permission in the next window.",
        "permission_error_title": "Permission Request Error", "permission_no_activity": "Could not request permission: no active window.", "permission_intent_error": "Error opening permission settings.",
        "broadcast_header": "Broadcast Settings", "broadcast_enable": "Enable broadcast", "broadcast_target": "Broadcast to", "broadcast_target_items": ["Bio (About)", "Geo (Premium)"],
        "broadcast_template": "Broadcast template", "broadcast_template_sub": "Variables: {artist}, {title}, {progress_percent}, {appName}. Markdown is not supported.",
        "broadcast_interval_active": "Check interval (playing)", "broadcast_interval_idle": "Check interval (paused)",
        "broadcast_interval_sub": "Format: 5s, 1m, 2h. Minimum 5 seconds.",
        "broadcast_paused_text": "Text on pause", "broadcast_paused_sub": "What to display when music is not playing. Leave empty to change nothing.",
        "narrow_horizontal": "Narrow mode (horiz.)", "narrow_horizontal_sub": "Makes the image narrower to avoid cropping in chat.",
        "history_command": "History command", "history_command_sub": "Command to view track history.", "history_template": "History item template", "history_template_sub": f"Variables: {{i}}, {{artist}}, {{title}}, {{appName}}, {{time}}, {{date}}. {md_sub}", "history_empty": "Listening history is empty.",
        "broadcast_filter_mode": "Filter mode", "broadcast_filter_mode_items": ["Off", "Whitelist", "Blacklist"], "broadcast_filter_header": "Application Filter", "broadcast_filter_apps_header": "Select applications for the list", "broadcast_filter_apps_not_found": "File with applications list (mediaApps.json) not found.",
        "random_preset_active": "Random mode is active!", "random_preset_sub": "Each card will be unique. Disable to restore your settings.",
        "layouts_list": ["Horizontal (L)", "Horizontal (R)", "Vertical", "Cover Top", "Polaroid", "Overlay (Bottom)", "Overlay (Split)", "Center Focus"],
        "cat_filters": "Cover Filters", "use_bg_filters": "Apply filter to background",
        "filter_bw": "B&W", "filter_sepia": "Sepia", "filter_invert": "Invert", "filter_solarize": "Solarize", "filter_posterize": "Posterize", "filter_colorize": "Colorize", "filter_contrast": "Contrast", "filter_blur": "Gaussian Blur", "filter_emboss": "Emboss", "filter_contour": "Contour",
        "filter_no_settings": "These filters have no additional settings.",
        "filter_colorize_color": "Color for colorize (HEX)", "filter_solarize_threshold": "Solarize threshold (0-255)", "filter_posterize_bits": "Posterize bits (1-8)", "filter_contrast_factor": "Contrast factor (e.g. 1.5)", "filter_blur_radius": "Gaussian blur radius",
        "drawer_item_title": "Menu Item", "drawer_item_sub": "Display 'nowMedia' button in the side menu",
        "history_filter_header": "History App Filter", "history_filter_mode": "History filter mode", "history_filter_mode_items": ["Off", "Whitelist", "Blacklist"], "history_filter_apps_header": "Select applications for the list", "history_filter_apps_not_found": "File with applications list (mediaApps.json) not found.",
        "history_title": "History Title", "history_blockquote": "History in blockquote", "history_blockquote_sub": "Wrap the track list in a collapsed blockquote",
        "history_full_list_link": "You can view the full list in the nowMedia app",
        "additional_header": "Playback & Misc", "cmd_play": "Play Command", "cmd_pause": "Pause Command", "cmd_next": "Next Command", "cmd_prev": "Previous Command", "cmd_toggle_sub": "If Play and Pause commands are the same, it will work as a toggle.", "settings_command": "Settings Command", "settings_command_sub": "Command to open these settings.",
        "history_message_limit": "Number of tracks in message"
    }
    return ru if lang.startswith('ru') else en

def get_font_real_name(font_path: str) -> str:
    if not font_path or not os.path.exists(font_path): return ""
    try:
        font = ImageFont.truetype(font_path, size=10)
        name, style = font.getname()
        if style.lower() in ("regular", "normal", "book"): return name
        return f"{name} {style}"
    except Exception: return os.path.basename(font_path)

def parse_interval(interval_str: str, default: int, min_val: int = 5) -> int:
    try:
        val_str = "".join(filter(str.isdigit, interval_str));
        if not val_str: return default
        value = int(val_str)
        if 's' in interval_str.lower(): return max(min_val, value)
        if 'm' in interval_str.lower(): return max(min_val, value * 60)
        if 'h' in interval_str.lower(): return max(min_val, value * 3600)
        return max(min_val, value)
    except (ValueError, TypeError): return default

def clean_and_normalize_text(text: str, font: Optional[ImageFont.FreeTypeFont] = None) -> str:
    if not isinstance(text, str): return ""
    text = re.sub(r'[\u2460-\u24FF\u24B6-\u24E9\U0001F100-\U0001F1FF]', '', text)
    for special, normal in NORMALIZATION_MAP.items(): text = text.replace(special, normal)
    if font:
        cleaned = "".join(char for char in text if char.isspace() or (font.getmask(char).getbbox() and font.getlength(char) > 0))
        return cleaned.strip()
    return text.strip()

def wrap_and_clip_text(draw: ImageDraw.ImageDraw, text: str, font: ImageFont.FreeTypeFont, max_width: int, max_lines: int) -> str:
    if not text or max_width <= 0: return ""
    lines = []; current_line = ""; words = text.split()
    if not words: return ""
    for word in words:
        if current_line and draw.textlength(f"{current_line} {word}", font=font) > max_width: lines.append(current_line); current_line = ""
        if draw.textlength(word, font=font) > max_width:
            if current_line: lines.append(current_line); current_line = ""
            temp_word = "".join(char for char in word if draw.textlength(temp_word + char + "-", font=font) <= max_width); lines.append(temp_word + "-")
            current_line = word[len(temp_word):]
        else: current_line += (" " if current_line else "") + word
    if current_line: lines.append(current_line)
    if len(lines) > max_lines:
        lines = lines[:max_lines]; last_line = lines[-1]
        while draw.textlength(last_line + "‚Ä¶", font=font) > max_width and len(last_line) > 1: last_line = last_line[:-1]
        lines[-1] = last_line.strip() + "‚Ä¶"
    return "\n".join(lines)

def format_time_ms(milliseconds: int) -> str:
    if not isinstance(milliseconds, (int, float)) or milliseconds < 0: return "00:00"
    seconds, _ = divmod(milliseconds, 1000)
    minutes, seconds = divmod(seconds, 60)
    return f"{int(minutes):02d}:{int(seconds):02d}"

def format_track_duration(ms: int) -> str:
    if not isinstance(ms, (int, float)) or ms <= 0:
        return "??:??"
    total_seconds = int(ms / 1000)
    hours, remainder = divmod(total_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    if hours > 0:
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    return f"{minutes:02d}:{seconds:02d}"

def truncate_text(text: str, max_length: int) -> str:
    return text[:max_length-1] + "‚Ä¶" if len(text) > max_length and max_length >= 2 else text

class NowPlayingImagePlugin(BasePlugin):
    class ActivityResultHook(MethodHook):
        def __init__(self, plugin_instance):
            self.plugin = plugin_instance
            
        def before_hooked_method(self, param):
            request_code = param.args[0]
            if request_code == FILE_PICK_REQUEST_CODE:
                param.setResult(None) 
                log(f"[{self.plugin.id}] –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞!")
                result_code = param.args[1]
                data = param.args[2]
                if result_code == Activity.RESULT_OK and data is not None and data.getData() is not None:
                    run_on_queue(lambda: self.plugin._handle_file_uri(data.getData().toString()))
                if self.plugin._activity_hook:
                    self.plugin._activity_hook.unhook()
                    self.plugin._activity_hook = None
                    log(f"[{self.plugin.id}] –•—É–∫ onActivityResult —É–¥–∞–ª–µ–Ω.")
    
    def __init__(self):
        super().__init__()
        self._temp_dir_path: Optional[str] = None
        self._overlay_path: Optional[str] = None
        self.tr = get_tr()
        self.broadcast_running = False
        self.broadcast_thread = None
        self.last_broadcast_text = ""
        self.pause_timestamp = 0
        self.is_applying_preset = False
        self._activity_hook = None
        self._drawer_menu_item = None

    def on_plugin_load(self):
        self.add_on_send_message_hook()
        self._prepare_dir_and_paths()
        self._update_drawer_menu_item()
        self.broadcast_running = True
        if self.broadcast_thread is None or not self.broadcast_thread.is_alive():
            self.broadcast_thread = threading.Thread(target=self.broadcast_worker, daemon=True)
            self.broadcast_thread.start()

    def on_plugin_unload(self):
        if self._activity_hook: self.unhook_all(); self._activity_hook = None
        self.broadcast_running = False

    def _open_plugin_settings(self, context=None):
        def action():
            try:
                fragment = get_last_fragment()
                if fragment and fragment.getParentActivity():
                    java_plugin = PluginsController.getInstance().plugins.get(self.id)
                    if java_plugin:
                        fragment.presentFragment(PluginSettingsActivity(java_plugin))
            except Exception as e:
                log(f"[{self.id}] Error opening plugin settings: {e}")
        run_on_ui_thread(action)

    def _update_drawer_menu_item(self):
        try:
            should_show = self.get_setting("show_in_drawer", False)
            item_exists = self._drawer_menu_item is not None

            if should_show and not item_exists:
                item = MenuItemData(
                    menu_type=MenuItemType.DRAWER_MENU,
                    text="nowMedia",
                    icon="msg_settings_solar",
                    on_click=self._open_plugin_settings
                )
                self._drawer_menu_item = self.add_menu_item(item)
            elif not should_show and item_exists:
                self.remove_menu_item(self._drawer_menu_item)
                self._drawer_menu_item = None
        except Exception as e:
            log(f"[{self.id}] Error updating drawer menu item: {e}")

    def _get_media_data(self) -> Tuple[Optional[dict], Optional[str]]:
        pi_dir_path = "/storage/emulated/0/Download/.nowMedia"
        json_path = os.path.join(pi_dir_path, "nowMedia.json")
        if not os.path.exists(json_path):
            return None, "json_not_found"
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                return json.load(f), None
        except Exception as e:
            return None, str(e)

    def _get_available_apps(self) -> List[dict]:
        pi_dir_path = "/storage/emulated/0/Download/.nowMedia"
        json_path = os.path.join(pi_dir_path, "mediaApps.json")
        if not os.path.exists(json_path): return []
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                return sorted(json.load(f), key=lambda x: x.get('a', ''))
        except Exception as e:
            log(f"[{self.id}] Error reading mediaApps.json: {e}"); return []

    def _read_history(self) -> List[dict]:
        pi_dir_path = "/storage/emulated/0/Download/.nowMedia"
        history_path = os.path.join(pi_dir_path, "history.json")
        if not os.path.exists(history_path): return []
        try:
            with open(history_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception: return []
    
    def _write_history(self, history_data: List[dict]):
        pi_dir_path = "/storage/emulated/0/Download/.nowMedia"
        history_path = os.path.join(pi_dir_path, "history.json")
        try:
            with open(history_path, 'w', encoding='utf-8') as f:
                json.dump(history_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            log(f"[{self.id}] Error writing history.json: {e}")

    def _update_history(self, data: dict):
        history = self._read_history()
        new_entry = {
            "a": data.get("b", ""), 
            "b": data.get("a", ""), 
            "c": int(time.time() * 1000), 
            "d": data.get("f", ""),
            "e": data.get("h", 0) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 'h' –∫–∞–∫ 'e'
        }
        if history and history[0].get('a') == new_entry['a'] and history[0].get('b') == new_entry['b']:
            return
        history.insert(0, new_entry)
        self._write_history(history[:100])

    def _launch_file_picker(self):
        try:
            fragment = get_last_fragment()
            activity = fragment.getParentActivity() if fragment else None
            if not activity:
                BulletinHelper.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω."); return

            if self._activity_hook: self._activity_hook.unhook()
            
            method = activity.getClass().getDeclaredMethod("onActivityResult", find_class("java.lang.Integer").TYPE, find_class("java.lang.Integer").TYPE, Intent)
            self._activity_hook = self.hook_method(method, self.ActivityResultHook(self))
            log(f"[{self.id}] –•—É–∫ –Ω–∞ onActivityResult —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")

            intent = Intent(Intent.ACTION_GET_CONTENT)
            intent.setType("*/*"); intent.addCategory(Intent.CATEGORY_OPENABLE)
            activity.startActivityForResult(Intent.createChooser(intent, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞"), FILE_PICK_REQUEST_CODE)
        except Exception as e:
            log(f"[{self.id}] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞: {e}\n{traceback.format_exc()}"); BulletinHelper.show_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞.")

    def _handle_file_uri(self, uri_string: str):
        input_stream = None; output_stream = None
        try:
            uri = Uri.parse(uri_string); content_resolver = ApplicationLoader.applicationContext.getContentResolver()
            file_name = f"font_{uuid.uuid4()}"; cursor = content_resolver.query(uri, None, None, None, None)
            if cursor is not None:
                try:
                    if cursor.moveToFirst() and (idx := cursor.getColumnIndex("_display_name")) != -1: file_name = cursor.getString(idx)
                finally: cursor.close()
            
            if not (file_name.lower().endswith((".ttf", ".otf"))): run_on_ui_thread(lambda: BulletinHelper.show_error("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç–æ–º.")); return

            input_stream = content_resolver.openInputStream(uri)
            if not input_stream: run_on_ui_thread(lambda: BulletinHelper.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª.")); return

            fonts_dir = File(self._temp_dir_path, "fonts");
            if not fonts_dir.exists(): fonts_dir.mkdirs()
            target_font_file = File(fonts_dir, f"custom_font_{file_name}")

            output_stream = FileOutputStream(target_font_file); buffer = bytearray(4096)
            bytes_read = input_stream.read(buffer)
            while bytes_read != -1: output_stream.write(buffer, 0, bytes_read); bytes_read = input_stream.read(buffer)
            
            self.set_setting("custom_font_path", target_font_file.getAbsolutePath())
            run_on_ui_thread(lambda: BulletinHelper.show_success(f"–®—Ä–∏—Ñ—Ç '{file_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"))
            self.refresh_settings()

        except Exception as e:
            log(f"[{self.id}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URI —Ñ–∞–π–ª–∞: {e}\n{traceback.format_exc()}"); run_on_ui_thread(lambda: BulletinHelper.show_error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞."))
        finally:
            if input_stream:
                try: input_stream.close()
                except Exception: pass
            if output_stream:
                try: output_stream.close()
                except Exception: pass
            
    def _update_broadcast(self):
        data, error = self._get_media_data()
        if error and error != "json_not_found": log(f"[{self.id}] Broadcast data error: {error}"); return

        is_playing = str(data.get("g", "false")).lower() == "true" if data else False
        
        filter_mode = self.get_setting("broadcast_filter_mode", 0)
        if is_playing and filter_mode > 0:
            current_app_name = data.get("f", "").strip().lower(); available_apps = self._get_available_apps()
            selected_apps = {app.get('a').lower() for app in available_apps if self.get_setting(f"broadcast_app_{app.get('b')}", False)}
            if filter_mode == 1 and current_app_name not in selected_apps: return
            elif filter_mode == 2 and current_app_name in selected_apps: return

        final_text = ""
        if is_playing:
            template = self.get_setting("broadcast_template", "{artist} - {title}"); target = self.get_setting("broadcast_target", 0)
            is_premium = get_user_config().isPremium(); max_len = (140 if is_premium else 70) if target == 0 else 96
            pos_ms, dur_ms = int(data.get("i", 0)), int(data.get("h", 1)) or 1
            progress = min(pos_ms * 100 / dur_ms, 100) if dur_ms > 0 else 0
            format_args = { "artist": clean_and_normalize_text(data.get("b", "N/A")), "title": clean_and_normalize_text(data.get("a", "N/A")), "appName": clean_and_normalize_text(data.get("f", "N/A")), "progress_percent": f"{progress:.0f}%" }
            current_len = len(template.format(**{k: '' for k in format_args})); remaining_len = max(0, max_len - current_len)
            num_vars = len(re.findall(r'\{\w+\}', template)); len_per_var = remaining_len // num_vars if num_vars > 0 else 10
            for var_name in format_args: format_args[var_name] = truncate_text(format_args[var_name], len_per_var)
            final_text = template.format(**format_args)
        else: final_text = self.get_setting("broadcast_paused_text", "")

        if final_text == self.last_broadcast_text: return
        self.last_broadcast_text = final_text; target = self.get_setting("broadcast_target", 0)
        if target == 0:
            max_len_bio = 140 if get_user_config().isPremium() else 70
            req = TL_account.updateProfile(); req.flags = (1 << 2); req.about = final_text[:max_len_bio]
            send_request(req, lambda resp, err: log(f"[{self.id}] Bio update: {'OK' if not err else err.text}"))
        elif target == 1 and get_user_config().isPremium():
            req = TL_account.updateBusinessLocation(); req.flags = (1 << 0); req.address = final_text[:96]
            send_request(req, lambda resp, err: log(f"[{self.id}] Geo update: {'OK' if not err else err.text}"))

    def broadcast_worker(self):
        while self.broadcast_running:
            sleep_duration = 30
            try:
                if not self.get_setting("broadcast_enable", False): self.pause_timestamp = 0; time.sleep(30); continue
                data, _ = self._get_media_data(); is_playing = str(data.get("g", "false")).lower() == "true" if data else False
                if is_playing or (self.last_broadcast_text != self.get_setting("broadcast_paused_text", "")): self._update_broadcast()
                if is_playing: self.pause_timestamp = 0; sleep_duration = parse_interval(self.get_setting("broadcast_interval_active", "5s"), 5, 5)
                else:
                    if self.pause_timestamp == 0: self.pause_timestamp = time.time()
                    time_since_pause = time.time() - self.pause_timestamp
                    if time_since_pause <= 60: sleep_duration = 5
                    elif time_since_pause <= 300: sleep_duration = 30
                    else: sleep_duration = 60
                time.sleep(sleep_duration)
            except Exception as e: log(f"[{self.id}] Broadcast worker error: {e}"); time.sleep(60)

    def _is_companion_installed(self) -> bool:
        try: pm = ApplicationLoader.applicationContext.getPackageManager(); pm.getPackageInfo(COMPANION_APP_PKG, 0); return True
        except Exception: return False

    def _open_download_page(self, view=None):
        try:
            fragment = get_last_fragment(); activity = fragment.getParentActivity() if fragment else None
            if activity: activity.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(DOWNLOAD_URL)))
        except Exception as e: log(f"[{self.id}] Error opening URL: {e}")

    def _show_companion_needed_dialog(self):
        def action():
            fragment = get_last_fragment();
            if not (fragment and fragment.getParentActivity()): log(f"[{self.id}] Cannot show dialog, no fragment/activity"); return
            s = self.tr; builder = AlertDialogBuilder(fragment.getParentActivity())
            builder.set_title(s["companion_needed_header"]); builder.set_message(s["companion_needed_text"])
            builder.set_positive_button(s["download_button"], lambda d, w: self._open_download_page())
            builder.set_negative_button(s["cancel_button"], lambda d, w: d.dismiss()); builder.show()
        run_on_ui_thread(action)

    def _check_and_request_permissions(self) -> bool:
        try:
            Build = find_class("android.os.Build")
            if Build.VERSION.SDK_INT >= 30:
                Environment = find_class("android.os.Environment")
                if not Environment.isExternalStorageManager():
                    s = self.tr; fragment = get_last_fragment(); activity = fragment.getParentActivity() if fragment else None
                    if not activity: run_on_ui_thread(lambda: BulletinHelper.show_error(s["permission_no_activity"])); return False
                    def show_permission_dialog(act):
                        builder = AlertDialogBuilder(act); builder.set_title(s["permission_needed_title"]); builder.set_message(s["permission_needed_text"])
                        def on_ok_click(d, w):
                            try:
                                Settings = find_class("android.provider.Settings");
                                intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION, Uri.parse("package:" + act.getPackageName()))
                                act.startActivity(intent); d.dismiss()
                            except Exception as e_intent: log(f"[{self.id}] Error starting permission intent: {e_intent}"); run_on_ui_thread(lambda: BulletinHelper.show_error(s["permission_intent_error"]))
                        builder.set_positive_button("OK", on_ok_click); builder.set_negative_button(s["cancel_button"], lambda d, w: d.dismiss()); builder.show()
                    run_on_ui_thread(lambda: show_permission_dialog(activity)); return False
            return True
        except Exception as e: log(f"[{self.id}] Error in permission check: {e}"); run_on_ui_thread(lambda: BulletinHelper.show_error(f"{self.tr['permission_error_title']}: {e}")); return False

    def _prepare_dir_and_paths(self):
        try:
            base_dir = ApplicationLoader.getFilesDirFixed(); pi_temp_dir = File(base_dir, TEMP_DIR)
            if not pi_temp_dir.exists(): pi_temp_dir.mkdirs()
            self._temp_dir_path = pi_temp_dir.getAbsolutePath(); fonts_dir = File(pi_temp_dir, "fonts");
            if not fonts_dir.exists(): fonts_dir.mkdirs()
            self._overlay_path = os.path.join(self._temp_dir_path, MEGA_OVERLAY_NAME)
        except Exception as e: log(f"[{self.id}] Error preparing directories: {e}")

    def _fetch_resource(self, url: str, path: str, error_key: str) -> bool:
        if not path: self._prepare_dir_and_paths();
        if not path: return False
        try:
            response = requests.get(url, timeout=20); response.raise_for_status()
            with open(path, 'wb') as f: f.write(response.content)
            return True
        except Exception as e: log(f"[{self.id}] Failed to download resource {url}: {e}"); run_on_ui_thread(lambda err=str(e): BulletinHelper.show_error(f"{self.tr[error_key]}: {err}")); return False

    def _get_font_path(self) -> Optional[str]:
        font_choice_idx = self.get_setting("font_choice", 0)
        font_names = list(PREDEFINED_FONTS.keys())
        if font_choice_idx >= len(font_names): # Custom font
            custom_path = self.get_setting("custom_font_path", "")
            if custom_path and os.path.exists(custom_path): return custom_path
            run_on_ui_thread(lambda: BulletinHelper.show_error("–§–∞–π–ª —Å–≤–æ–µ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")); return None
        selected_font_name = font_names[font_choice_idx]
        font_filename = os.path.basename(PREDEFINED_FONTS[selected_font_name])
        font_path = os.path.join(self._temp_dir_path, "fonts", font_filename)
        if os.path.exists(font_path): return font_path
        run_on_ui_thread(lambda: BulletinHelper.show_info(f"{self.tr['font_downloading']} ({selected_font_name})"))
        if self._fetch_resource(PREDEFINED_FONTS[selected_font_name], font_path, "error_font_download"): return font_path
        return None

    def _ensure_overlay_exists(self) -> bool:
        if self._overlay_path and os.path.exists(self._overlay_path): return True
        run_on_ui_thread(lambda: BulletinHelper.show_info(self.tr["overlay_downloading"]))
        return self._fetch_resource(MEGA_OVERLAY_URL, self._overlay_path, "error_overlay_download")

    def _get_dominant_color(self, image: Image.Image) -> Optional[Tuple[int, int, int]]:
        try: return image.convert("RGB").resize((1, 1), Image.Resampling.LANCZOS).getpixel((0, 0))
        except Exception as e: log(f"[{self.id}] Could not get dominant color: {e}"); return None

    def _lighten_color(self, color_rgb: tuple, factor=0.4) -> tuple: return tuple(min(255, c + int((255 - c) * factor)) for c in color_rgb)
    def _darken_color(self, color_rgb: tuple, factor=0.4) -> tuple: return tuple(max(0, c - int(c * factor)) for c in color_rgb)

    def _apply_image_filters(self, image: Image.Image) -> Image.Image:
        img_copy = image.copy()
        if img_copy.mode != 'RGB':
            img_copy = img_copy.convert("RGB")
        
        try:
            if self.get_setting("filter_contrast_enabled", False):
                img_copy = ImageEnhance.Contrast(img_copy).enhance(float(self.get_setting("filter_contrast_factor", "1.5")))
            if self.get_setting("filter_bw_enabled", False):
                img_copy = ImageOps.grayscale(img_copy)
                if img_copy.mode != 'RGB': img_copy = img_copy.convert("RGB")
            if self.get_setting("filter_sepia_enabled", False):
                img_copy = ImageOps.colorize(ImageOps.grayscale(img_copy), black="#704214", white="#C2B280")
            if self.get_setting("filter_invert_enabled", False):
                img_copy = ImageOps.invert(img_copy)
            if self.get_setting("filter_solarize_enabled", False):
                img_copy = ImageOps.solarize(img_copy, threshold=int(self.get_setting("filter_solarize_threshold", "128")))
            if self.get_setting("filter_posterize_enabled", False):
                img_copy = ImageOps.posterize(img_copy, bits=max(1, min(8, int(self.get_setting("filter_posterize_bits", "4")))))
            if self.get_setting("filter_colorize_enabled", False):
                color = self.get_setting("filter_colorize_color", "#FFD700")
                img_copy = ImageOps.colorize(ImageOps.grayscale(img_copy), black=(0,0,0), white=ImageColor.getcolor(color, "RGB"))
            if self.get_setting("filter_blur_enabled", False):
                img_copy = img_copy.filter(ImageFilter.GaussianBlur(int(self.get_setting("filter_blur_radius", "5"))))
            if self.get_setting("filter_emboss_enabled", False):
                img_copy = img_copy.filter(ImageFilter.EMBOSS)
            if self.get_setting("filter_contour_enabled", False):
                img_copy = img_copy.filter(ImageFilter.CONTOUR)

            return img_copy
        except (ValueError, TypeError) as e:
            log(f"[{self.id}] Invalid filter parameter: {e}")
            return image
        except Exception as e:
            log(f"[{self.id}] Error applying filters: {e}")
            return image

    def _on_setting_change(self, key, value):
        if not self.is_applying_preset:
            self.set_setting(key, value)
            if self.get_setting("theme_preset", 0) != 0:
                self.is_applying_preset = True; self.set_setting("theme_preset", 0); self.is_applying_preset = False

    def _apply_preset(self, preset_index: int):
        self.is_applying_preset = True
        try:
            s = self.tr; preset_name = s["theme_preset_items"][preset_index]
            is_currently_custom = self.get_setting("theme_preset", 0) == 0
            if is_currently_custom and preset_index != 0:
                current_settings = {key: self.get_setting(key) for p_data in PRESETS.values() for key in p_data}
                self.set_setting("_custom_preset_backup", json.dumps(current_settings))
            preset_key_map = ["Custom", "Default", "Discord Dark", "Discord Light", "Spotify Rich", "Retro Gaming", "Neon Dreams", "Minimalist", "Clean White", "Vintage Vinyl", "Cyberpunk Glitch", "Polaroid Snap", "Apple Music Inspired", "Random"]
            if preset_index == 0:
                backup_json = self.get_setting("_custom_preset_backup", "{}")
                try:
                    for key, value in json.loads(backup_json).items(): self.set_setting(key, value)
                    run_on_ui_thread(lambda: BulletinHelper.show_success("–ó–∞–≥—Ä—É–∂–µ–Ω —Å–≤–æ–π —Å—Ç–∏–ª—å"))
                except Exception as e: log(f"[{self.id}] Error loading custom preset backup: {e}"); run_on_ui_thread(lambda: BulletinHelper.show_error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–µ–≥–æ —Å—Ç–∏–ª—è"))
            elif preset_index < len(preset_key_map) - 1:
                if preset_data := PRESETS.get(preset_key_map[preset_index]):
                    for key, value in preset_data.items(): self.set_setting(key, value)
                    run_on_ui_thread(lambda: BulletinHelper.show_success(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç: {preset_name}"))
        finally: self.is_applying_preset = False; self.refresh_settings()

    def create_settings(self) -> List[Any]:
        s = self.tr
        if not self._is_companion_installed():
            return [Header(text=s["companion_needed_header"]), Divider(text=s["companion_needed_text"]), Divider(), Text(text=s["download_button"], icon="msg_download", accent=True, on_click=self._open_download_page), Text(text=s["check_button"], icon="msg_retry", on_click=self.refresh_settings), Divider(text=s["plugin_by"])]
        
        settings_list = [
            Header(text=s["header_main"]),
            Input(key="command", text=s["command"], subtext=s["command_sub"], default=".nm", icon="input_bot1", on_change=lambda v: self._on_setting_change("command", v)),
            Selector(key="theme_preset", text=s["theme_preset"], items=s["theme_preset_items"], default=0, icon="msg_palette", on_change=self._apply_preset),
            Divider()
        ]
        if self.get_setting("theme_preset", 0) == len(s["theme_preset_items"]) - 1:
            return settings_list + [Text(text=s["random_preset_active"], icon="msg_gif", accent=True), Divider(text=s["random_preset_sub"]), Divider(text=s["plugin_by"])]

        return settings_list + [Text(text=s["cat_layout"], icon="msg_palette", create_sub_fragment=self.create_layout_settings), Text(text=s["cat_appearance"], icon="msg_theme", create_sub_fragment=self.create_appearance_settings), Text(text=s["cat_filters"], icon="menu_edit_appearance_solar", create_sub_fragment=self.create_filter_settings), Text(text=s["cat_elements"], icon="msg_settings_ny", create_sub_fragment=self.create_elements_settings), Text(text=s["cat_font"], icon="msg_photo_text2", create_sub_fragment=self.create_font_settings), Text(text=s["cat_caption"], icon="msg_edit", create_sub_fragment=self.create_caption_settings), Text(text=s["cat_broadcast"], icon="msg_screencast_solar", create_sub_fragment=self.create_broadcast_settings), Text(text=s["cat_history"], icon="msg_recent_solar", create_sub_fragment=self.create_history_settings), Text(text=s["cat_additional"], icon="msg_settings", create_sub_fragment=self.create_additional_settings), Divider(text=s["plugin_by"])]

    def create_filter_settings(self) -> List[Any]:
        s = self.tr
        return [
            Header(text=s["cat_filters"]),
            Switch(key="use_bg_filters", text=s["use_bg_filters"], default=False, icon="msg_background", on_change=lambda v: self._on_setting_change("use_bg_filters", v)),
            Divider(),
            Header(text=s["filter_bw"]),
            Switch(key="filter_bw_enabled", text=s["filter_bw"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_bw_enabled", v)),
            Divider(),
            Header(text=s["filter_sepia"]),
            Switch(key="filter_sepia_enabled", text=s["filter_sepia"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_sepia_enabled", v)),
            Divider(),
            Header(text=s["filter_invert"]),
            Switch(key="filter_invert_enabled", text=s["filter_invert"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_invert_enabled", v)),
            Divider(),
            Header(text=s["filter_solarize"]),
            Switch(key="filter_solarize_enabled", text=s["filter_solarize"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_solarize_enabled", v)),
            Input(key="filter_solarize_threshold", text=s["filter_solarize_threshold"], default="128", icon="msg_settings_ny", on_change=lambda v: self._on_setting_change("filter_solarize_threshold", v)),
            Divider(),
            Header(text=s["filter_posterize"]),
            Switch(key="filter_posterize_enabled", text=s["filter_posterize"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_posterize_enabled", v)),
            Input(key="filter_posterize_bits", text=s["filter_posterize_bits"], default="4", icon="msg_settings_ny", on_change=lambda v: self._on_setting_change("filter_posterize_bits", v)),
            Divider(),
            Header(text=s["filter_colorize"]),
            Switch(key="filter_colorize_enabled", text=s["filter_colorize"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_colorize_enabled", v)),
            Input(key="filter_colorize_color", text=s["filter_colorize_color"], default="#FFD700", icon="msg_colors", on_change=lambda v: self._on_setting_change("filter_colorize_color", v)),
            Divider(),
            Header(text=s["filter_contrast"]),
            Switch(key="filter_contrast_enabled", text=s["filter_contrast"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_contrast_enabled", v)),
            Input(key="filter_contrast_factor", text=s["filter_contrast_factor"], default="1.5", icon="msg_settings_ny", on_change=lambda v: self._on_setting_change("filter_contrast_factor", v)),
            Divider(),
            Header(text=s["filter_blur"]),
            Switch(key="filter_blur_enabled", text=s["filter_blur"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_blur_enabled", v)),
            Input(key="filter_blur_radius", text=s["filter_blur_radius"], default="5", icon="msg_photo_blur", on_change=lambda v: self._on_setting_change("filter_blur_radius", v)),
            Divider(),
            Header(text=s["filter_emboss"] + " & " + s["filter_contour"]),
            Switch(key="filter_emboss_enabled", text=s["filter_emboss"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_emboss_enabled", v)),
            Switch(key="filter_contour_enabled", text=s["filter_contour"], default=False, icon="msg_theme", on_change=lambda v: self._on_setting_change("filter_contour_enabled", v)),
            Divider(text=s["filter_no_settings"]),
            Divider(text=s["plugin_by"])
        ]
        
    def create_broadcast_settings(self) -> List[Any]:
        s = self.tr
        settings = [Header(text=s["broadcast_header"]), Switch(key="broadcast_enable", text=s["broadcast_enable"], default=False, icon="msg_screencast_solar"), Selector(key="broadcast_target", text=s["broadcast_target"], items=s["broadcast_target_items"], default=0, icon="msg_openprofile"), Input(key="broadcast_template", text=s["broadcast_template"], subtext=s["broadcast_template_sub"], default="{artist} - {title}", icon="msg_edit"), Input(key="broadcast_paused_text", text=s["broadcast_paused_text"], subtext=s["broadcast_paused_text_sub"], default="", icon="msg_mute_period_solar"), Input(key="broadcast_interval_active", text=s["broadcast_interval_active"], subtext=s["broadcast_interval_sub"], default="5s", icon="msg_recent"), Divider(text="–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram, —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–∞ –ø–∞—É–∑–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–∂–µ."), Header(text=s["broadcast_filter_header"]), Selector(key="broadcast_filter_mode", text=s["broadcast_filter_mode"], items=s["broadcast_filter_mode_items"], default=0)]
        if available_apps := self._get_available_apps():
            settings.append(Divider(text=s["broadcast_filter_apps_header"]))
            for app in available_apps:
                if app_pkg := app.get('b', ''): settings.append(Switch(key=f"broadcast_app_{app_pkg}", text=app.get('a', 'Unknown App'), default=False, icon="msg_bot"))
        else: settings.append(Text(text=s["broadcast_filter_apps_not_found"], icon="msg_info"))
        settings.append(Divider(text=s["plugin_by"]))
        return settings
        
    def create_history_settings(self) -> List[Any]:
        s = self.tr
        settings = [
            Header(text=s["cat_history"]),
            Input(key="history_command", text=s["history_command"], subtext=s["history_command_sub"], default=".nh", icon="input_bot"),
            Input(key="history_title", text=s["history_title"], default="üéß –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤", icon="msg_edit", subtext=s["template_sub"]),
            Selector(key="history_message_limit", text=s["history_message_limit"], items=[str(i) for i in range(5, 51, 5)], default=3, icon="msg_list"), # 20
            Switch(key="history_blockquote", text=s["history_blockquote"], subtext=s["history_blockquote_sub"], default=True, icon="msg_quote"),
            Input(key="history_template", text=s["history_template"], subtext=s["history_template_sub"], default="{i}. {artist} - {title}", icon="msg_edit"),
            Text(text=s["history_filter_header"], icon="menu_tag_filter_solar", create_sub_fragment=self.create_history_filter_settings),
            Divider()
        ]
        history_items = self._read_history()
        if not history_items: 
            settings.append(Text(text=s["history_empty"], icon="msg_info"))
        else:
            settings.append(Header(text="–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã–µ:"))
            for i, entry in enumerate(history_items[:50], 1):
                if isinstance(entry, dict): settings.append(Divider(text=f"{i}. {entry.get('a', '???')} - {entry.get('b', '???')}\n{entry.get('d', '')}".strip()))
            if len(history_items) > 50:
                settings.append(Divider(text=s["history_full_list_link"]))
        settings.append(Divider(text=s["plugin_by"]))
        return settings

    def create_additional_settings(self) -> List[Any]:
        s = self.tr
        return [
            Header(text=s["additional_header"]),
            Input(key="settings_command", text=s["settings_command"], subtext=s["settings_command_sub"], default=".nowmedia", icon="msg_settings"),
            Divider(),
            Switch(key="show_in_drawer", text=s["drawer_item_title"], subtext=s["drawer_item_sub"], default=False, icon="msg_settings_solar", on_change=lambda v: self._update_drawer_menu_item()),
            Divider(),
            Header(text="Playback Control"),
            Input(key="cmd_play", text=s["cmd_play"], default=".np", icon="ic_play"),
            Input(key="cmd_pause", text=s["cmd_pause"], default=".np", icon="ic_pause"),
            Input(key="cmd_next", text=s["cmd_next"], default=".nn", icon="ic_action_next"),
            Input(key="cmd_prev", text=s["cmd_prev"], default=".nb", icon="ic_action_previous"),
            Divider(text=s["cmd_toggle_sub"]),
            Divider(text=s["plugin_by"])
        ]
        
    def create_history_filter_settings(self) -> List[Any]:
        s = self.tr
        settings = [
            Header(text=s["history_filter_header"]),
            Selector(key="history_filter_mode", text=s["history_filter_mode"], items=s["history_filter_mode_items"], default=0),
        ]
        if available_apps := self._get_available_apps():
            settings.append(Divider(text=s["history_filter_apps_header"]))
            for app in available_apps:
                if app_pkg := app.get('b', ''):
                    settings.append(Switch(key=f"history_app_{app_pkg}", text=app.get('a', 'Unknown App'), default=False, icon="msg_bot"))
        else:
            settings.append(Text(text=s["history_filter_apps_not_found"], icon="msg_info"))
        settings.append(Divider(text=s["plugin_by"]))
        return settings

    def create_layout_settings(self) -> List[Any]:
        s = self.tr
        layouts = s.get("layouts_list", ["Horizontal (L)", "Horizontal (R)", "Vertical", "Cover Top", "Polaroid", "Overlay (Bottom)", "Overlay (Split)", "Center Focus"])
        bg_styles = ["–û–±–ª–æ–∂–∫–∞ (–ë–ª—é—Ä)", "–û–±–ª–æ–∂–∫–∞ (–ú–æ–∫—Ä–æ–µ —Å—Ç–µ–∫–ª–æ)", "–û–±–ª–æ–∂–∫–∞ (–°—Ç–∞—Ä—ã–π TV)", "–û–±–ª–æ–∂–∫–∞ (–¢–µ–∫—É—á–∏–π)", "–û–±–ª–æ–∂–∫–∞ (–ü–∏–∫—Å–µ–ª–∏)", "–û–±–ª–æ–∂–∫–∞ (–≠—Å–∫–∏–∑)", "–°–ø–ª–æ—à–Ω–æ–π —Ü–≤–µ—Ç", "–ì—Ä–∞–¥–∏–µ–Ω—Ç", "–í–æ–ª–Ω—ã"]
        return [
            Header(text=s["cat_layout"]), 
            Selector(key="layout_style", text=s["layout_style"], items=layouts, default=0, icon="msg_palette", on_change=lambda v: self._on_setting_change("layout_style", v)), 
            Switch(key="narrow_horizontal", text=s["narrow_horizontal"], subtext=s["narrow_horizontal_sub"], default=True, icon="msg_zoomout_stats", on_change=lambda v: self._on_setting_change("narrow_horizontal", v)), 
            Selector(key="image_size", text=s["quality"], items=s["quality_items"], default=0, icon="menu_quality_hd_solar", on_change=lambda v: self._on_setting_change("image_size", v)), 
            Input(key="padding", text=s["padding"], default="25", icon="msg_photo_cropfix", on_change=lambda v: self._on_setting_change("padding", v)), 
            Header(text=s["bg_header"]), 
            Selector(key="bg_style", text=s["bg_style"], items=bg_styles, default=0, icon="msg_theme", on_change=lambda v: self._on_setting_change("bg_style", v)), 
            Input(key="bg_solid_color", text=s["bg_solid_color"], default="#1E1F22", icon="msg_colors", on_change=lambda v: self._on_setting_change("bg_solid_color", v)), 
            Input(key="bg_gradient_start", text=s["bg_gradient_start"], default="#232526", icon="msg_colors", on_change=lambda v: self._on_setting_change("bg_gradient_start", v)), 
            Input(key="bg_gradient_end", text=s["bg_gradient_end"], default="#414345", icon="msg_colors", on_change=lambda v: self._on_setting_change("bg_gradient_end", v)), 
            Selector(key="bg_crop_mode", text=s["bg_crop_mode"], items=["–†–∞—Å—Ç—è–Ω—É—Ç—å", "–û–±—Ä–µ–∑–∞—Ç—å (—Ü–µ–Ω—Ç—Ä)", "–û–±—Ä–µ–∑–∞—Ç—å (–≤–µ—Ä—Ö)", "–û–±—Ä–µ–∑–∞—Ç—å (–Ω–∏–∑)"], default=1, icon="msg_photo_crop", on_change=lambda v: self._on_setting_change("bg_crop_mode", v)), 
            Input(key="blur_radius", text=s["blur_radius"], default="50", icon="msg_photo_blur", on_change=lambda v: self._on_setting_change("blur_radius", v)),
            Input(key="wet_glass_blur_radius", text=s["wet_glass_blur"], default="30", icon="msg_photo_blur", on_change=lambda v: self._on_setting_change("wet_glass_blur_radius", v)),
            Input(key="glass_alpha", text=s["glass_alpha"], default="128", icon="msg_brightness_low", on_change=lambda v: self._on_setting_change("glass_alpha", v)), 
            Input(key="flow_strength", text=s["flow_strength"], default="10", icon="msg_speed", on_change=lambda v: self._on_setting_change("flow_strength", v)), 
            Input(key="pixel_size", text=s["pixel_size"], default="32", icon="msg_photo_cropfix", on_change=lambda v: self._on_setting_change("pixel_size", v)), 
            Input(key="background_dim", text=s["background_dim"], default="75", icon="msg_brightness_low", on_change=lambda v: self._on_setting_change("background_dim", v)), 
            Switch(key="use_mega_overlay", text=s["use_mega_overlay"], default=True, icon="msg_palette", on_change=lambda v: self._on_setting_change("use_mega_overlay", v)), 
            Header(text=s["sketch_header"]), 
            Selector(key="sketch_thickness", text=s["sketch_thickness"], items=["–¢–æ–Ω–∫–∏–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–ñ–∏—Ä–Ω—ã–µ"], default=1, icon="msg_photo_curve", on_change=lambda v: self._on_setting_change("sketch_thickness", v)), 
            Selector(key="sketch_brightness", text=s["sketch_brightness"], items=[f"{i*10}%" for i in range(11)], default=5, icon="msg_brightness_high", on_change=lambda v: self._on_setting_change("sketch_brightness", v)), 
            Divider(text=s["plugin_by"])
        ]

    def create_appearance_settings(self) -> List[Any]:
        s = self.tr; return [Header(text=s["cover_header"]), Input(key="cover_rounding", text=s["cover_rounding"], default="20", icon="msg_photo_crop", on_change=lambda v: self._on_setting_change("cover_rounding", v)), Switch(key="cover_shadow_enable", text=s["cover_shadow_enable"], default=True, icon="msg_theme", on_change=lambda v: self._on_setting_change("cover_shadow_enable", v)), Input(key="cover_shadow_blur", text=s["cover_shadow_blur"], default="20", icon="msg_photo_blur", on_change=lambda v: self._on_setting_change("cover_shadow_blur", v)), Input(key="cover_shadow_color", text=s["cover_shadow_color"], default="#A0000000", icon="msg_colors", on_change=lambda v: self._on_setting_change("cover_shadow_color", v)), Input(key="cover_shadow_offset_x", text=s["cover_shadow_offset_x"], default="5", icon="msg_reorder", on_change=lambda v: self._on_setting_change("cover_shadow_offset_x", v)), Input(key="cover_shadow_offset_y", text=s["cover_shadow_offset_y"], default="5", icon="msg_reorder", on_change=lambda v: self._on_setting_change("cover_shadow_offset_y", v)), Divider(), Header(text=s["border_header"]), Switch(key="border_enable", text=s["border_enable"], default=True, icon="msg_photo_rotate", on_change=lambda v: self._on_setting_change("border_enable", v)), Input(key="border_width", text=s["border_width"], default="3", icon="msg_photo_curve", on_change=lambda v: self._on_setting_change("border_width", v)), Switch(key="border_adaptive_color", text=s["border_adaptive_color"], default=True, icon="msg_colors", on_change=lambda v: self._on_setting_change("border_adaptive_color", v)), Switch(key="border_adaptive_lighten", text=s["border_adaptive_lighten"], default=True, icon="msg_brightness_high", on_change=lambda v: self._on_setting_change("border_adaptive_lighten", v)), Input(key="border_color", text=s["border_color"], default="#FFFFFF", icon="msg_colors", on_change=lambda v: self._on_setting_change("border_color", v)), Divider(text=s["plugin_by"])]
        
    def create_elements_settings(self) -> List[Any]:
        s = self.tr; return [Header(text=s["elements_header"]), Switch(key="show_progress_bar", text=s["show_progress_bar"], default=True, icon="msg_stats", on_change=lambda v: self._on_setting_change("show_progress_bar", v)), Switch(key="show_timers", text=s["show_timers"], default=True, icon="msg_recent", on_change=lambda v: self._on_setting_change("show_timers", v)), Switch(key="show_app_icon", text=s["show_app_icon"], default=True, icon="msg_bot", on_change=lambda v: self._on_setting_change("show_app_icon", v)), Divider(), Header(text=s["progress_bar_header"]), Selector(key="progress_bar_style", text=s["progress_bar_style"], items=["–°–ø–ª–æ—à–Ω–æ–π", "–í–æ–ª–Ω–∞", "–¢–æ—á–∫–∏", "–ü–æ–ª–æ—Å–∫–∏", "–ó–º–µ–π–∫–∞", "–ì—Ä–∞–¥–∏–µ–Ω—Ç"], default=0, icon="msg_settings_ny", on_change=lambda v: self._on_setting_change("progress_bar_style", v)), Header(text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è: –ì—Ä–∞–¥–∏–µ–Ω—Ç"), Input(key="gradient_end_color", text=s["gradient_end_color"], default="#8A2BE2", icon="msg_colors", on_change=lambda v: self._on_setting_change("gradient_end_color", v)), Header(text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è: –ó–º–µ–π–∫–∞"), Selector(key="snake_thickness", text=s["snake_thickness"], items=["–¢–æ–Ω–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–¢–æ–ª—Å—Ç–∞—è"], default=1, icon="msg_photo_curve", on_change=lambda v: self._on_setting_change("snake_thickness", v)), Header(text="–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–æ—Å—ã"), Input(key="progress_bar_height", text=s["progress_bar_height"], default="8", icon="msg_settings_ny", on_change=lambda v: self._on_setting_change("progress_bar_height", v)), Switch(key="use_dominant_color", text=s["use_dominant_color"], default=True, icon="msg_colors", on_change=lambda v: self._on_setting_change("use_dominant_color", v)), Switch(key="bar_adaptive_lighten", text=s["bar_adaptive_lighten"], default=True, icon="msg_brightness_high", on_change=lambda v: self._on_setting_change("bar_adaptive_lighten", v)), Input(key="bar_color", text=s["bar_color"], default="#1DB954", icon="msg_theme", on_change=lambda v: self._on_setting_change("bar_color", v)), Header(text=f"{s['progress_bar_header']} ({s['bg_header']})"), Switch(key="bar_bg_adaptive", text=s["bar_bg_adaptive"], default=True, icon="msg_colors", on_change=lambda v: self._on_setting_change("bar_bg_adaptive", v)), Input(key="bar_bg_color", text=s["bar_bg_color"], default="#40FFFFFF", icon="msg_colors", on_change=lambda v: self._on_setting_change("bar_bg_color", v)), Divider(), Header(text=s["show_app_icon"]), Input(key="app_icon_size", text=s["app_icon_size"], default="48", icon="msg_photo_settings", on_change=lambda v: self._on_setting_change("app_icon_size", v)), Switch(key="app_icon_on_cover", text=s["app_icon_on_cover"], default=True, icon="msg_photo_sticker", on_change=lambda v: self._on_setting_change("app_icon_on_cover", v)), Selector(key="app_icon_corner", text=s["app_icon_corner"], items=["–í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π", "–í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π", "–ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π", "–ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π"], default=2, icon="msg_select_between_solar", on_change=lambda v: self._on_setting_change("app_icon_corner", v)), Input(key="app_icon_margin", text=s["app_icon_margin"], default="10", icon="msg_photo_crop", on_change=lambda v: self._on_setting_change("app_icon_margin", v)), Divider(text=s["plugin_by"])]

    def create_font_settings(self) -> List[Any]:
        try:
            s = self.tr
            font_names = list(PREDEFINED_FONTS.keys())
            alpha_items = [f"{100 - i * 5}%" for i in range(21)]
            
            custom_font_path = self.get_setting("custom_font_path", "")
            current_font_display_name = s.get("font_not_selected", "Not Selected")
            if custom_font_path and isinstance(custom_font_path, str) and os.path.exists(custom_font_path):
                real_name = get_font_real_name(custom_font_path)
                if real_name: current_font_display_name = real_name
            
            final_divider_text = s.get("current_font", "Current font: {name}").format(name=current_font_display_name)
            
            return [
                Header(text=s.get("font_header", "Font")),
                Selector(key="font_choice", text=s.get("font_choice", "Font Choice"), items=font_names + ["–°–≤–æ–π"], default=0, icon="msg_photo_text2", on_change=lambda v: self._on_setting_change("font_choice", v)),
                Text(text=s.get("custom_font_file", "Custom Font"), icon="files_folder_solar", accent=True, on_click=lambda v: self._launch_file_picker()),
                Divider(text=s.get("custom_font_file_sub", "Select .ttf/.otf file")),
                Divider(text=final_divider_text),
                Divider(),
                Selector(key="artist_pos", text=s.get("artist_pos", "Artist Position"), items=["–ù–∞–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º", "–ü–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º"], default=0, icon="msg_reorder", on_change=lambda v: self._on_setting_change("artist_pos", v)),
                Input(key="artist_title_spacing", text=s.get("artist_title_spacing", "Text Spacing"), default="2", icon="msg_reorder", on_change=lambda v: self._on_setting_change("artist_title_spacing", v)),
                Input(key="artist_size", text=s.get("artist_size", "Artist Size"), default="28", icon="msg_photo_text2", on_change=lambda v: self._on_setting_change("artist_size", v)),
                Selector(key="artist_alpha", text=s.get("artist_alpha", "Artist Transparency"), items=alpha_items, default=6, icon="msg_brightness_low", on_change=lambda v: self._on_setting_change("artist_alpha", v)),
                Input(key="title_size", text=s.get("title_size", "Title Size"), default="42", icon="msg_photo_text2", on_change=lambda v: self._on_setting_change("title_size", v)),
                Input(key="timer_size", text=s.get("timer_size", "Timer Size"), default="18", icon="msg_photo_text_regular", on_change=lambda v: self._on_setting_change("timer_size", v)),
                Input(key="text_color", text=s.get("text_color", "Text Color"), default="#FFFFFF", icon="msg_text_check", on_change=lambda v: self._on_setting_change("text_color", v)),
                Selector(key="text_alpha", text=s.get("text_alpha", "Text Transparency"), items=alpha_items, default=0, icon="msg_brightness_low", on_change=lambda v: self._on_setting_change("text_alpha", v)),
                Divider(text=s.get("plugin_by", "Plugin by..."))
            ]
        except Exception as e:
            log(f"[{self.id}] ERROR creating font settings page: {traceback.format_exc()}")
            return [Header(text="–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"), Text(text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}", icon="msg_delete", red=True)]
        
    def create_caption_settings(self) -> List[Any]:
        s = self.tr; return [Header(text=s["caption_header"]), Input(key="template", text=s["template"], subtext=s["template_sub"], default=DEFAULT_TEMPLATE, icon="msg_edit"), Divider(text=s["plugin_by"])]
        
    def refresh_settings(self, *args):
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        fragment = get_last_fragment()
        if fragment:
            if hasattr(fragment, "rebuildAllFragments"):
                run_on_ui_thread(lambda: fragment.rebuildAllFragments(True))
            elif hasattr(fragment, "rebuildAllItems"):
                run_on_ui_thread(lambda: fragment.rebuildAllItems())

    def _send_media_key_event(self, key_code: int):
        try:
            context = ApplicationLoader.applicationContext
            audio_manager = context.getSystemService(context.AUDIO_SERVICE)
            down_event = KeyEvent(KeyEvent.ACTION_DOWN, key_code)
            up_event = KeyEvent(KeyEvent.ACTION_UP, key_code)
            audio_manager.dispatchMediaKeyEvent(down_event)
            audio_manager.dispatchMediaKeyEvent(up_event)
            log(f"[{self.id}] Sent media key event: {key_code}")
        except Exception as e:
            log(f"[{self.id}] Failed to send media key event: {e}")
            run_on_ui_thread(lambda: BulletinHelper.show_error("Failed to send media command"))

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not hasattr(params, 'message') or not isinstance(params.message, str):
            return HookResult()
        
        msg = params.message.strip().lower()

        # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_cmd = self.get_setting("settings_command", ".nowmedia").lower().strip()
        if msg == settings_cmd:
            self._open_plugin_settings()
            return HookResult(strategy=HookStrategy.CANCEL)

        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
        cmd_play = self.get_setting("cmd_play", ".np").lower()
        cmd_pause = self.get_setting("cmd_pause", ".np").lower()
        cmd_next = self.get_setting("cmd_next", ".nn").lower()
        cmd_prev = self.get_setting("cmd_prev", ".nb").lower()
        
        key_to_send = None
        if cmd_play == cmd_pause and msg == cmd_play:
            key_to_send = KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE
        elif msg == cmd_play:
            key_to_send = KeyEvent.KEYCODE_MEDIA_PLAY
        elif msg == cmd_pause:
            key_to_send = KeyEvent.KEYCODE_MEDIA_PAUSE
        elif msg == cmd_next:
            key_to_send = KeyEvent.KEYCODE_MEDIA_NEXT
        elif msg == cmd_prev:
            key_to_send = KeyEvent.KEYCODE_MEDIA_PREVIOUS

        if key_to_send is not None:
            self._send_media_key_event(key_to_send)
            return HookResult(strategy=HookStrategy.CANCEL)

        # –ö–æ–º–∞–Ω–¥—ã –∫–∞—Ä—Ç–æ—á–∫–∏ nowMedia –∏ –∏—Å—Ç–æ—Ä–∏–∏
        command = self.get_setting("command", ".nm").strip().lower()
        if msg == command:
            if not self._is_companion_installed(): self._show_companion_needed_dialog(); return HookResult(strategy=HookStrategy.CANCEL)
            if not self._check_and_request_permissions(): return HookResult(strategy=HookStrategy.CANCEL)
            run_on_ui_thread(lambda: BulletinHelper.show_info(self.tr["generating"])); run_on_queue(lambda: self._generate_and_send(account, params)); return HookResult(strategy=HookStrategy.CANCEL)
        
        if msg == self.get_setting("history_command", ".nh").strip().lower():
            run_on_queue(lambda: self._send_history(params)); return HookResult(strategy=HookStrategy.CANCEL)
            
        return HookResult()
    
    def _send_history(self, params: Any):
        from datetime import datetime
        s = self.tr
        history = self._read_history()
        
        history_filter_mode = self.get_setting("history_filter_mode", 0)
        if history and history_filter_mode > 0:
            available_apps = self._get_available_apps()
            selected_apps = {app.get('a', '').lower() for app in available_apps if self.get_setting(f"history_app_{app.get('b')}", False)}
            
            filtered_history = []
            for entry in history:
                app_name = entry.get('d', '').lower()
                if history_filter_mode == 1 and app_name in selected_apps:
                    filtered_history.append(entry)
                elif history_filter_mode == 2 and app_name not in selected_apps:
                    filtered_history.append(entry)
            history = filtered_history

        if not history: 
            run_on_ui_thread(lambda: BulletinHelper.show_info(s["history_empty"]))
            return

        total_tracks_count = len(history)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        limit_index = self.get_setting("history_message_limit", 3) # default: 20
        limit_values = list(range(5, 51, 5))
        max_tracks_to_show = limit_values[limit_index]

        history_to_display = history[:max_tracks_to_show]
        
        template = self.get_setting("history_template", "{i}. {artist} - {title}")
        
        lines = []
        for i, entry in enumerate(history_to_display, 1):
            track_time = format_track_duration(entry.get("e", 0))
            track_date = datetime.fromtimestamp(entry.get("c", 0) / 1000).strftime('%H:%M %d.%m')
            # –ü—Ä–∏–º–µ–Ω—è–µ–º Markdown –∫ —Å—Ç—Ä–æ–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
            formatted_line = template.format(i=i, artist=entry.get("a", "N/A"), title=entry.get("b", "N/A"), appName=entry.get("d", "N/A"), time=track_time, date=track_date)
            lines.append(formatted_line)
        
        history_body_with_md = "\n".join(lines)
        
        title = self.get_setting("history_title", "üéß –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤")
        full_text_with_md = f"*{title}*\n\n{history_body_with_md}" if title else history_body_with_md
        
        parsed = parse_markdown(full_text_with_md)
        
        final_entities = []
        for e in parsed.entities:
            final_entities.append(e.to_tlrpc_object())
        
        if self.get_setting("history_blockquote", True) and history_body_with_md:
            # –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
            parsed_history_body = parse_markdown(history_body_with_md)
            clean_history_text = parsed_history_body.text
            start_index_py = parsed.text.find(clean_history_text)

            if start_index_py != -1:
                quote_offset_utf16 = len(parsed.text[:start_index_py].encode('utf-16-le', 'surrogatepass')) // 2
                quote_length_utf16 = len(clean_history_text.encode('utf-16-le', 'surrogatepass')) // 2
                
                blockquote = TLRPC.TL_messageEntityBlockquote()
                blockquote.collapsed = True
                blockquote.offset = quote_offset_utf16
                blockquote.length = quote_length_utf16
                final_entities.append(blockquote)
            else:
                log(f"[{self.id}] Could not find history body in parsed text for blockquote.")

        send_params = {
            "peer": params.peer, 
            "message": parsed.text, 
            "entities": final_entities,
            "replyToMsg": getattr(params, 'replyToMsg', None),
            "replyToTopMsg": getattr(params, 'replyToTopMsg', None)
        }
        send_message(send_params)

    def _generate_and_send(self, account: int, params: Any):
        font_path = self._get_font_path();
        if not font_path: return
        data, error = self._get_media_data()
        if error: run_on_ui_thread(lambda: BulletinHelper.show_error(self.tr["error_json" if error == "json_not_found" else "error_generating"])); return
        self._update_history(data)
        pi_dir_path = "/storage/emulated/0/Download/.nowMedia"; cover_path, app_icon_path = os.path.join(pi_dir_path, "cover.png"), os.path.join(pi_dir_path, "app.png")
        if not os.path.exists(cover_path): run_on_ui_thread(lambda: BulletinHelper.show_error(self.tr["error_cover"])); return
        if not (output_image_path := self._create_card(data, cover_path, app_icon_path, font_path)): return
        template = self.get_setting("template", DEFAULT_TEMPLATE); caption_text = template.format(artist=clean_and_normalize_text(data.get("b", "N/A")), title=clean_and_normalize_text(data.get("a", "N/A")), appName=clean_and_normalize_text(data.get("f", "N/A")))
        parsed_caption = parse_markdown(caption_text)
        if os.path.exists(output_image_path) and (photo_sizes := get_send_messages_helper().generatePhotoSizes(output_image_path, None)):
            
            caption_entities = []
            for ent in parsed_caption.entities:
                caption_entities.append(ent.to_tlrpc_object())
            
            send_params = {
                "peer": params.peer, 
                "photo": photo_sizes, 
                "path": output_image_path, 
                "caption": parsed_caption.text, 
                "entities": caption_entities,
                "replyToMsg": getattr(params, 'replyToMsg', None),
                "replyToTopMsg": getattr(params, 'replyToTopMsg', None)
            }
            send_message(send_params)
            run_on_ui_thread(lambda: BulletinHelper.show_success(self.tr["generated"]))

    def _draw_progress_bar(self, bg: Image.Image, draw: ImageDraw.ImageDraw, style: int, rect: Tuple[int, int, int, int], progress: float, color: Tuple[int, ...], bg_color: Tuple[int, ...], snake_thickness: int, gradient_end_color: Tuple[int, ...]):
        x1, y1, x2, y2 = rect; bar_w, bar_h = x2 - x1, y2 - y1;
        if bar_w <= 0 or bar_h <= 0: return
        progress_w = bar_w * progress
        if style != 4: draw.rounded_rectangle(rect, radius=bar_h // 2, fill=bg_color)
        if progress_w <= 0: return
        if style == 0: draw.rounded_rectangle((x1, y1, x1 + progress_w, y2), radius=bar_h // 2, fill=color)
        elif style == 1:
            wave_layer = Image.new('RGBA', (int(bar_w), bar_h), (0,0,0,0)); wave_draw = ImageDraw.Draw(wave_layer)
            for i in range(2):
                points = [(x, (bar_h / 2) + math.sin(x * (0.05 - i*0.01) + i * math.pi) * bar_h * (0.4 + i*0.2)) for x in range(int(bar_w))]
                if len(points) > 1: wave_draw.line(points, fill=(*color[:3], 100 + i*50), width=max(1, bar_h // 4))
            mask = Image.new('L', (int(bar_w), bar_h), 0); ImageDraw.Draw(mask).rounded_rectangle((0, 0, progress_w, bar_h), radius=bar_h//2, fill=255)
            bg.paste(wave_layer, (int(x1), int(y1)), mask)
        elif style == 2:
            if (spacing := bar_h * 1.5) > 0: [draw.ellipse((x1+i*spacing, y1, x1+i*spacing+bar_h, y2), fill=color) for i in range(int(progress_w/spacing))]
        elif style == 3:
            if (spacing := bar_h * 1.5) > 0: [draw.line((x1+i*spacing, y2, x1+i*spacing+bar_h, y1), fill=color, width=bar_h//2) for i in range(int(progress_w/spacing))]
        elif style == 4:
            amplitude = (bar_h-snake_thickness)/2; center_y=y1+bar_h/2; bg_points = [(x1 + x, center_y + math.sin(x * 0.1) * amplitude) for x in range(int(bar_w))]
            if len(bg_points) > 1: draw.line(bg_points, fill=bg_color, width=snake_thickness, joint="curve")
            if progress > 0 and (progress_points := bg_points[:int(progress_w)]) and len(progress_points) > 1: draw.line(progress_points, fill=color, width=snake_thickness, joint="curve")
        elif style == 5:
            g_img = Image.new('RGBA', (int(bar_w), bar_h)); g_draw = ImageDraw.Draw(g_img); start_rgb, end_rgb = color[:3], gradient_end_color[:3]
            for i in range(int(bar_w)): g_draw.line([(i, 0), (i, bar_h)], fill=tuple(int(s + (e-s)*(i/bar_w)) for s,e in zip(start_rgb, end_rgb)) + (255,), width=1)
            mask = Image.new('L', (int(bar_w), bar_h), 0); ImageDraw.Draw(mask).rounded_rectangle((0, 0, progress_w, bar_h), radius=bar_h//2, fill=255)
            bg.paste(g_img, (int(x1), int(y1)), mask)

    def _create_card(self, data: dict, cover_path: str, app_icon_path: str, font_path: str) -> Optional[str]:
        try:
            s = self.tr
            pi_settings = {k: self.get_setting(k, d) for k, d in {"layout_style":0, "image_size":0, "padding":"25", "bg_crop_mode":1, "show_app_icon":True, "show_progress_bar":True, "show_timers":True, "text_color":"#FFFFFF", "bar_color":"#1DB954", "artist_size":"28", "title_size":"42", "timer_size":"18", "blur_radius":"50", "wet_glass_blur_radius":"30", "cover_rounding":"20", "artist_title_spacing":"2", "background_dim":"75", "border_enable":True, "border_width":"3", "border_color":"#FFFFFF", "use_dominant_color":True, "use_mega_overlay":True, "app_icon_size":"48", "progress_bar_height":"8", "cover_shadow_enable":True, "cover_shadow_blur":"20", "cover_shadow_color":"#A0000000", "border_adaptive_color":True, "bar_adaptive_lighten":True, "border_adaptive_lighten":True, "progress_bar_style":0, "app_icon_on_cover":True, "app_icon_corner":2, "app_icon_margin":"10", "text_alpha":0, "artist_pos":0, "artist_alpha":6, "snake_thickness":1, "bar_bg_adaptive":True, "bar_bg_color":"#40FFFFFF", "gradient_end_color":"#8A2BE2", "bg_style":0, "glass_alpha":"128", "flow_strength":"10", "pixel_size":"32", "sketch_thickness":1, "sketch_brightness": 5, "cover_shadow_offset_x":"5", "cover_shadow_offset_y":"5", "narrow_horizontal": True, "bg_solid_color": "#1E1F22", "bg_gradient_start": "#232526", "bg_gradient_end": "#414345", "use_bg_filters": False}.items()}
            
            if self.get_setting("theme_preset", 0) == len(s["theme_preset_items"]) - 1:
                pi_settings.update({ "layout_style": random.randint(0, 7), "bg_style": random.randint(0, 8), "cover_rounding": random.randint(0, 50), "border_enable": random.choice([True, False]), "use_dominant_color": random.choice([True, False]), "text_color": f"#{random.randint(0, 0xFFFFFF):06x}", "artist_alpha": random.randint(0, 10) })
            
            pi_quality_scale = 1.5 if pi_settings["image_size"] == 1 else 1.0
            is_vertical_layout = pi_settings["layout_style"] >= 2
            layout_font_scale = 0.8 if is_vertical_layout else 1.0
            
            for k, default in {"padding":"25", "artist_size":"28", "title_size":"42", "timer_size":"18", "blur_radius":"50", "wet_glass_blur_radius":"30", "cover_rounding":"20", "border_width":"3", "app_icon_size":"48", "progress_bar_height":"8", "cover_shadow_blur":"20", "app_icon_margin":"10", "background_dim":"75", "artist_title_spacing":"2", "glass_alpha":"128", "flow_strength":"10", "pixel_size":"32", "cover_shadow_offset_x":"5", "cover_shadow_offset_y":"5"}.items():
                try:
                    base_val = float(pi_settings[k])
                    scaled_val = base_val * pi_quality_scale
                    if k in ["artist_size", "title_size", "timer_size"]:
                        scaled_val *= layout_font_scale
                    pi_settings[k] = int(scaled_val)
                except (ValueError, TypeError):
                    base_val = float(default)
                    scaled_val = base_val * pi_quality_scale
                    if k in ["artist_size", "title_size", "timer_size"]:
                        scaled_val *= layout_font_scale
                    pi_settings[k] = int(scaled_val)

            layout_style = pi_settings["layout_style"]
            if layout_style in [5, 6]: sizes = [(512, 512), (768, 768)] # Overlay
            elif layout_style in [0, 1]: sizes = [(800, 320), (1200, 480)] # Horizontal
            elif layout_style == 2: sizes = [(400, 600), (600, 900)] # Vertical
            elif layout_style == 4: sizes = [(400, 520), (600, 780)] # Polaroid
            elif layout_style == 7: sizes = [(512, 700), (768, 1050)] # Center Focus
            else: sizes = [(400, 550), (600, 825)] # Cover Top (style 3)
            
            pi_W, pi_H = [int(v) for v in sizes[pi_settings["image_size"]]]; PADDING = pi_settings["padding"]
            if layout_style in [0, 1] and pi_settings["narrow_horizontal"]: pi_W = int(pi_W * 0.8)

            font_artist, font_title, font_timer = [ImageFont.truetype(font_path, pi_settings[k]) for k in ["artist_size", "title_size", "timer_size"]]
            base_text_color = ImageColor.getcolor(pi_settings["text_color"], "RGB"); text_alpha, artist_alpha = [round(255*(1-pi_settings[k]*0.05)) for k in ["text_alpha", "artist_alpha"]]; final_text_color, artist_text_color = (*base_text_color, text_alpha), (*base_text_color, artist_alpha)
            
            with Image.open(cover_path) as original_cover, original_cover.convert("RGB") as cover_rgb:
                filtered_cover_rgb = self._apply_image_filters(cover_rgb.copy())
                dominant_color = self._get_dominant_color(filtered_cover_rgb)
                
                bar_color, border_color, shadow_color, bar_bg_color, gradient_end_color = [ImageColor.getcolor(pi_settings[k], "RGBA") for k in ["bar_color", "border_color", "cover_shadow_color", "bar_bg_color", "gradient_end_color"]]
                if dominant_color:
                    if pi_settings["use_dominant_color"]: bar_color = (*(self._lighten_color(dominant_color) if pi_settings["bar_adaptive_lighten"] else dominant_color), bar_color[3])
                    if pi_settings["border_adaptive_color"]: border_color = (*(self._lighten_color(dominant_color) if pi_settings["border_adaptive_lighten"] else dominant_color), border_color[3])
                    if pi_settings["bar_bg_adaptive"]: bar_bg_color = (*self._darken_color(dominant_color, 0.3), bar_bg_color[3])

                if layout_style in [5, 6]:
                    bg = filtered_cover_rgb.resize((pi_W, pi_H), Image.Resampling.LANCZOS).convert("RGBA")
                    if layout_style == 5: # Overlay (—Å–Ω–∏–∑—É)
                        gradient_h = int(pi_H * 0.55); gradient_y = pi_H - gradient_h
                        gradient = Image.new('L', (pi_W, gradient_h)); [ImageDraw.Draw(gradient).line([(0, i), (pi_W, i)], fill=min(255, int(220 * (i / gradient_h)**1.5))) for i in range(gradient_h)]
                        dim_layer = Image.new('RGBA', bg.size, (0,0,0,0)); dim_layer.paste((0,0,0,255), (0, gradient_y), gradient)
                        bg = Image.alpha_composite(bg, dim_layer)
                        draw = ImageDraw.Draw(bg, "RGBA")
                        bar_h = pi_settings["progress_bar_height"] if pi_settings["show_progress_bar"] else 0
                        timers_h = pi_settings["timer_size"] if pi_settings["show_timers"] else 0
                        bar_y = pi_H - PADDING - bar_h; bar_x = PADDING; bar_w = pi_W - PADDING * 2
                        if pi_settings["show_progress_bar"]:
                            pos, dur = int(data.get("i", 0)), int(data.get("h", 1)) or 1; progress = min(pos / dur, 1.0) if dur > 0 else 0
                            self._draw_progress_bar(bg, draw, pi_settings["progress_bar_style"], (bar_x, bar_y, bar_x + bar_w, bar_y + bar_h), progress, bar_color, bar_bg_color, int({0: 2, 1: 4, 2: 6}.get(pi_settings["snake_thickness"], 4) * pi_quality_scale), gradient_end_color)
                        if pi_settings["show_timers"]:
                            pos_str, dur_str = [format_time_ms(data.get(k, 0)) for k in ["i", "h"]]; dur_w = draw.textlength(dur_str, font=font_timer)
                            timer_y = bar_y - timers_h - int(5 * pi_quality_scale)
                            draw.text((bar_x, timer_y), pos_str, font=font_timer, fill=final_text_color); draw.text((bar_x + bar_w - dur_w, timer_y), dur_str, font=font_timer, fill=final_text_color)
                            text_base_y = timer_y
                        else: text_base_y = bar_y
                        artist, title = clean_and_normalize_text(data.get("b", "N/A"), font_artist), clean_and_normalize_text(data.get("a", "N/A"), font_title)
                        t1, t2 = wrap_and_clip_text(draw, artist, font_artist, bar_w, 2), wrap_and_clip_text(draw, title, font_title, bar_w, 2)
                        artist_h, title_h, spacing = draw.multiline_textbbox((0,0),t1,font=font_artist)[3], draw.multiline_textbbox((0,0),t2,font=font_title)[3], pi_settings["artist_title_spacing"]
                        if pi_settings["artist_pos"] == 0:
                            draw.text((bar_x, text_base_y-artist_h-title_h-spacing*2), t1, font=font_artist, fill=artist_text_color)
                            draw.text((bar_x, text_base_y-title_h-spacing), t2, font=font_title, fill=final_text_color)
                        else:
                            draw.text((bar_x, text_base_y-title_h-artist_h-spacing*2), t2, font=font_title, fill=final_text_color)
                            draw.text((bar_x, text_base_y-artist_h-spacing), t1, font=font_artist, fill=artist_text_color)

                    elif layout_style == 6: # Overlay (—Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É)
                        gradient_top_h = int(pi_H * 0.4); gradient_top = Image.new('L', (pi_W, gradient_top_h)); [ImageDraw.Draw(gradient_top).line([(0, i), (pi_W, i)], fill=min(255, int(200 * (1 - (i / gradient_top_h))**1.5))) for i in range(gradient_top_h)]
                        dim_layer_top = Image.new('RGBA', bg.size, (0,0,0,0)); dim_layer_top.paste((0,0,0,255), (0,0), gradient_top); bg = Image.alpha_composite(bg, dim_layer_top)
                        gradient_bottom_h = int(pi_H * 0.4); gradient_bottom_y = pi_H - gradient_bottom_h; gradient_bottom = Image.new('L', (pi_W, gradient_bottom_h)); [ImageDraw.Draw(gradient_bottom).line([(0, i), (pi_W, i)], fill=min(255, int(220 * (i / gradient_bottom_h)**1.5))) for i in range(gradient_bottom_h)]
                        dim_layer_bottom = Image.new('RGBA', bg.size, (0,0,0,0)); dim_layer_bottom.paste((0,0,0,255), (0, gradient_bottom_y), gradient_bottom); bg = Image.alpha_composite(bg, dim_layer_bottom)
                        draw = ImageDraw.Draw(bg, "RGBA") 
                        bar_h = pi_settings["progress_bar_height"] if pi_settings["show_progress_bar"] else 0; timers_h = pi_settings["timer_size"] if pi_settings["show_timers"] else 0
                        bar_y = pi_H - PADDING - bar_h; bar_x = PADDING; bar_w = pi_W - PADDING * 2
                        if pi_settings["show_progress_bar"]:
                            pos, dur = int(data.get("i", 0)), int(data.get("h", 1)) or 1; progress = min(pos / dur, 1.0) if dur > 0 else 0
                            self._draw_progress_bar(bg, draw, pi_settings["progress_bar_style"], (bar_x, bar_y, bar_x + bar_w, bar_y + bar_h), progress, bar_color, bar_bg_color, int({0: 2, 1: 4, 2: 6}.get(pi_settings["snake_thickness"], 4) * pi_quality_scale), gradient_end_color)
                        if pi_settings["show_timers"]:
                            pos_str, dur_str = [format_time_ms(data.get(k, 0)) for k in ["i", "h"]]; dur_w = draw.textlength(dur_str, font=font_timer)
                            timer_y = bar_y - timers_h - int(5 * pi_quality_scale)
                            draw.text((bar_x, timer_y), pos_str, font=font_timer, fill=final_text_color); draw.text((bar_x + bar_w - dur_w, timer_y), dur_str, font=font_timer, fill=final_text_color)
                        icon_size = pi_settings["app_icon_size"]; text_x = PADDING; text_w = pi_W - PADDING * 2 - (icon_size + 10 if pi_settings["show_app_icon"] else 0)
                        artist, title = clean_and_normalize_text(data.get("b", "N/A"), font_artist), clean_and_normalize_text(data.get("a", "N/A"), font_title)
                        t1, t2 = wrap_and_clip_text(draw, artist, font_artist, text_w, 2), wrap_and_clip_text(draw, title, font_title, text_w, 3)
                        artist_h, title_h, spacing = draw.multiline_textbbox((0,0),t1,font=font_artist)[3], draw.multiline_textbbox((0,0),t2,font=font_title)[3], pi_settings["artist_title_spacing"]
                        top_text_y = PADDING
                        if pi_settings["artist_pos"] == 0:
                            draw.text((text_x, top_text_y), t1, font=font_artist, fill=artist_text_color); draw.text((text_x, top_text_y + artist_h + spacing), t2, font=font_title, fill=final_text_color)
                        else:
                            draw.text((text_x, top_text_y), t2, font=font_title, fill=final_text_color); draw.text((text_x, top_text_y + title_h + spacing), t1, font=font_artist, fill=artist_text_color)
                    
                    if pi_settings["show_app_icon"] and os.path.exists(app_icon_path):
                        with Image.open(app_icon_path).convert("RGBA") as app_icon:
                            icon_size = pi_settings["app_icon_size"]
                            app_icon_r = app_icon.resize((icon_size, icon_size), Image.Resampling.LANCZOS)
                            if layout_style == 5: bg.paste(app_icon_r, (pi_W - PADDING - icon_size, PADDING), app_icon_r)
                            elif layout_style == 6: bg.paste(app_icon_r, (pi_W - PADDING - icon_size, PADDING), app_icon_r)
                    
                    output_path = os.path.join(self._temp_dir_path, f"nowplaying_{os.urandom(4).hex()}.png"); bg.save(output_path, "PNG"); return output_path

                bg_style = pi_settings["bg_style"]
                if bg_style < 6:
                    source_for_bg = filtered_cover_rgb if pi_settings["use_bg_filters"] else cover_rgb
                    crop_mode, centering = pi_settings["bg_crop_mode"], [(0.5, 0.5), (0.5, 0.0), (0.5, 1.0)][pi_settings["bg_crop_mode"] - 1] if pi_settings["bg_crop_mode"] > 0 else (0,0)
                    bg_base = ImageOps.fit(source_for_bg, (pi_W, pi_H), Image.Resampling.LANCZOS, centering=centering) if crop_mode > 0 else source_for_bg.resize((pi_W, pi_H), Image.Resampling.LANCZOS)
                    
                    if bg_style == 0: bg = bg_base.filter(ImageFilter.GaussianBlur(pi_settings["blur_radius"])).convert("RGBA")
                    elif bg_style == 1:
                        bg = bg_base.convert("RGBA")
                        blurred_layer = bg_base.filter(ImageFilter.GaussianBlur(pi_settings["wet_glass_blur_radius"])).convert("RGBA")
                        blurred_layer.putalpha(Image.new('L', blurred_layer.size, pi_settings["glass_alpha"]))
                        bg = Image.alpha_composite(bg, blurred_layer)
                    elif bg_style == 2: bg = bg_base.filter(ImageFilter.GaussianBlur(pi_settings["blur_radius"])).convert("RGBA"); noise = Image.new('L', (64, 64), 0); noise.putdata([random.randint(80, 200) for _ in range(4096)]); bg.putalpha(noise.resize(bg.size, Image.Resampling.BICUBIC))
                    elif bg_style == 3:
                        img = bg_base.copy(); pixels_in = bg_base.load(); pixels_out = img.load(); w, h = img.size
                        flow_strength = pi_settings["flow_strength"]; row_frequencies = [random.uniform(0.01, 0.05) for _ in range(h)]
                        for y in range(h):
                            for x in range(w):
                                offset = int(flow_strength * math.sin(y * row_frequencies[y])); new_x = max(0, min(w - 1, x - offset))
                                pixels_out[x, y] = pixels_in[new_x, y]
                        bg = img.filter(ImageFilter.GaussianBlur(2)).convert("RGBA")
                    elif bg_style == 4: ps = pi_settings["pixel_size"]; bg = bg_base.resize((pi_W // ps, pi_H // ps), Image.Resampling.NEAREST).resize((pi_W, pi_H), Image.Resampling.NEAREST).convert("RGBA")
                    elif bg_style == 5: line_color = tuple(int(c * (0.5 + pi_settings["sketch_brightness"] / 10 * 0.5)) for c in (self._lighten_color(dominant_color, 0.5) if dominant_color else (255, 255, 255))); sketch = ImageOps.invert(bg_base.convert('L').filter(ImageFilter.FIND_EDGES).filter(ImageFilter.MaxFilter({0: 1, 1: 3, 2: 5}.get(pi_settings["sketch_thickness"], 3)))); bg = Image.new("RGBA", bg_base.size); bg.paste(Image.new("RGB", bg.size, line_color), (0,0), sketch)
                elif bg_style == 6: bg = Image.new("RGBA", (pi_W, pi_H), pi_settings["bg_solid_color"])
                elif bg_style == 7: bg = Image.new("RGBA", (pi_W, pi_H)); start, end = [ImageColor.getcolor(pi_settings[k], "RGB") for k in ["bg_gradient_start", "bg_gradient_end"]]; [ImageDraw.Draw(bg).line([(0,i),(pi_W,i)],fill=tuple(int(s+(e-s)*i/pi_H) for s,e in zip(start,end))+(255,)) for i in range(pi_H)]
                elif bg_style == 8: bg = Image.new("RGBA", (pi_W, pi_H), (10,10,20,255)); [ImageDraw.Draw(bg).line([(x:=random.randint(-pi_W//2,pi_W//2)) + math.sin(i*0.1)*10, (y:=random.randint(-pi_H//2,pi_H//2)) + math.cos(i*0.05)*10], fill=(random.randint(50,150),random.randint(50,150),200,random.randint(20,80)), width=random.randint(20,60)) for _ in range(15) for i in range(200)]; bg = bg.filter(ImageFilter.GaussianBlur(30))
                
                bg = Image.alpha_composite(Image.new("RGBA", bg.size, (0,0,0,255)), Image.alpha_composite(bg, Image.new("RGBA", bg.size, (0, 0, 0, pi_settings["background_dim"]))))
                if pi_settings["use_mega_overlay"] and self._ensure_overlay_exists():
                    with Image.open(self._overlay_path).convert("RGBA") as overlay: bg = Image.alpha_composite(bg, (ImageOps.mirror if layout_style == 1 else lambda x: x)(overlay.resize((pi_W, pi_H), Image.Resampling.LANCZOS)))
                draw = ImageDraw.Draw(bg, "RGBA"); bw = pi_settings["border_width"] if pi_settings["border_enable"] else 0
                
                if layout_style in [0, 1]: artwork_size = int(pi_H - PADDING * 2 - bw * 2)
                elif layout_style == 4: artwork_size = int(min(pi_W - PADDING*2, pi_H - PADDING*2 - pi_H*0.25) - bw*2) # Polaroid
                else: artwork_size = int(pi_W - PADDING * 2 - bw * 2) # Vertical, Cover Top, Center Focus
                
                if artwork_size <= 0: run_on_ui_thread(lambda: BulletinHelper.show_error("Padding/border too large.")); return None

                final_filtered_cover = filtered_cover_rgb.resize((artwork_size, artwork_size), Image.Resampling.LANCZOS)
                mask = Image.new('L', final_filtered_cover.size, 0)
                ImageDraw.Draw(mask).rounded_rectangle((0, 0, *final_filtered_cover.size), radius=pi_settings["cover_rounding"], fill=255)
                final_cover_no_border = Image.new('RGBA', final_filtered_cover.size)
                final_cover_no_border.paste(final_filtered_cover, (0, 0), mask)
                
                if pi_settings["border_enable"] and bw > 0:
                    bordered_cover = Image.new('RGBA', (artwork_size+2*bw,)*2); ImageDraw.Draw(bordered_cover).rounded_rectangle((0,0,artwork_size+2*bw, artwork_size+2*bw), radius=pi_settings["cover_rounding"]+bw, fill=border_color)
                    bordered_cover.paste(final_cover_no_border, (bw, bw), final_cover_no_border); final_cover = bordered_cover
                else: final_cover = final_cover_no_border
                
                if layout_style==0: cover_pos, text_x, text_y, max_w = (PADDING, PADDING), PADDING*2+final_cover.width, PADDING, pi_W-PADDING*3-final_cover.width
                elif layout_style==1: cover_pos, text_x, text_y, max_w = (pi_W-PADDING-final_cover.width, PADDING), PADDING, PADDING, pi_W-PADDING*3-final_cover.width
                elif layout_style in [2,3]: cover_pos, text_x, text_y, max_w = (PADDING,PADDING), PADDING, PADDING*2+final_cover.height, pi_W-PADDING*2
                elif layout_style==4: cover_pos, text_x, text_y, max_w = ((pi_W-final_cover.width)//2, PADDING), PADDING, PADDING+final_cover.height+PADDING//2, pi_W-PADDING*2
                elif layout_style==7: cover_pos, max_w = ((pi_W-final_cover.width)//2, (pi_H-final_cover.height)//2), pi_W-PADDING*2
                
                if pi_settings["cover_shadow_enable"]:
                    shadow = Image.new('RGBA', final_cover.size); ImageDraw.Draw(shadow).rounded_rectangle((0,0,*shadow.size), radius=pi_settings["cover_rounding"]+bw, fill=shadow_color)
                    shadow = shadow.filter(ImageFilter.GaussianBlur(pi_settings["cover_shadow_blur"]))
                    bg.paste(shadow, (cover_pos[0]+pi_settings["cover_shadow_offset_x"], cover_pos[1]+pi_settings["cover_shadow_offset_y"]), shadow)
                bg.paste(final_cover, cover_pos, final_cover)

                if pi_settings["show_app_icon"] and pi_settings["app_icon_on_cover"] and os.path.exists(app_icon_path):
                    with Image.open(app_icon_path).convert("RGBA") as app_icon:
                        app_icon_r = app_icon.resize((pi_settings["app_icon_size"],)*2, Image.Resampling.LANCZOS); m = pi_settings["app_icon_margin"]
                        corners = [(m, m), (final_cover.width-pi_settings["app_icon_size"]-m, m), (m, final_cover.height-pi_settings["app_icon_size"]-m), (final_cover.width-pi_settings["app_icon_size"]-m, final_cover.height-pi_settings["app_icon_size"]-m)]
                        bg.paste(app_icon_r, (cover_pos[0] + corners[pi_settings["app_icon_corner"]][0], cover_pos[1] + corners[pi_settings["app_icon_corner"]][1]), app_icon_r)
                
                artist, title = clean_and_normalize_text(data.get("b", "N/A"), font_artist), clean_and_normalize_text(data.get("a", "N/A"), font_title)
                t1, t2 = wrap_and_clip_text(draw, artist, font_artist, max_w, 2), wrap_and_clip_text(draw, title, font_title, max_w, 3)
                
                if layout_style == 7: # Center Focus
                    artist_h = draw.multiline_textbbox((0,0), t1, font=font_artist)[3]
                    title_h = draw.multiline_textbbox((0,0), t2, font=font_title)[3]
                    t1_width = draw.multiline_textbbox((0,0), t1, font=font_artist)[2]
                    t2_width = draw.multiline_textbbox((0,0), t2, font=font_title)[2]
                    
                    if pi_settings["artist_pos"] == 0:
                        y1 = cover_pos[1] - artist_h - PADDING // 2
                        y2 = cover_pos[1] + final_cover.height + PADDING // 2
                        draw.text(((pi_W - t1_width) // 2, y1), t1, font=font_artist, fill=artist_text_color, align="center")
                        draw.text(((pi_W - t2_width) // 2, y2), t2, font=font_title, fill=final_text_color, align="center")
                    else:
                        y1 = cover_pos[1] - title_h - PADDING // 2
                        y2 = cover_pos[1] + final_cover.height + PADDING // 2
                        draw.text(((pi_W - t2_width) // 2, y1), t2, font=font_title, fill=final_text_color, align="center")
                        draw.text(((pi_W - t1_width) // 2, y2), t1, font=font_artist, fill=artist_text_color, align="center")

                else:
                    artist_h = draw.multiline_textbbox((0,0), t1, font=font_artist)[3]
                    title_h = draw.multiline_textbbox((0,0), t2, font=font_title)[3]
                    if pi_settings["artist_pos"] == 0:
                        draw.text((text_x, text_y), t1, font=font_artist, fill=artist_text_color)
                        draw.text((text_x, text_y + artist_h + pi_settings["artist_title_spacing"]), t2, font=font_title, fill=final_text_color)
                    else:
                        draw.text((text_x, text_y), t2, font=font_title, fill=final_text_color)
                        draw.text((text_x, text_y + title_h + pi_settings["artist_title_spacing"]), t1, font=font_artist, fill=artist_text_color)
                
                icon_space = pi_settings["app_icon_size"] + 10 if pi_settings["show_app_icon"] and not pi_settings["app_icon_on_cover"] else 0
                if layout_style==7: bar_y, bar_x, bar_w = pi_H-PADDING-pi_settings["progress_bar_height"], PADDING, max_w
                else: bar_y, bar_x, bar_w = pi_H-PADDING-pi_settings["progress_bar_height"], text_x, max_w - icon_space

                if pi_settings["show_progress_bar"]:
                    pos, dur = int(data.get("i", 0)), int(data.get("h", 1)) or 1; progress = min(pos / dur, 1.0) if dur > 0 else 0
                    snake_thickness = int({0: 2, 1: 4, 2: 6}.get(pi_settings["snake_thickness"], 4) * pi_quality_scale)
                    self._draw_progress_bar(bg, draw, pi_settings["progress_bar_style"], (bar_x, bar_y, bar_x + bar_w, bar_y + pi_settings["progress_bar_height"]), progress, bar_color, bar_bg_color, snake_thickness, gradient_end_color)
                if pi_settings["show_timers"]:
                    pos_str, dur_str = [format_time_ms(data.get(k, 0)) for k in ["i", "h"]]; dur_w = draw.textlength(dur_str, font=font_timer)
                    timer_y = bar_y - pi_settings["timer_size"] - int(5 * pi_quality_scale)
                    draw.text((bar_x, timer_y), pos_str, font=font_timer, fill=final_text_color); draw.text((bar_x + bar_w - dur_w, timer_y), dur_str, font=font_timer, fill=final_text_color)
                
                if pi_settings["show_app_icon"] and not pi_settings["app_icon_on_cover"] and os.path.exists(app_icon_path):
                    with Image.open(app_icon_path).convert("RGBA") as app_icon:
                        app_icon_r = app_icon.resize((pi_settings["app_icon_size"],)*2, Image.Resampling.LANCZOS)
                        bg.paste(app_icon_r, (pi_W - PADDING - pi_settings["app_icon_size"], pi_H - PADDING - pi_settings["app_icon_size"]), app_icon_r)
                
                output_path = os.path.join(self._temp_dir_path, f"nowplaying_{os.urandom(4).hex()}.png")
                bg.save(output_path, "PNG"); return output_path
        except (OSError, SyntaxError) as e:
            if "image file is truncated" in str(e):
                log(f"[{self.id}] Handled 'image file is truncated' error. Will not proceed.")
                run_on_ui_thread(lambda: BulletinHelper.show_error("–û—à–∏–±–∫–∞: –æ–±–ª–æ–∂–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
                return None
            log(f"[{self.id}] Card creation error (Image/Syntax): {e}\n{traceback.format_exc()}"); return None
        except Exception as e:
            log(f"[{self.id}] Card creation error (General): {e}\n{traceback.format_exc()}"); return None
