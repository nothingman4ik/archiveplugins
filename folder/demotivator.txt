import os
import uuid
import time
import traceback
import threading
import requests
from typing import Any, Optional
from java.util import Locale, ArrayList
from org.telegram.ui.ActionBar import AlertDialog
from ui.settings import Header, Selector, Input, Text, Divider
from base_plugin import BasePlugin, HookResult, HookStrategy
from android_utils import run_on_ui_thread, log
from client_utils import get_send_messages_helper, get_last_fragment, run_on_queue, send_message
from java.io import File
from org.telegram.messenger import ApplicationLoader, MessageObject, FileLoader, UserConfig, ImageLocation
from org.telegram.tgnet import TLRPC
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder

from PIL import Image, ImageDraw, ImageFont, ImageOps

__id__ = "demotivator_ar34"
__name__ = "–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä"
__description__ = "–°–æ–∑–¥–∞—ë—Ç –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ .dem <–≤–µ—Ä—Ö> | <–Ω–∏–∑> (—Å —Ñ–æ—Ç–æ)"
__author__ = "@ArThirtyFour | @KangelPlugins"
__min_version__ = "11.9.0"
__icon__ = "amevoruettabletki/1"
__version__ = "1.2.0"

TEMP_DIR_NAME = "DemotivatorTemp"

FONTS = {
    "NotoSansJP": "https://github.com/itsNightly/font_link/raw/refs/heads/main/NotoSansJP-Regular.ttf",
    "TimesNewRoman": "https://github.com/ArThirtyFour/Fonts_For_Exteragram/raw/refs/heads/main/timesnewromanpsmt.ttf",
    "Impact": "https://github.com/ArThirtyFour/Fonts_For_Exteragram/raw/refs/heads/main/Impact.ttf"
}

FONT_DISPLAY_NAMES = {
    "NotoSansJP": "Noto Sans JP",
    "TimesNewRoman": "Times New Roman",
    "Impact": "Impact"
}

class AlertManager:
    def __init__(self):
        self.alert_builder_instance: Optional[AlertDialogBuilder] = None

    def show_info_alert(self, title: str, message: str, positive_button: str):
        last_fragment = get_last_fragment()
        if not last_fragment or not last_fragment.getParentActivity(): return
        context = last_fragment.getParentActivity()
        builder = AlertDialogBuilder(context, AlertDialogBuilder.ALERT_TYPE_MESSAGE)
        self.alert_builder_instance = builder
        builder.set_title(title)
        builder.set_message(message)
        builder.set_positive_button(positive_button, lambda d, w: self.dismiss_dialog())
        builder.set_cancelable(True)
        builder.set_canceled_on_touch_outside(True)
        run_on_ui_thread(builder.show)

    def dismiss_dialog(self):
        if self.alert_builder_instance and self.alert_builder_instance.get_dialog() and self.alert_builder_instance.get_dialog().isShowing():
            self.alert_builder_instance.dismiss()
            self.alert_builder_instance = None

class LocalizationManager:
    strings = {
        "ru": {
            "FONT_FAQ_TITLE": "üé® –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã",
            "FONT_FAQ_TEXT": (
                "‚ö†Ô∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞, —Ç–∞–∫ —á—Ç–æ... \n\n"
                "üêõ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–∏–¥–∞–π—Ç–µ –±–∞–≥ –≤ ArThirtyFour.t.me\n\n"
                "üìù –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç?\n\n"
                "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–ö–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç' –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ —à—Ä–∏—Ñ—Ç–æ–≤\n\n"
                "2Ô∏è‚É£ –í –ø–æ–ª–µ '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç' –≤—Å—Ç–∞–≤—å—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ .ttf —Ñ–∞–π–ª\n\n"
                "üîó –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n"
                "‚Ä¢ https://example.com/font.ttf\n"
                "‚Ä¢ https://fonts.gstatic.com/s/roboto/v30/font.ttf\n\n"
                "üí° –ò –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¢–ê–ú –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –ö–û–ù–¶–ï .ttf\n\n"
                "3Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π .dem\n\n"
                "‚ö° –ü–ª–∞–≥–∏–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–µ—Ç —à—Ä–∏—Ñ—Ç –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ!\n\n"
                "üö® –í–ê–ñ–ù–û! –ü–†–ò –ü–ï–†–í–û–ú –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ò/–°–ú–ï–ù–ï –®–†–ò–§–¢–ê –ë–£–î–ï–¢ –î–û–õ–¨–®–ï –°–û–ó–î–ê–í–ê–¢–¨–°–Ø –ß–ï–ú –û–ë–´–ß–ù–û\n\n"
                "üíª –ê–≤—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —à—Ä–∏—Ñ—Ç—ã –Ω–∞ Github\n\n"
                "üåê –°–∞–π—Ç—ã –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —à—Ä–∏—Ñ—Ç—ã (—Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏):\n"
                "‚Ä¢ https://fontsaddict.com\n\n"
                "‚Ä¢ https://en.bestfonts.pro\n\n"
            ),
            "ALERT_CLOSE_BUTTON": "‚úÖ –ü–æ–Ω—è–ª"
        },
        "en": {
            "FONT_FAQ_TITLE": "üé® How to use custom fonts",
            "FONT_FAQ_TEXT": (
                "‚ö†Ô∏è Currently, the custom fonts feature is experimental, so... \n\n"
                "üêõ If something doesn't work, report bugs to ArThirtyFour.t.me\n\n"
                "üìù How to add a custom font?\n\n"
                "1Ô∏è‚É£ Select 'Custom font' in the font selector\n\n"
                "2Ô∏è‚É£ In the 'Custom font link' field, paste a direct link to the .ttf file\n\n"
                "üîó Example links:\n"
                "‚Ä¢ https://example.com/font.ttf\n"
                "‚Ä¢ https://fonts.gstatic.com/s/roboto/v30/font.ttf\n\n"
                "üí° AND THERE MUST BE .ttf AT THE END\n\n"
                "3Ô∏è‚É£ Create a demotivator with .dem command\n\n"
                "‚ö° The plugin will automatically download the font and use it!\n\n"
                "üö® IMPORTANT! ON FIRST USE/FONT CHANGE, IT WILL TAKE LONGER TO CREATE THAN USUAL\n\n"
                "üíª The author recommends uploading fonts to Github\n\n"
                "üåê Sites where you can find fonts (with direct links):\n"
                "‚Ä¢ https://fontsaddict.com\n\n"
                "‚Ä¢ https://en.bestfonts.pro\n\n"
            ),
            "ALERT_CLOSE_BUTTON": "‚úÖ Got it"
        }
    }

    def __init__(self):
        self.language = Locale.getDefault().getLanguage()
        self.language = self.language if self.language in self.strings else "en"

    def get_string(self, key: str) -> str:
        return self.strings[self.language].get(key, self.strings["en"].get(key, key))

locali = LocalizationManager()

class DemotivatorPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self._temp_dir = None
        self.alert_manager = AlertManager()

    def on_plugin_load(self):
        self.add_on_send_message_hook()
        self._temp_dir = self._get_temp_dir()
        if self._temp_dir:
            threading.Thread(target=self._download_fonts, daemon=True).start()
            log("[Demotivator] Plugin loaded successfully")
        else:
            log("[Demotivator] Failed to initialize temp directory")

    def _download_fonts(self):
        try:
            for font_name, font_url in FONTS.items():
                font_path = File(self._temp_dir, f"{font_name}-Regular.ttf").getAbsolutePath()
                if not os.path.exists(font_path):
                    response = requests.get(font_url)
                    with open(font_path, 'wb') as f:
                        f.write(response.content)
                    log(f"[Demotivator] Downloaded font: {font_name}")
        except Exception as e:
            log(f"[Demotivator] Error downloading fonts: {e}")

    def _get_temp_dir(self):
        try:
            base_dir = ApplicationLoader.getFilesDirFixed()
            if not base_dir:
                return None
            temp_dir = File(base_dir, TEMP_DIR_NAME)
            if not temp_dir.exists() and not temp_dir.mkdirs():
                return None
            return temp_dir
        except Exception as e:
            log(f"[Demotivator] Error creating temp dir: {e}")
            return None

    def on_plugin_unload(self):
        self.remove_hook("on_send_message")
        self.alert_manager.dismiss_dialog()

    def on_send_message_hook(self, account, params):
        msg = params.message.strip() if hasattr(params, 'message') and isinstance(params.message, str) else ''
        if not msg.startswith('.dem'):
            return HookResult()
        parts = msg.split(' ', 1)
        if len(parts) == 1 or not parts[1].strip():
            log('[Demotivator] –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ .dem')
            send_message({
                'peer': params.peer,
                'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: .dem <–≤–µ—Ä—Ö> | <–Ω–∏–∑>'
            })
            return HookResult(strategy=HookStrategy.CANCEL)
        
        if not hasattr(params, "replyToMsg") or not params.replyToMsg:
            run_on_ui_thread(lambda: BulletinHelper.show_error("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π"))
            return HookResult(strategy=HookStrategy.CANCEL)
        
        reply_msg = params.replyToMsg
        if not self._has_photo(reply_msg):
            run_on_ui_thread(lambda: BulletinHelper.show_error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"))
            return HookResult(strategy=HookStrategy.CANCEL)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
        text = parts[1].strip()
        if '|' in text:
            title, subtitle = [s.strip() for s in text.split('|', 1)]
        else:
            title, subtitle = text, ''
        log(f'[Demotivator] –í–µ—Ä—Ö: "{title}", –ù–∏–∑: "{subtitle}"')
        
        def bg_task():
            self._process_demotivator(params, reply_msg, title, subtitle)
        run_on_queue(bg_task)
        return HookResult(strategy=HookStrategy.CANCEL)

    def _has_photo(self, message_obj: MessageObject) -> bool:
        try:
            if not message_obj or not message_obj.messageOwner: return False
            media = message_obj.messageOwner.media
            return isinstance(media, TLRPC.TL_messageMediaPhoto) and media.photo is not None
        except Exception as e:
            log(f"[Demotivator] Error checking photo: {e}")
            return False

    def _process_demotivator(self, params: Any, reply_msg: MessageObject, title: str, subtitle: str):
        try:
            log("[Demotivator] Starting photo processing...")
            photo_path = self._get_photo_path(reply_msg)
            if not photo_path:
                run_on_ui_thread(lambda: BulletinHelper.show_error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
                return

            log(f"[Demotivator] Photo path: {photo_path}")
            log("[Demotivator] Creating demotivator...")
            
            demotivator_path = self._create_demotivator(photo_path, title, subtitle)
            if not demotivator_path:
                run_on_ui_thread(lambda: BulletinHelper.show_error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."))
                return

            log(f"[Demotivator] Demotivator created: {demotivator_path}")
            log("[Demotivator] Sending demotivator...")
            self._send_demotivator(params, demotivator_path)
        except Exception as e:
            log(f"[Demotivator] Error processing: {e}\n{traceback.format_exc()}")
            error_msg = str(e)
            if "PIL" in error_msg or "Image" in error_msg:
                self._send_error(params, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            else:
                self._send_error(params, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞: {error_msg}")

    def _get_photo_path(self, message_obj: MessageObject) -> Optional[str]:
        try:
            if not self._has_photo(message_obj):
                return None

            current_account = UserConfig.selectedAccount
            file_loader = FileLoader.getInstance(current_account)

            file_path_obj = file_loader.getPathToMessage(message_obj.messageOwner)
            if file_path_obj:
                file_path = file_path_obj.getAbsolutePath()
                log(f"[Demotivator] Expected file path: {file_path}")

                if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                    log("[Demotivator] Photo already exists in cache.")
                    return file_path

            log("[Demotivator] Photo not found in cache, trying to load...")
            return self._download_photo_sync(message_obj)

        except Exception as e:
            log(f"[Demotivator] Error in _get_photo_path: {e}\n{traceback.format_exc()}")
            return None

    def _download_photo_sync(self, message_obj: MessageObject) -> Optional[str]:
        try:
            media = message_obj.messageOwner.media
            if not isinstance(media, TLRPC.TL_messageMediaPhoto):
                return None

            photo = media.photo
            if not photo or not photo.sizes:
                return None

            largest_size = None
            max_dim = 0
            for size in photo.sizes:
                if isinstance(size, TLRPC.TL_photoSize):
                    dim = max(size.w, size.h)
                    if dim > max_dim:
                        max_dim = dim
                        largest_size = size
            if not largest_size:
                largest_size = photo.sizes[-1]

            current_account = UserConfig.selectedAccount
            file_loader = FileLoader.getInstance(current_account)

            file_path_obj = file_loader.getPathToAttach(largest_size, True)
            if not file_path_obj:
                log("[Demotivator] Could not get file path for photo size.")
                return None

            file_path = file_path_obj.getAbsolutePath()

            if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                log(f"[Demotivator] Photo found at: {file_path}")
                return file_path

            image_location = ImageLocation.getForPhoto(largest_size, photo)
            if image_location:
                log("[Demotivator] Starting photo download...")
                file_loader.loadFile(image_location, message_obj, "jpg", FileLoader.PRIORITY_HIGH, 1)

                timeout = 30
                for _ in range(timeout):
                    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                        log(f"[Demotivator] Photo downloaded successfully: {file_path}")
                        return file_path
                    time.sleep(1)

                log("[Demotivator] Photo download timed out.")
                return None
            else:
                log("[Demotivator] Could not create ImageLocation.")
                return None

        except Exception as e:
            log(f"[Demotivator] Error in _download_photo_sync: {e}\n{traceback.format_exc()}")
            return None

    def _create_demotivator(self, photo_path: str, title: str, subtitle: str) -> Optional[str]:
        try:
            if not os.path.exists(photo_path) or os.path.getsize(photo_path) == 0:
                log(f"[Demotivator] Photo file invalid: {photo_path}")
                return None

            log(f"[Demotivator] Creating demotivator with title: '{title}', subtitle: '{subtitle}'")
            
            img = Image.open(photo_path).convert("RGB")
            img_width, img_height = img.size
            max_img_width = 600
            if img_width > max_img_width:
                img = img.resize((max_img_width, int(img_height * max_img_width / img_width)), Image.Resampling.LANCZOS)
                img_width, img_height = img.size

            border_width = 20
            inner_border, outer_border = 5, border_width
            inner_frame_width = img_width + inner_border * 2
            inner_frame_height = img_height + inner_border * 2
            canvas_width = inner_frame_width + outer_border * 2

            # –í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            font_index = self.get_setting("font_family", 0)
            title_font = None
            subtitle_font = None
            
           
            if font_index == 3:
                custom_font_url = self.get_setting("custom_font_path", "").strip()
                if custom_font_url and custom_font_url.startswith(('http://', 'https://')):
                    try:
                        custom_font_file = File(self._temp_dir, "custom_font.ttf").getAbsolutePath()
                        custom_url_file = File(self._temp_dir, "custom_font_url.txt").getAbsolutePath()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å—Å—ã–ª–∫–∞
                        should_download = True
                        if os.path.exists(custom_font_file) and os.path.exists(custom_url_file):
                            try:
                                with open(custom_url_file, 'r') as f:
                                    saved_url = f.read().strip()
                                if saved_url == custom_font_url:
                                    should_download = False
                                    log(f"[Demotivator] Custom font URL unchanged, using cached font")
                            except Exception as e:
                                log(f"[Demotivator] Error reading saved URL: {e}")
                        
                        if should_download:
                            response = requests.get(custom_font_url, verify=False)
                            with open(custom_font_file, 'wb') as f:
                                f.write(response.content)
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
                            with open(custom_url_file, 'w') as f:
                                f.write(custom_font_url)
                            log(f"[Demotivator] Downloaded new custom font from: {custom_font_url}")
                        
                        if os.path.exists(custom_font_file):
                            title_font = ImageFont.truetype(custom_font_file, 48)
                            subtitle_font = ImageFont.truetype(custom_font_file, 32)
                            log(f"[Demotivator] Using custom font: {custom_font_file}")
                        else:
                            raise Exception("Custom font file not found")
                    except Exception as e:
                        log(f"[Demotivator] Failed to load custom font: {e}")
                        # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —à—Ä–∏—Ñ—Ç–∞–º
                        font_index = 0
                else:
                    log("[Demotivator] No valid custom font URL provided")
                    font_index = 0
            
            # –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            if not title_font:
                font_key = list(FONTS.keys())[font_index] if isinstance(font_index, int) and font_index < len(FONTS) else "NotoSansJP"
                font_file_name = f"{font_key}-Regular.ttf"
                try:
                    font_path = File(self._temp_dir, font_file_name).getAbsolutePath()
                    if os.path.exists(font_path):
                        title_font = ImageFont.truetype(font_path, 48)
                        subtitle_font = ImageFont.truetype(font_path, 32)
                        log(f"[Demotivator] Using downloaded font: {font_path}")
                    else:
                        raise Exception("Downloaded font not found")
                except Exception as e:
                    log(f"[Demotivator] Failed to load downloaded font: {e}")
                    # Fallback –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —à—Ä–∏—Ñ—Ç–∞–º
                    try:
                        title_font = ImageFont.truetype("/system/fonts/Roboto-Bold.ttf", 48)
                        subtitle_font = ImageFont.truetype("/system/fonts/Roboto-Regular.ttf", 32)
                        log('[Demotivator] Using system fonts')
                    except:
                        log('[Demotivator] Using default font')
                        title_font = ImageFont.load_default()
                        subtitle_font = ImageFont.load_default()

            temp_canvas = Image.new("RGB", (canvas_width, 1000), "black")
            temp_draw = ImageDraw.Draw(temp_canvas)

            text_area_height = 40

            if title:
                try:
                    title_lines = self._wrap_text(temp_draw, title, title_font, canvas_width - 40)
                    for line in title_lines:
                        bbox = temp_draw.textbbox((0, 0), line, font=title_font)
                        line_height = bbox[3] - bbox[1] if bbox[3] > bbox[1] else 48
                        text_area_height += line_height + max(5, 48 // 10)
                except Exception as e:
                    log(f"[Demotivator] Error processing title text: {e}")
                    text_area_height += 60

            if subtitle:
                if title:
                    text_area_height += max(10, 48 // 5)
                try:
                    subtitle_lines = self._wrap_text(temp_draw, subtitle, subtitle_font, canvas_width - 40)
                    for line in subtitle_lines:
                        bbox = temp_draw.textbbox((0, 0), line, font=subtitle_font)
                        line_height = bbox[3] - bbox[1] if bbox[3] > bbox[1] else 32
                        text_area_height += line_height + max(3, 32 // 12)
                except Exception as e:
                    log(f"[Demotivator] Error processing subtitle text: {e}")
                    text_area_height += 40

            text_area_height += 40
            text_area_height = max(text_area_height, 120)

            log(f"[Demotivator] Calculated text area height: {text_area_height}")

            canvas_height = inner_frame_height + outer_border * 2 + text_area_height
            canvas = Image.new("RGB", (canvas_width, canvas_height), "black")
            inner_frame = Image.new("RGB", (inner_frame_width, inner_frame_height), "white")
            inner_frame.paste(img, (inner_border, inner_border))
            canvas.paste(inner_frame, (outer_border, outer_border))

            draw = ImageDraw.Draw(canvas)

            text_y_start = outer_border + inner_frame_height + 20
            y_offset = text_y_start

            if title:
                try:
                    title_lines = self._wrap_text(draw, title, title_font, canvas_width - 40)
                    for line in title_lines:
                        bbox = draw.textbbox((0, y_offset), line, font=title_font)
                        text_x = (canvas_width - (bbox[2] - bbox[0])) // 2
                        draw.text((text_x, y_offset), line, fill="white", font=title_font)
                        line_height = bbox[3] - bbox[1] if bbox[3] > bbox[1] else 48
                        y_offset += line_height + max(5, 48 // 10)
                except Exception as e:
                    log(f"[Demotivator] Error drawing title: {e}")

            if subtitle:
                subtitle_y = y_offset + max(10, 48 // 5) if title else text_y_start + 40
                try:
                    subtitle_lines = self._wrap_text(draw, subtitle, subtitle_font, canvas_width - 40)
                    for line in subtitle_lines:
                        bbox = draw.textbbox((0, subtitle_y), line, font=subtitle_font)
                        text_x = (canvas_width - (bbox[2] - bbox[0])) // 2
                        draw.text((text_x, subtitle_y), line, fill="white", font=subtitle_font)
                        line_height = bbox[3] - bbox[1] if bbox[3] > bbox[1] else 32
                        subtitle_y += line_height + max(3, 32 // 12)
                except Exception as e:
                    log(f"[Demotivator] Error drawing subtitle: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            cache_dir = ApplicationLoader.getFilesDirFixed()
            if not cache_dir:
                log("[Demotivator] Could not get cache directory")
                return None
                
            output_path = File(cache_dir, f"demotivator_{uuid.uuid4()}.png").getAbsolutePath()
            canvas.save(output_path, "PNG")
            log(f"[Demotivator] Demotivator saved to: {output_path}")
            return output_path
        except Exception as e:
            log(f"[Demotivator] Error creating demotivator: {e}\n{traceback.format_exc()}")
            return None

    def _wrap_text(self, draw, text, font, max_width):
        words = text.split()
        if not words: return [""]
        lines = []
        current_line = words[0]
        for word in words[1:]:
            bbox = draw.textbbox((0, 0), current_line + " " + word, font=font)
            if (bbox[2] - bbox[0]) <= max_width:
                current_line += " " + word
            else:
                lines.append(current_line)
                current_line = word
        lines.append(current_line)
        return lines

    def _send_demotivator(self, params, out_path):
        try:
            helper = get_send_messages_helper()
            generated_photo = helper.generatePhotoSizes(out_path, None)
            if not generated_photo:
                self._send_error(params, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            send_params = {
                "peer": params.peer,
                "photo": generated_photo,
                "path": out_path,
                "replyToMsg": params.replyToMsg,
                "replyToTopMsg": params.replyToTopMsg
            }
            run_on_ui_thread(lambda: send_message(send_params))
            self._delete_file_delayed(out_path)
        except Exception as e:
            log(f"[Demotivator] Error sending demotivator: {e}")
            self._send_error(params, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    def _send_error(self, params, text):
        try:
            BulletinHelper.show_error(text)
        except Exception:
            pass
        send_message({
            "peer": params.peer,
            "message": text
        })

    def _delete_file_delayed(self, path: str, delay: int = 30):
        def action():
            try:
                time.sleep(delay)
                if os.path.exists(path):
                    os.remove(path)
                    log(f"[Demotivator] Deleted temp file: {path}")
            except Exception as e:
                log(f"[Demotivator] Error deleting file: {e}")
        import threading
        threading.Thread(target=action, daemon=True).start()

    def _handle_show_faq_alert_click(self, view):
        title = locali.get_string("FONT_FAQ_TITLE")
        text = locali.get_string("FONT_FAQ_TEXT")
        close_button = locali.get_string("ALERT_CLOSE_BUTTON")
        self.alert_manager.show_info_alert(title, text, close_button)

    def create_settings(self):
        lang = Locale.getDefault().getLanguage()
        font_items = ["Noto Sans JP", "Times New Roman", "Impact", "–ö–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç [–≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–û]" if lang.startswith('ru') else "Custom font [EXPERIMENTAL]"]
        font_text = "–®—Ä–∏—Ñ—Ç –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞" if lang.startswith('ru') else "Demotivator font"
        custom_font_text = "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç" if lang.startswith('ru') else "Custom font URL"
        custom_font_subtext = "–°—Å—ã–ª–∫–∞ –Ω–∞ .ttf —Ñ–∞–π–ª –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ" if lang.startswith('ru') else "URL to .ttf file on the internet"
           
        return [
            Header(text=font_text),
            Selector(
                key="font_family",
                text=font_text,
                default=0,
                items=font_items,
                icon="msg_photo_text_regular"
            ),
            Input(
                key="custom_font_path",
                text=custom_font_text,
                subtext=custom_font_subtext,
                default="",
                icon="msg_photo_text_regular"
            ),
            Divider(),
            Text(
                text="–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã" if lang.startswith('ru') else "How to use custom fonts",
                icon="msg_info",
                on_click=self._handle_show_faq_alert_click
            )
        ]

