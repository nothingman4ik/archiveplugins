from base_plugin import BasePlugin, MethodHook, MethodReplacement, HookResult, HookStrategy
from client_utils import get_last_fragment
from org.telegram.ui import ChatActivity

# contentView.addView(pinnedMessageView, index, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 50, Gravity.TOP | Gravity.LEFT))
__id__ = "reminder"
__name__ = "Reminder"
__description__ = "Draw a remind in chat\nUsage: .dr {time} | {text} / .rdr"
__author__ = "@shikkatux | @shikaatuxplugins"
__version__ = "1.0.0"
__icon__ = "exteraPlugins/1"
__min_version__ = "11.12.0"
from org.telegram.ui.Components import BlurredFrameLayout, PinnedLineView
from org.telegram.messenger import R
from org.telegram.messenger import AndroidUtilities
from org.telegram.ui.ActionBar import Theme, SimpleTextView
from android.graphics import PorterDuffColorFilter, PorterDuff, Color
from org.telegram.ui.Components import LayoutHelper
from android.widget import TextView, ImageView
from android.content import Context
from java import cast
from android_utils import OnClickListener, OnLongClickListener
from client_utils import get_last_fragment
from java.lang import Integer, Boolean
from hook_utils import find_class
from datetime import datetime
from ui.bulletin import BulletinHelper
import json
import os
from com.chaquo.python import Python


class DictDB:
    def __init__(self, path=f"{str(Python.getPlatform().getApplication().getFilesDir())}/reminder.json"):
        self.path = path
        self.data = {}
        self._load()

    def _load(self):
        if os.path.isfile(self.path):
            try:
                with open(self.path, "r", encoding="utf-8") as f:
                    self.data = json.load(f)
            except (json.JSONDecodepyError, IOError):
                self.data = {}
        else:
            self.data = {}

    def save(self):
        with open(self.path, "w", encoding="utf-8") as f:
            json.dump(self.data, f, indent=4)

    def get(self, key, default=None):
        return self.data.get(key, default)

    def set(self, key, value: dict):
        self.data[key] = value
        self.save()

    def delete(self, key):
        if key in self.data:
            del self.data[key]
            self.save()

    def all_keys(self):
        return list(self.data.keys())

    def get_all(self):
        return self.data


db = DictDB()

class Reminder(MethodHook):
    def __init__(self, plugin):
        self.plugin = plugin
        self.remind = None
        self.moved = False
        

        self.chatInfo = ChatActivity.getClass().getDeclaredField("chatInfo")
        self.chatInfo.setAccessible(True)


    def click(self, time, text, fmt):
        BulletinHelper.show_info(f"{time}\n{text}", get_last_fragment())

    @staticmethod
    def delete(peer):
        db.delete(peer)
        BulletinHelper.show_info(f"Deleted {peer}", get_last_fragment())
    @staticmethod
    def call_isSideMenued(obj):
        try:
            clazz = obj.getClass()
            method = clazz.getDeclaredMethod("isSideMenued")
            method.setAccessible(True)
            result = method.invoke(obj)
            return result
        except Exception as e:
            print(f"ERROR: {e}")
            return False

    def _create_text_view(self,this,context , time, fmt):
        try:
            pinnedNameTextView = find_class("org.telegram.ui.ChatActivity$TrackingWidthSimpleTextView")(this, context)
            pinnedNameTextView.setTextSize(14)
            pinnedNameTextView.setTextColor(this.getThemedColor(Theme.key_chat_topPanelTitle))
            pinnedNameTextView.setTypeface(AndroidUtilities.bold())
            pinnedNameTextView.setText(time)
            return pinnedNameTextView
        except Exception as e:
            self.plugin.log(f"E: {e}")

    def _create_under_text_view(self, this, context, text):
        try:
            pinnedMessageTextView = SimpleTextView(context)
            pinnedMessageTextView.setTextSize(14)
            pinnedMessageTextView.setTextColor(this.getThemedColor(Theme.key_chat_topPanelMessage))
            pinnedMessageTextView.setText(text)
            return pinnedMessageTextView
        except Exception as e:
            self.plugin.log(f"E: {e}")

    def _create_button(self, this, context, peer):
        pinnedListButton = ImageView(context)
        pinnedListButton.setImageResource(R.drawable.msg_close)
        pinnedListButton.setColorFilter(PorterDuffColorFilter(this.getThemedColor(Theme.key_chat_topPanelClose), PorterDuff.Mode.MULTIPLY))
        pinnedListButton.setScaleType(ImageView.ScaleType.CENTER)
        pinnedListButton.setContentDescription("")
        pinnedListButton.setAlpha(1.0)
        pinnedListButton.setOnClickListener(OnClickListener(lambda: self.delete(peer)))
        return pinnedListButton
        
       

    def _create_item(self, this, time, text, fmt, peer):
        remind = BlurredFrameLayout(this.getContext(), this.contentView)
        remind.setTag(1)
        remind.setOnClickListener(OnClickListener(lambda: self.click(time, text, fmt)))
        remind.setBackgroundResource(R.drawable.blockpanel)
        remind.backgroundColor = this.getThemedColor(Theme.key_chat_topPanelBackground)
        remind.backgroundPaddingBottom = AndroidUtilities.dp(2)
        
        remind.getBackground().mutate().setColorFilter(
            PorterDuffColorFilter(this.getThemedColor(Theme.key_chat_topPanelBackground), PorterDuff.Mode.MULTIPLY)
        )

        pinnedLineView = PinnedLineView(this.getContext(), this.themeDelegate)
        pinnedLineView.set(0,1, True)
        remind.setClipChildren(False)
        remind.addView(pinnedLineView, LayoutHelper.createFrame(2, 48, 51, 8, 0, 0, 0))
        left = 64 if self.call_isSideMenued(this) else 0
        remind.addView(self._create_text_view(this, this.getContext(), time, fmt), LayoutHelper.createFrame(-1, 18, 51, 18, 7.3, 44 + left, 0))
        remind.addView(self._create_under_text_view(this, this.getContext(), text), LayoutHelper.createFrame(-1, 18, 51, 18, 25.3, 44 + left, 0))
        remind.addView(self._create_button(this, this.getContext(), peer), LayoutHelper.createFrame(36, 48, 53, 0, 0, 7, 0))
        return remind
        
        
    def after_hooked_method(self, param):
        try:
            this = param.thisObject
            #id = self.chatInfo.get(this).id
            #self.plugin.log(id)
            if this.currentChat is not None:
                cur = str(this.currentChat.id)
            else:
                cur = str(this.currentUser.id)
            
            if (db.get(cur)):
                data = db.get(cur)
                self.remind = self._create_item(this, data["time"], data["text"], data["fmt"], cur)
                self.remind.setEnabled(not this.isInPreviewMode())
                this.contentView.addView(self.remind, -1, LayoutHelper.createFrame(-1, 50, 51, 0, 0, 0, 0))
                
                self.remind.invalidate()
                self.remind.requestLayout()
            
        except Exception as e:
            self.plugin.log(f"ERROR: x{e}")




class MV(MethodHook):
    def __init__(self, plugin):
        self.plugin = plugin
        self.floating_date = ChatActivity.getClass().getDeclaredField("floatingDateView")
        self.floating_date.setAccessible(True)

        self.chatListView = ChatActivity.getClass().getDeclaredField("chatListView")
        self.chatListView.setAccessible(True)

        self.chatListViewPaddingTop = ChatActivity.getClass().getDeclaredField("chatListViewPaddingTop")
        self.chatListViewPaddingTop.setAccessible(True)

        self.floatingDateViewOffset = ChatActivity.getClass().getDeclaredField("floatingDateViewOffset")
        self.floatingDateViewOffset.setAccessible(True)
    def after_hooked_method(self, param):
        try:
            this = param.thisObject
            self.floating_date.get(param.thisObject).setTranslationY(self.chatListView.get(this).getTranslationY() - AndroidUtilities.dp(4) + self.chatListViewPaddingTop.get(this) + self.floatingDateViewOffset.get(this) + AndroidUtilities.dp(0))
        except Exception as e:
            self.plugin.log(f"ERROR: {e}")

class Mover(MethodHook):
    def __init__(self, plugin, hook_create):
        self.plugin = plugin
        self.hook_create = hook_create
        self.floating_date = ChatActivity.getClass().getDeclaredField("floatingDateView")
        self.floating_date.setAccessible(True)

        self.chatListView = ChatActivity.getClass().getDeclaredField("chatListView")
        self.chatListView.setAccessible(True)

        self.chatListViewPaddingTop = ChatActivity.getClass().getDeclaredField("chatListViewPaddingTop")
        self.chatListViewPaddingTop.setAccessible(True)


        self.floatingDateViewOffset = ChatActivity.getClass().getDeclaredField("floatingDateViewOffset")
        self.floatingDateViewOffset.setAccessible(True)

    def after_hooked_method(self, param):
        try:
            this = param.thisObject
            self.hook_create.remind.animate().translationY(AndroidUtilities.dp(48)).setDuration(150).start()
            self.floating_date.get(param.thisObject).setTranslationY(self.chatListView.get(this).getTranslationY() - AndroidUtilities.dp(4) + self.chatListViewPaddingTop.get(this) + self.floatingDateViewOffset.get(this) + AndroidUtilities.dp(52))
        except Exception as e:
            self.plugin.log(f"ERROR: {e}")


class B(BasePlugin):

    def on_send_message_hook(self,account, params):
        try:
            peer = str(params.peer).replace("-", "")
            if params.message.startswith(".dr "):
                self.log("found!")
                if "|" in params.message:
                    time, text = params.message.split(maxsplit=1)[1].split("|")
                    t, fmt = self.parse_datetime(time.strip())
                    if fmt != -1:
                        db.set(peer, {"time": str(t.strftime(fmt)),"text": text.strip(),"fmt": fmt})
                    return HookResult(strategy=HookStrategy.CANCEL)
                else:
                    BulletinHelper.show_error("Syntax error \nUsage: {time} | {text}", get_last_fragment())
                    return HookResult(strategy=HookStrategy.CANCEL)
            if params.message.split()[0] == ".rdr":
                db.delete(peer)
                return HookResult(strategy=HookStrategy.CANCEL)
        except Exception as e:
            self.log(f"E: {e}")
                
    @staticmethod
    def parse_datetime(user_input):
        formats = ["%d.%m.%Y %H:%M", "%d.%m.%Y", "%d.%m", "%d.%m.%Y", "%H:%M"]
        for fmt in formats:
            try:
                return datetime.strptime(user_input, fmt), fmt
            except ValueError:
                continue
        BulletinHelper.show_error("Invalid time format", get_last_fragment())
        return -1, -1

    def on_plugin_load(self):
        try:
            
            
            self.add_on_send_message_hook()
            self.hook_create = Reminder(self)
            b = ChatActivity.getClass().getDeclaredMethod("createView", Context.getClass())
            b.setAccessible(True)

            ChatActivity.getClass().getDeclaredMethod("isSideMenued").setAccessible(True)
            self.hook_method(b, self.hook_create, priority=10)

            n = ChatActivity.getClass().getDeclaredMethod("updatePinnedMessageView", Boolean.TYPE, Integer.TYPE)
            n.setAccessible(True)
            self.hook_method(n, Mover(self, self.hook_create), priority=10)

            time_mover = ChatActivity.getClass().getDeclaredMethod("updateMessagesVisiblePart", Boolean.TYPE)
            self.hook_method(time_mover, MV(self), priority=10)
            t = ChatActivity.getClass().getDeclaredMethod("updateChatListViewTopPadding")
            t.setAccessible(True)
            self.hook_method(t, MV(self), priority=10)
        except Exception as e:
            self.log(f"E: {e}")
