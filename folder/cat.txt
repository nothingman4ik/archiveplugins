import os
import uuid
import requests
from java.util import Locale, ArrayList
from org.telegram.ui.ActionBar import AlertDialog
from ui.settings import Header, Divider, Switch, Input
from base_plugin import BasePlugin, HookResult, HookStrategy
from android_utils import run_on_ui_thread
from client_utils import get_send_messages_helper, get_last_fragment, run_on_queue
from java.io import File
from org.telegram.messenger import ApplicationLoader
from markdown_utils import parse_markdown
from ui.bulletin import BulletinHelper

__id__ = "cat"
__name__ = "Cat"
__description__ = "Send a random cat image with .cat"
__author__ = "@exteraDev"
__min_version__ = "11.9.0"
__icon__ = "exteraDevPlugins/9"

CAT_API_URL = "https://api.thecatapi.com/v1/images/search"
CAT_API_KEY = "ylX4blBYT9FaoVd6OhvR"

class CatPlugin(BasePlugin):
    def create_settings(self):
        lang = Locale.getDefault().getLanguage()
        if lang.startswith("pt"):
            header = "Configura√ß√µes do Cat"
            usage = "Uso: .cat"
            disclaimer = (
                "‚ö†Ô∏è Para mostrar informa√ß√µes detalhadas do gato, "
                "voc√™ precisa inserir uma chave de API v√°lida, obtida em https://thecatapi.com/"
            )
            caption_switch = "Mostrar informa√ß√µes na legenda"
            caption_sub = "Ative para mostrar informa√ß√µes do gato"
            breed_switch = "Exibir ra√ßa"
            origin_switch = "Exibir origem"
            temperament_switch = "Exibir temperamento"
            life_span_switch = "Exibir expectativa de vida"
            weight_switch = "Exibir peso"
            description_switch = "Exibir descri√ß√£o"
        elif lang.startswith("ru"):
            header = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Cat"
            usage = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .cat"
            disclaimer = (
                "‚ö†Ô∏è –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ç–µ "
                "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π API-–∫–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ https://thecatapi.com/"
            )
            caption_switch = "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–æ–¥–ø–∏—Å–∏"
            caption_sub = "–í–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ç–µ"
            breed_switch = "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä–æ–¥—É"
            origin_switch = "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"
            temperament_switch = "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç"
            life_span_switch = "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏"
            weight_switch = "–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å"
            description_switch = "–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
        else:
            header = "Cat Settings"
            usage = "Usage: .cat"
            disclaimer = (
                "‚ö†Ô∏è To show detailed cat info, you must enter a valid API key from https://thecatapi.com/"
            )
            caption_switch = "Show information in caption"
            caption_sub = "Enable to show cat info"
            breed_switch = "Show breed"
            origin_switch = "Show origin"
            temperament_switch = "Show temperament"
            life_span_switch = "Show life span"
            weight_switch = "Show weight"
            description_switch = "Show description"

        show_caption = self.get_setting("show_caption", False)
        settings = [
            Header(text=header),
            Divider(text=disclaimer),
            Input(key="api_key", text="API Key", icon="msg2_permissions", default=CAT_API_KEY, subtext="TheCatAPI Key"),
            Switch(key="show_caption", text=caption_switch, icon="msg_markread", default=False, subtext=caption_sub),
        ]
        if show_caption:
            settings += [
                Switch(key="show_breed", text=breed_switch, default=False),
                Switch(key="show_origin", text=origin_switch, default=False),
                Switch(key="show_temperament", text=temperament_switch, default=False),
                Switch(key="show_life_span", text=life_span_switch, default=False),
                Switch(key="show_weight", text=weight_switch, default=False),
                Switch(key="show_description", text=description_switch, default=False),
            ]
        settings.append(Divider(text=usage))
        return [s for s in settings if s is not None]

    def on_plugin_load(self):
        self.add_on_send_message_hook()
        self.log("Plugin loaded!")
        pass
    
    def on_plugin_unload(self):
        self.log("Plugin unloaded!")
        pass

    def _get_caption_and_entities(self, data):
        show_caption = self.get_setting("show_caption", False)
        if not show_caption:
            return None, None
        show_breed = self.get_setting("show_breed", False)
        show_origin = self.get_setting("show_origin", False)
        show_temperament = self.get_setting("show_temperament", False)
        show_life_span = self.get_setting("show_life_span", False)
        show_weight = self.get_setting("show_weight", False)
        show_description = self.get_setting("show_description", False)
        breeds = data.get("breeds", [])
        breed = breeds[0] if breeds else {}
        caption_lines = []

        if show_breed and breed.get("name"):
            caption_lines.append(f"*{breed['name']}*")
        if show_origin and breed.get("origin"):
            caption_lines.append(f"üåç *Origin*: {breed['origin']}")
        if show_temperament and breed.get("temperament"):
            caption_lines.append(f"*Temperament*: {breed['temperament']}")
        if show_life_span and breed.get("life_span"):
            caption_lines.append(f"*Life*: {breed['life_span']} years")
        if show_weight and breed.get("weight", {}).get("metric"):
            caption_lines.append(f"*Weight*: {breed['weight']['metric']} kg")
        if show_description and breed.get("description"):
            caption_lines.append(f"*Description*: {breed['description']}")
        if not caption_lines:
            return None, None
        caption = "\n".join(caption_lines)
        parsed = parse_markdown(caption)
        arr = ArrayList()
        for ent in parsed.entities:
            arr.add(ent.to_tlrpc_object())
        return parsed.text, arr

    def _download_cat_image(self, params, progress_dialog):
        try:
            api_key = self.get_setting("api_key", CAT_API_KEY)
            headers = {"x-api-key": api_key}
            resp = requests.get(
                CAT_API_URL + "?limit=1&has_breeds=1&api_key=" + api_key + "&include_breeds=1",
                headers=headers,
                timeout=10
            )
            if resp.status_code != 200:
                BulletinHelper.show_error("Failed to fetch cat image")
                if progress_dialog: progress_dialog.dismiss()
                return
            items = resp.json()
            if not items or not items[0].get("url"):
                BulletinHelper.show_error("No image found")
                if progress_dialog: progress_dialog.dismiss()
                return
            data = items[0]
            img_url = data["url"]
            img_resp = requests.get(img_url, stream=True, timeout=15)
            if img_resp.status_code != 200:
                BulletinHelper.show_error("Failed to download image")
                if progress_dialog: progress_dialog.dismiss()
                return
            base_dir = ApplicationLoader.getFilesDirFixed()
            temp_dir = File(base_dir, "exteraGram CatImages")
            if not temp_dir.exists():
                temp_dir.mkdirs()
            ext = img_url.split(".")[-1].split("?")[0]
            filename = f"cat_{uuid.uuid4()}.{ext}"
            temp_path = File(temp_dir, filename).getAbsolutePath()
            with open(temp_path, "wb") as f:
                for chunk in img_resp.iter_content(8192):
                    if chunk:
                        f.write(chunk)
            if not os.path.exists(temp_path) or os.path.getsize(temp_path) == 0:
                BulletinHelper.show_error("Image file not created")
                if progress_dialog: progress_dialog.dismiss()
                return
            send_helper = get_send_messages_helper()
            generated_photo = send_helper.generatePhotoSizes(temp_path, None)
            if not generated_photo:
                BulletinHelper.show_error("Failed to process image")
                os.remove(temp_path)
                if progress_dialog: progress_dialog.dismiss()
                return
            params.photo = generated_photo
            params.path = temp_path
            caption, entities = self._get_caption_and_entities(data)
            if caption:
                params.caption = caption
                params.entities = entities if entities is not None else ArrayList()
            params.message = None
            if not hasattr(params, "entities") or params.entities is None:
                params.entities = ArrayList()
            run_on_ui_thread(lambda: get_send_messages_helper().sendMessage(params))
            def cleanup():
                import time
                time.sleep(10)
                try:
                    os.remove(temp_path)
                except Exception:
                    pass
            run_on_queue(cleanup)
        except Exception as e:
            BulletinHelper.show_error(f"Error: {e}")
        finally:
            if progress_dialog:
                try: progress_dialog.dismiss()
                except Exception: pass

    def on_send_message_hook(self, account, params):
        if not hasattr(params, "message") or not isinstance(params.message, str):
            return HookResult()
        msg = params.message.strip()
        if not msg.startswith(".cat"):
            return HookResult()
        try:
            progress_dialog = AlertDialog(get_last_fragment().getParentActivity(), 3)
            progress_dialog.setMessage("Fetching a cat...")
            progress_dialog.show()
        except Exception:
            progress_dialog = None
        run_on_queue(lambda: self._download_cat_image(params, progress_dialog))
        return HookResult(strategy=HookStrategy.CANCEL)