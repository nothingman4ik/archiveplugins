from base_plugin import BasePlugin, HookResult, HookStrategy
from org.telegram.messenger import ApplicationLoader
import os
import json
from datetime import datetime

__id__ = "calendarplugin"
__name__ = "Calendar"
__description__ = "–ü–∏—à–∏ .day —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π: .addday 01.09 –î–µ–Ω—å –ó–Ω–∞–Ω–∏–π. –£–¥–∞–ª–∏—Ç—å: .removeday 01.09"
__author__ = "@BEBROVICH666"
__version__ = "1.0"
__icon__ = "KotikiTop72/2"
__min_version__ = "11.9.0"

class CalendarPlugin(BasePlugin):
    def on_plugin_load(self):
        self.add_on_send_message_hook()
        self.data_path = os.path.join(ApplicationLoader.applicationContext.getFilesDir().getAbsolutePath(), "calendar_data.json")
        if not os.path.exists(self.data_path):
            with open(self.data_path, "w", encoding="utf-8") as f:
                json.dump({}, f, ensure_ascii=False)

    def load_data(self):
        with open(self.data_path, "r", encoding="utf-8") as f:
            return json.load(f)

    def save_data(self, data):
        with open(self.data_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False)

    def on_send_message_hook(self, account, params) -> HookStrategy:
        if not isinstance(params.message, str):
            return HookResult()

        msg = params.message.strip()

        try:
            data = self.load_data()
        except Exception as e:
            data = {}

        today = datetime.now().strftime("%d.%m")

        if msg == ".day":
            if today in data:
                params.message = f"üìÖ –°–µ–≥–æ–¥–Ω—è: {data[today]}"
            else:
                params.message = "üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç."
            return HookResult(strategy=HookStrategy.MODIFY, params=params)

        if msg.startswith(".addday "):
            try:
                rest = msg[8:].strip()
                date_part, event_text = rest.split(" ", 1)
                data[date_part] = event_text
                self.save_data(data)
                params.message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {date_part} ‚Äî {event_text}"
            except:
                params.message = "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: .addday 31.08 –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"
            return HookResult(strategy=HookStrategy.MODIFY, params=params)

        if msg.startswith(".removeday "):
            try:
                date_part = msg[11:].strip()
                if date_part in data:
                    del data[date_part]
                    self.save_data(data)
                    params.message = f"üóë –£–¥–∞–ª–µ–Ω–æ: {date_part}"
                else:
                    params.message = "‚ùå –¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç."
            except:
                params.message = "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: .removeday 31.08"
            return HookResult(strategy=HookStrategy.MODIFY, params=params)

        return HookResult()