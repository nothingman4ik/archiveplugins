# -*- coding: utf-8 -*-

import traceback

from base_plugin import BasePlugin, MenuItemData, MenuItemType, MethodHook, HookResult, HookStrategy
from android_utils import run_on_ui_thread, log
from client_utils import get_last_fragment
from ui.alert import AlertDialogBuilder
from ui.bulletin import BulletinHelper

from org.telegram.messenger import AndroidUtilities, MessageObject
from org.telegram.ui.ActionBar import Theme
from org.telegram.ui import ChatActivity
from org.telegram.ui.Cells import ChatMessageCell
from java.lang import Boolean

from hook_utils import find_class

try:
    import zwylib
except ImportError:
    zwylib = None

# –ù–∞–¥–µ—é—Å—å –ª—é–¥–∏ –±—É–¥—É—Ç —á–∏—Ç–∞—Ç—å –≥—Ä–µ–±–∞–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤—Å–µ —Ç–∞–∫–∏ —É—Å—Ç–∞–Ω–æ–≤—è—Ç zwyLib
__id__ = "LocalEdictor"
__name__ = "Local Edictor"
__description__ = (
    "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–æ!!! \n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏. –ï—Å—Ç—å —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏ —Å–±—Ä–æ—Å –ø—Ä–∞–≤–æ–∫. \n\n\n‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è‚õî –ë–ï–ó –ë–ò–ë–õ–ò–û–¢–ï–ö–ò zwyLib –ù–ï –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨ –Ø –ù–ï –®–£–ß–£!!! ‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è"
)
__author__ = "@Nikita218000"
__version__ = "1.1.0"
__min_version__ = "11.12.1"
__icon__ = "IconForPlugins_by_TgEmodziBot/2"


class LocalHook(MethodHook):
    def __init__(self, plugin):
        self.plugin = plugin

    def before_hooked_method(self, param):
        if not self.plugin.edited_messages_cache:
            return HookResult(HookStrategy.DEFAULT)
        try:
            message_object = param.args[0]
            if message_object is None:
                return HookResult(HookStrategy.DEFAULT)
            message_id = message_object.getId()
            dialog_id = message_object.getDialogId()
            key = f"{message_id}_{dialog_id}"
            if key in self.plugin.edited_messages_cache.content:
                new_text = self.plugin.edited_messages_cache.content[key]
                if new_text and isinstance(new_text, str):
                    message_object.applyNewText(new_text)
                    message_object.forceUpdate = True
        except Exception as e:
            log(f"[{__name__}] Error in setMessageContent hook: {str(e)}")
            traceback.print_exc()
        return HookResult(HookStrategy.DEFAULT)


class LocalEditPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.edited_messages_cache = None

    def on_plugin_load(self):
        if zwylib is None:
            log(f"[{__name__}] zwylib not found! Plugin will not work.")
            run_on_ui_thread(lambda: BulletinHelper.show_error("zwylib –Ω–µ –Ω–∞–π–¥–µ–Ω! Local Editor –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –¢—ã –Ω–µ —á–∏—Ç–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ?"))
            return
        try:
            self.edited_messages_cache = zwylib.JsonCacheFile("LocalEdictor_data", {})

            self.add_menu_item(MenuItemData(
                menu_type=MenuItemType.MESSAGE_CONTEXT_MENU,
                text="–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ",
                on_click=self.handle_edit_click,
                icon="msg_edit"
            ))
            self.add_menu_item(MenuItemData(
                menu_type=MenuItemType.CHAT_ACTION_MENU,
                text="–°–±—Ä–æ—Å–∏—Ç—å –ª–æ–∫. –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                on_click=self.handle_reset_click,
                icon="msg_delete"
            ))
            self.add_menu_item(MenuItemData(
                menu_type=MenuItemType.CHAT_ACTION_MENU,
                text="–û–±–Ω–æ–≤–∏—Ç—å UI",
                on_click=self.handle_refresh_click,
                icon="avd_flip"
            ))

            ChatMessageCellClass = find_class("org.telegram.ui.Cells.ChatMessageCell")
            method = ChatMessageCellClass.getClass().getDeclaredMethod(
                "setMessageContent",
                MessageObject.getClass(),
                MessageObject.GroupedMessages.getClass(),
                Boolean.TYPE,
                Boolean.TYPE,
                Boolean.TYPE
            )
            self.hook = self.hook_method(method, LocalHook(self), priority=10)
            log(f"[{__name__}] Plugin loaded successfully.")
        except Exception as e:
            log(f"[{__name__}] Error loading plugin: {str(e)}")

    def on_plugin_unload(self):
        log(f"[{__name__}] Plugin unloaded. Plaki Plaki")

    def handle_edit_click(self, context):
        if not self.edited_messages_cache:
            BulletinHelper.show_error("–û—à–∏–±–∫–∞: –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (zwylib –£–ñ–ï –£–°–¢–ê–ù–û–í–ò?).")
            return
        try:
            message_object = context.get("message")
            if not message_object:
                BulletinHelper.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è bruh.")
                return

            last_fragment = get_last_fragment()
            if not last_fragment or not last_fragment.getParentActivity():
                BulletinHelper.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ bruh.")
                return

            activity = last_fragment.getParentActivity()
            LinearLayout = find_class("android.widget.LinearLayout")
            EditText = find_class("android.widget.EditText")

            layout = LinearLayout(activity)
            layout.setOrientation(LinearLayout.VERTICAL)
            padding = AndroidUtilities.dp(20)
            layout.setPadding(padding, AndroidUtilities.dp(10), padding, AndroidUtilities.dp(10))

            edit_text = EditText(activity)
            message_id = message_object.getId()
            dialog_id = message_object.getDialogId()
            key = f"{message_id}_{dialog_id}"
            original_text = str(message_object.messageText) if message_object.messageText else ""
            current_text = self.edited_messages_cache.content.get(key, original_text)

            edit_text.setText(current_text)
            edit_text.setHint("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
            edit_text.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
            edit_text.setHintTextColor(Theme.getColor(Theme.key_dialogTextHint))

            layout.addView(edit_text)

            builder = AlertDialogBuilder(activity)
            builder.set_title("–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            builder.set_view(layout)

            def on_save_click(dialog, which):
                new_text = edit_text.getText().toString()
                self._apply_local_edit(message_object, new_text)
                dialog.dismiss()

            builder.set_positive_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_save_click)
            builder.set_negative_button("–û—Ç–º–µ–Ω–∞", lambda d, w: d.dismiss())
            run_on_ui_thread(builder.show)
        except Exception as e:
            log(f"[{__name__}] Error handling edit click: {str(e)}")
            traceback.print_exc()
            BulletinHelper.show_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    def handle_reset_click(self, context):
        if not self.edited_messages_cache:
            BulletinHelper.show_error("–û—à–∏–±–∫–∞: –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (zwylib?).")
            return
        try:
            self._reset_messages()
        except Exception as e:
            log(f"[{__name__}] Error handling reset click: {str(e)}")
            traceback.print_exc()

    def handle_refresh_click(self, context):
        try:
            self._refresh_visible_messages()
            BulletinHelper.show_success("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω! üò∏")
        except Exception as e:
            log(f"[{__name__}] Error handling refresh click: {str(e)}")
            traceback.print_exc()
            BulletinHelper.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")

    def _apply_local_edit(self, message_object, new_text):
        try:
            message_id = message_object.getId()
            dialog_id = message_object.getDialogId()
            key = f"{message_id}_{dialog_id}"

            if not new_text or not isinstance(new_text, str) or not new_text.strip():
                if key in self.edited_messages_cache.content:
                    del self.edited_messages_cache.content[key]
                    self.edited_messages_cache.write()
                    log(f"[{__name__}] Removed edit for message {message_id} in dialog {dialog_id}.")
                    BulletinHelper.show_success("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! üò∏")
                else:
                    return
            else:
                self.edited_messages_cache.content[key] = new_text
                self.edited_messages_cache.write()
                log(f"[{__name__}] Saved edited text for message {message_id} in dialog {dialog_id}.")
                BulletinHelper.show_success("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ! üò∏")

            self._refresh_visible_messages()
        except Exception as e:
            log(f"[{__name__}] Error applying local edit: {str(e)}")
            traceback.print_exc()
            BulletinHelper.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. üòø")

    def _reset_messages(self):
        try:
            self.edited_messages_cache.content.clear()
            self.edited_messages_cache.write()
            log(f"[{__name__}] All edited messages cleared.")
            self._refresh_visible_messages()
            run_on_ui_thread(lambda: BulletinHelper.show_success("–í—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã! üò∏"))
        except Exception as e:
            log(f"[{__name__}] Error resetting local edits: {str(e)}")
            traceback.print_exc()
            run_on_ui_thread(lambda: BulletinHelper.show_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π. üòø"))

    def _refresh_visible_messages(self):
        def action():
            try:
                fragment = get_last_fragment()
                if isinstance(fragment, ChatActivity):
                    chat_list_view = fragment.getChatListView()
                    if chat_list_view and chat_list_view.getAdapter():
                        chat_list_view.getAdapter().notifyDataSetChanged()
                        log(f"[{__name__}] Refreshed chat UI via adapter.notifyDataSetChanged().")
                    else:
                        log(f"[{__name__}] Could not get chatListView or its adapter to refresh UI.")
            except Exception as e:
                log(f"[{__name__}] Error refreshing visible messages: {str(e)}")
        run_on_ui_thread(action)