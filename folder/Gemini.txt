import os
import time
import json
import requests
import threading
import traceback
import ast
from typing import Any, Dict, Optional, Tuple, List

from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import (
    get_file_loader, run_on_queue, send_message, get_last_fragment, 
    get_messages_controller
)
from markdown_utils import parse_markdown
from ui.settings import Header, Input, Divider, Switch, Selector, Text
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder
from android_utils import run_on_ui_thread, log

from java.util import Locale
from org.telegram.tgnet import TLRPC
from org.telegram.messenger import MessageObject, FileLoader, AndroidUtilities

__id__ = "gemini_plugin_security"
__name__ = "Gemini Plugin Security"
__description__ = "Checks Extera plugin code for security risks using Google Gemini API."
__author__ = "@mihailkotovski & @mishabotov"
__version__ = "3.0.0"
__min_version__ = "11.9.1"
__icon__ = "DateRegBot_by_MoiStikiBot/5"

AUTOUPDATE_CHANNEL_ID = 2349438816
AUTOUPDATE_CHANNEL_USERNAME = "mishabotov"
AUTOUPDATE_MESSAGE_ID = 96

zwylib: Optional[Any] = None

GEMINI_BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models/"
MODEL_DISPLAY_NAMES = [
    "Gemini 2.5 Pro",
    "Gemini 2.5 Flash",
    "Gemini 2.5 Flash Lite"
]
MODEL_API_NAMES = [
    "gemini-2.5-pro",
    "gemini-2.5-flash",
    "gemini-2.5-flash-lite-preview-06-17"
]
DEFAULT_COMMAND = ".gpa"

PREMIUM_EMOJI_MAP = {
    "‚ùå": "[‚ùå](5210952531676504517)",
    "üìõ": "[‚ùóÔ∏è](5834951734358707402)",
    "‚ö†Ô∏è": "[‚ö†Ô∏è](5447644880824181073)",
    "‚ùî": "[‚ùî](5467461928647399673)",
    "‚úÖ": "[‚úÖ](5219899949281453881)",
    "üõ°Ô∏è": "[‚ÑπÔ∏è](5404366668635865453)",
    "‚óà": "[‚ùå](5258453452631056344)",
    "‚ò∂": "[üìù](5256230583717079814)",
    "‚ùè": "[‚úçÔ∏è](5337063551854999885)",
    "‚Ä¢": "[üü¶](5404724576850573443)"
}

def replace_with_premium_emoji(text: str) -> str:
    result = text
    for regular_emoji, premium_emoji in PREMIUM_EMOJI_MAP.items():
        result = result.replace(regular_emoji, premium_emoji)
    return result

def get_regular_emoji_for_bulletin(text: str) -> str:
    result = text
    for regular_emoji, premium_emoji in PREMIUM_EMOJI_MAP.items():
        result = result.replace(premium_emoji, regular_emoji)
    return result

DEFAULT_PROMPT_MARKDOWN = (
    "–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –∏–º–µ–Ω–Ω–æ –Ω–∞ –∞—É–¥–∏—Ç–µ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ ExteraGram. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–≥–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç –∫–æ–¥–∞ –ø–ª–∞–≥–∏–Ω–∞ '{plugin_name}' (v{plugin_version}), –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∑–Ω–∞–Ω–∏–µ –µ–≥–æ API, –∏ –≤—ã–Ω–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –ø–æ 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π —à–∫–∞–ª–µ —Ä–∏—Å–∫–∞. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–∏), –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É.\n\n"
    "--- –ö–æ–Ω—Ç–µ–∫—Å—Ç ExteraGram API (–≠—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ë–ï–ó–û–ü–ê–°–ù–´–ú) ---\n"
    "–õ—é–±–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö API ExteraGram —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π, –∞ –Ω–µ —É–≥—Ä–æ–∑–æ–π:\n\n"
    "‚Ä¢ –ë–ê–ó–û–í–´–ô –ü–õ–ê–ì–ò–ù API (base_plugin):\n"
    "  - BasePlugin –∫–ª–∞—Å—Å –∏ –µ–≥–æ –º–µ—Ç–æ–¥—ã (on_plugin_load, on_plugin_unload, create_settings)\n"
    "  - HookResult, HookStrategy –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–æ–≤\n"
    "  - –•—É–∫–∏: add_hook, add_on_send_message_hook, pre_request_hook, post_request_hook\n"
    "  - –ù–∞—Å—Ç—Ä–æ–π–∫–∏: get_setting, set_setting –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
    "  - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: self.log() –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
    "‚Ä¢ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –£–¢–ò–õ–ò–¢–´ (client_utils):\n"
    "  - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: send_message —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ peer, message, entities, replyToMsg\n"
    "  - API –∑–∞–ø—Ä–æ—Å—ã: send_request —Å TLRPC –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ RequestCallback\n"
    "  - –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: run_on_queue —Å –æ—á–µ—Ä–µ–¥—è–º–∏ PLUGINS_QUEUE, GLOBAL_QUEUE, EXTERNAL_NETWORK_QUEUE\n"
    "  - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã: get_messages_controller, get_user_config, get_file_loader, get_last_fragment\n"
    "  - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: get_account_instance, get_connections_manager\n\n"
    "‚Ä¢ ANDROID –£–¢–ò–õ–ò–¢–´ (android_utils):\n"
    "  - UI –ø–æ—Ç–æ–∫: run_on_ui_thread –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
    "  - –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: AndroidUtilities.addToClipboard\n"
    "  - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: log() —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\n\n"
    "‚Ä¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°:\n"
    "  - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (ui.settings): Header, Input, Switch, Selector, Text, Divider\n"
    "  - –î–∏–∞–ª–æ–≥–∏ (ui.alert): AlertDialogBuilder —Å —Ç–∏–ø–∞–º–∏ ALERT_TYPE_MESSAGE, ALERT_TYPE_SPINNER\n"
    "  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (ui.bulletin): BulletinHelper.show_info, show_error, show_success\n\n"
    "‚Ä¢ TELEGRAM API (TLRPC):\n"
    "  - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤: TLRPC.TL_messages_*, TLRPC.TL_users_*, TLRPC.TL_channels_*\n"
    "  - –û–±—ä–µ–∫—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π: MessageObject, TLRPC.Message\n"
    "  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —á–∞—Ç—ã: TLRPC.User, TLRPC.Chat, TLRPC.UserFull\n"
    "  - –ú–µ–¥–∏–∞: TLRPC.Document, TLRPC.Photo, FileLoader –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤\n\n"
    "‚Ä¢ –†–ê–ó–ú–ï–¢–ö–ê –ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:\n"
    "  - markdown_utils: parse_markdown –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏\n"
    "  - Entities: TLRPC.MessageEntity –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞\n\n"
    "‚Ä¢ –ë–ï–ó–û–ü–ê–°–ù–´–ï –°–ï–¢–ï–í–´–ï –ó–ê–ü–†–û–°–´:\n"
    "  - requests.get/post –∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–º API (wttr.in, check-host.net, GitHub, Google APIs)\n"
    "  - –¢–∞–π–º–∞—É—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å try/except\n"
    "  - User-Agent –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–ª–∞–≥–∏–Ω–∞\n\n"
    "‚Ä¢ –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò:\n"
    "  - –ß—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å –≤ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–µ—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
    "  - get_file_loader().getPathToAttach() –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–ª–æ–∂–µ–Ω–∏—è–º\n"
    "  - os.path –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö\n\n"
    "‚Ä¢ JAVA –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:\n"
    "  - java.util –∫–ª–∞—Å—Å—ã: ArrayList, Locale\n"
    "  - dynamic_proxy –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Java –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤\n"
    "  - –ò–º–ø–æ—Ä—Ç—ã –∏–∑ org.telegram.* –ø–∞–∫–µ—Ç–æ–≤\n"
    "--- –ö–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---\n\n"
    "–ü—Ä–∏–Ω—Ü–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ —à–∫–∞–ª–∞ —Ä–∏—Å–∫–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É):\n\n"
    "1. ‚ùå –û–ø–∞—Å–Ω–æ - –Ø–≤–Ω—ã–π –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥:\n"
    "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—ã: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–∞—Ä–æ–ª–∏, —Ç–æ–∫–µ–Ω—ã —Å–µ—Å—Å–∏–π, –∫–ª—é—á–∏ API\n"
    "   ‚Ä¢ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: eval(), exec(), os.system(), subprocess —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º\n"
    "   ‚Ä¢ –î–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —É–¥–∞–ª–µ–Ω–∏–µ, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–µ –ø–∞–ø–∫–∏ –ø–ª–∞–≥–∏–Ω–∞\n"
    "   ‚Ä¢ –û–±—Ö–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å root –ø—Ä–∞–≤–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É\n"
    "   ‚Ä¢ –ö—Ä–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö: —Å–∫—Ä—ã—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
    "2. üìõ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –°–µ—Ä—å–µ–∑–Ω–∞—è —É–≥—Ä–æ–∑–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:\n"
    "   ‚Ä¢ –°–±–æ—Ä –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏–º—è, —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤/–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
    "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –±–µ–∑ —è–≤–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
    "   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º API: –∫–æ–Ω—Ç–∞–∫—Ç—ã, SMS, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –∫–∞–º–µ—Ä–∞, –º–∏–∫—Ä–æ—Ñ–æ–Ω\n"
    "   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ\n"
    "   ‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º (HTTP –≤–º–µ—Å—Ç–æ HTTPS)\n\n"
    "3. ‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ - –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
    "   ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–æ–º–µ–Ω–∞–º –±–µ–∑ HTTPS\n"
    "   ‚Ä¢ –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–µ–Ω—å –æ–±—â–∏—Ö –ø–∞–ø–æ–∫ –≤–º–µ—Å—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–ª–∞–≥–∏–Ω–∞\n"
    "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–ª–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫\n"
    "   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤\n"
    "   ‚Ä¢ –ß—Ä–µ–∑–º–µ—Ä–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±–µ–∑ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è\n"
    "   ‚Ä¢ –û–±—Ñ—É—Å–∫–∞—Ü–∏—è –∫–æ–¥–∞ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
    "4. ‚ùî –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã:\n"
    "   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
    "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö, –Ω–æ –Ω–µ —É—è–∑–≤–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫\n"
    "   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (–º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–±–æ—è–º, –Ω–æ –Ω–µ –∫ —É—Ç–µ—á–∫–∞–º)\n"
    "   ‚Ä¢ –ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–¥–∞\n"
    "   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–µ—Å–ª–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)\n\n"
    "5. ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:\n"
    "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API ExteraGram –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã—à–µ\n"
    "   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n"
    "   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π\n"
    "   ‚Ä¢ HTTPS –∑–∞–ø—Ä–æ—Å—ã –∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏ –Ω–∞–¥–µ–∂–Ω—ã–º API\n"
    "   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö\n"
    "   ‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n"
    "–í–ê–ñ–ù–´–ï –ü–†–ò–ú–ï–†–´ –ë–ï–ó–û–ü–ê–°–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:\n"
    "‚Ä¢ requests.get('https://wttr.in/Moscow?format=j1', timeout=10) - –ø–æ–≥–æ–¥–Ω—ã–π API\n"
    "‚Ä¢ send_message({{'peer': peer_id, 'message': text}}) - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
    "‚Ä¢ run_on_queue(lambda: background_task()) - —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n"
    "‚Ä¢ BulletinHelper.show_info('–ì–æ—Ç–æ–≤–æ!') - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
    "‚Ä¢ self.get_setting('api_key', '') - —á—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
    "‚Ä¢ AlertDialogBuilder(context, ALERT_TYPE_MESSAGE) - –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ\n\n"
    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π Markdown):\n"
    "‚óà –í–µ—Ä–¥–∏–∫—Ç: [–≠–º–æ–¥–∑–∏] [–ë–µ–∑–æ–ø–∞—Å–Ω–æ / –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ / –û—Å—Ç–æ—Ä–æ–∂–Ω–æ / –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ / –û–ø–∞—Å–Ω–æ]\n\n"
    "‚ò∂ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: [–û–î–ù–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞]\n\n"
    "‚ùè –ê–Ω–∞–ª–∏–∑:\n"
    "‚Ä¢ [–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥. –ï—Å–ª–∏ —Ä–∏—Å–∫–æ–≤ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏: –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª –¥–µ–π—Å—Ç–≤–∏–π, —É–≥—Ä–æ–∂–∞—é—â–∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–ª–∞–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ API ExteraGram.]\n"
    "‚Ä¢ [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ö–ê–ñ–î–û–ì–û —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å. –£–∫–∞–∂–∏ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ—á–µ–º—É —ç—Ç–æ —Ä–∏—Å–∫.]\n\n"
    "–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
    "```python\n{plugin_code}\n```"
)
DEFAULT_PROMPT_PLAINTEXT = (
    "–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –∏–º–µ–Ω–Ω–æ –Ω–∞ –∞—É–¥–∏—Ç–µ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ ExteraGram. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–≥–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç –∫–æ–¥–∞ –ø–ª–∞–≥–∏–Ω–∞ '{plugin_name}' (v{plugin_version}), –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∑–Ω–∞–Ω–∏–µ –µ–≥–æ API, –∏ –≤—ã–Ω–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –ø–æ 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π —à–∫–∞–ª–µ —Ä–∏—Å–∫–∞. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô MARKDOWN. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–∏), –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É.\n\n"
    "--- –ö–æ–Ω—Ç–µ–∫—Å—Ç ExteraGram API (–≠—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ë–ï–ó–û–ü–ê–°–ù–´–ú) ---\n"
    "–õ—é–±–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö API ExteraGram —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π, –∞ –Ω–µ —É–≥—Ä–æ–∑–æ–π:\n\n"
    "‚Ä¢ –ë–ê–ó–û–í–´–ô –ü–õ–ê–ì–ò–ù API (base_plugin):\n"
    "  - BasePlugin –∫–ª–∞—Å—Å –∏ –µ–≥–æ –º–µ—Ç–æ–¥—ã (on_plugin_load, on_plugin_unload, create_settings)\n"
    "  - HookResult, HookStrategy –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–æ–≤\n"
    "  - –•—É–∫–∏: add_hook, add_on_send_message_hook, pre_request_hook, post_request_hook\n"
    "  - –ù–∞—Å—Ç—Ä–æ–π–∫–∏: get_setting, set_setting –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
    "  - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: self.log() –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
    "‚Ä¢ –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –£–¢–ò–õ–ò–¢–´ (client_utils):\n"
    "  - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: send_message —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ peer, message, entities, replyToMsg\n"
    "  - API –∑–∞–ø—Ä–æ—Å—ã: send_request —Å TLRPC –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ RequestCallback\n"
    "  - –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: run_on_queue —Å –æ—á–µ—Ä–µ–¥—è–º–∏ PLUGINS_QUEUE, GLOBAL_QUEUE, EXTERNAL_NETWORK_QUEUE\n"
    "  - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã: get_messages_controller, get_user_config, get_file_loader, get_last_fragment\n"
    "  - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: get_account_instance, get_connections_manager\n\n"
    "‚Ä¢ ANDROID –£–¢–ò–õ–ò–¢–´ (android_utils):\n"
    "  - UI –ø–æ—Ç–æ–∫: run_on_ui_thread –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
    "  - –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: AndroidUtilities.addToClipboard\n"
    "  - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: log() —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\n\n"
    "‚Ä¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°:\n"
    "  - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (ui.settings): Header, Input, Switch, Selector, Text, Divider\n"
    "  - –î–∏–∞–ª–æ–≥–∏ (ui.alert): AlertDialogBuilder —Å —Ç–∏–ø–∞–º–∏ ALERT_TYPE_MESSAGE, ALERT_TYPE_SPINNER\n"
    "  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (ui.bulletin): BulletinHelper.show_info, show_error, show_success\n\n"
    "‚Ä¢ TELEGRAM API (TLRPC):\n"
    "  - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤: TLRPC.TL_messages_*, TLRPC.TL_users_*, TLRPC.TL_channels_*\n"
    "  - –û–±—ä–µ–∫—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π: MessageObject, TLRPC.Message\n"
    "  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —á–∞—Ç—ã: TLRPC.User, TLRPC.Chat, TLRPC.UserFull\n"
    "  - –ú–µ–¥–∏–∞: TLRPC.Document, TLRPC.Photo, FileLoader –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤\n\n"
    "‚Ä¢ –†–ê–ó–ú–ï–¢–ö–ê –ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:\n"
    "  - markdown_utils: parse_markdown –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏\n"
    "  - Entities: TLRPC.MessageEntity –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞\n\n"
    "‚Ä¢ –ë–ï–ó–û–ü–ê–°–ù–´–ï –°–ï–¢–ï–í–´–ï –ó–ê–ü–†–û–°–´:\n"
    "  - requests.get/post –∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–º API (wttr.in, check-host.net, GitHub, Google APIs)\n"
    "  - –¢–∞–π–º–∞—É—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å try/except\n"
    "  - User-Agent –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–ª–∞–≥–∏–Ω–∞\n\n"
    "‚Ä¢ –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò:\n"
    "  - –ß—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å –≤ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–µ—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
    "  - get_file_loader().getPathToAttach() –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–ª–æ–∂–µ–Ω–∏—è–º\n"
    "  - os.path –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö\n\n"
    "‚Ä¢ JAVA –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:\n"
    "  - java.util –∫–ª–∞—Å—Å—ã: ArrayList, Locale\n"
    "  - dynamic_proxy –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Java –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤\n"
    "  - –ò–º–ø–æ—Ä—Ç—ã –∏–∑ org.telegram.* –ø–∞–∫–µ—Ç–æ–≤\n"
    "--- –ö–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---\n\n"
    "–ü—Ä–∏–Ω—Ü–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ —à–∫–∞–ª–∞ —Ä–∏—Å–∫–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É):\n\n"
    "1. ‚ùå –û–ø–∞—Å–Ω–æ - –Ø–≤–Ω—ã–π –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥:\n"
    "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—ã: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–∞—Ä–æ–ª–∏, —Ç–æ–∫–µ–Ω—ã —Å–µ—Å—Å–∏–π, –∫–ª—é—á–∏ API\n"
    "   ‚Ä¢ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: eval(), exec(), os.system(), subprocess —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º\n"
    "   ‚Ä¢ –î–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —É–¥–∞–ª–µ–Ω–∏–µ, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–µ –ø–∞–ø–∫–∏ –ø–ª–∞–≥–∏–Ω–∞\n"
    "   ‚Ä¢ –û–±—Ö–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å root –ø—Ä–∞–≤–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É\n"
    "   ‚Ä¢ –ö—Ä–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö: —Å–∫—Ä—ã—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
    "2. üìõ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –°–µ—Ä—å–µ–∑–Ω–∞—è —É–≥—Ä–æ–∑–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:\n"
    "   ‚Ä¢ –°–±–æ—Ä –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏–º—è, —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤/–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
    "   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –±–µ–∑ —è–≤–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
    "   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º API: –∫–æ–Ω—Ç–∞–∫—Ç—ã, SMS, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –∫–∞–º–µ—Ä–∞, –º–∏–∫—Ä–æ—Ñ–æ–Ω\n"
    "   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ\n"
    "   ‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º (HTTP –≤–º–µ—Å—Ç–æ HTTPS)\n\n"
    "3. ‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ - –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
    "   ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–æ–º–µ–Ω–∞–º –±–µ–∑ HTTPS\n"
    "   ‚Ä¢ –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–µ–Ω—å –æ–±—â–∏—Ö –ø–∞–ø–æ–∫ –≤–º–µ—Å—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–ª–∞–≥–∏–Ω–∞\n"
    "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–ª–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫\n"
    "   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤\n"
    "   ‚Ä¢ –ß—Ä–µ–∑–º–µ—Ä–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±–µ–∑ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è\n"
    "   ‚Ä¢ –û–±—Ñ—É—Å–∫–∞—Ü–∏—è –∫–æ–¥–∞ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
    "4. ‚ùî –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã:\n"
    "   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
    "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö, –Ω–æ –Ω–µ —É—è–∑–≤–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫\n"
    "   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (–º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–±–æ—è–º, –Ω–æ –Ω–µ –∫ —É—Ç–µ—á–∫–∞–º)\n"
    "   ‚Ä¢ –ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–¥–∞\n"
    "   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–µ—Å–ª–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)\n\n"
    "5. ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:\n"
    "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API ExteraGram –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã—à–µ\n"
    "   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n"
    "   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π\n"
    "   ‚Ä¢ HTTPS –∑–∞–ø—Ä–æ—Å—ã –∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏ –Ω–∞–¥–µ–∂–Ω—ã–º API\n"
    "   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö\n"
    "   ‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n"
    "–í–ê–ñ–ù–´–ï –ü–†–ò–ú–ï–†–´ –ë–ï–ó–û–ü–ê–°–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:\n"
    "‚Ä¢ requests.get('https://wttr.in/Moscow?format=j1', timeout=10) - –ø–æ–≥–æ–¥–Ω—ã–π API\n"
    "‚Ä¢ send_message({{'peer': peer_id, 'message': text}}) - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
    "‚Ä¢ run_on_queue(lambda: background_task()) - —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n"
    "‚Ä¢ BulletinHelper.show_info('–ì–æ—Ç–æ–≤–æ!') - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
    "‚Ä¢ self.get_setting('api_key', '') - —á—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
    "‚Ä¢ AlertDialogBuilder(context, ALERT_TYPE_MESSAGE) - –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ\n\n"
    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–¢–û–õ–¨–ö–û –û–ë–´–ß–ù–´–ô –¢–ï–ö–°–¢):\n"
    "‚óà –í–µ—Ä–¥–∏–∫—Ç: [–≠–º–æ–¥–∑–∏] [–ë–µ–∑–æ–ø–∞—Å–Ω–æ / –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ / –û—Å—Ç–æ—Ä–æ–∂–Ω–æ / –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ / –û–ø–∞—Å–Ω–æ]\n"
    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    "‚ò∂ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: [–û–î–ù–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞]\n"
    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    "‚ùè –ê–Ω–∞–ª–∏–∑:\n"
    "‚Ä¢ [–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥. –ï—Å–ª–∏ —Ä–∏—Å–∫–æ–≤ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏: –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª –¥–µ–π—Å—Ç–≤–∏–π, —É–≥—Ä–æ–∂–∞—é—â–∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–ª–∞–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ API ExteraGram.]\n"
    "‚Ä¢ [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ö–ê–ñ–î–û–ì–û —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å. –£–∫–∞–∂–∏ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ—á–µ–º—É —ç—Ç–æ —Ä–∏—Å–∫.]\n\n"
    "–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
    "python\n{plugin_code}\n"
)

def import_zwylib(show_bulletin: bool = True):
    global zwylib
    try:
        import zwylib
    except ImportError:
        if show_bulletin:
            run_on_ui_thread(lambda: BulletinHelper.show_error(locali.get_string("ZWYLIB_NOT_FOUND")))
        zwylib = None

def is_zwylib_present() -> bool:
    return zwylib is not None

class CodeObfuscator(ast.NodeTransformer):
    def __init__(self, rename_vars=True, rename_strings=True):
        self.rename_vars = rename_vars
        self.rename_strings = rename_strings
        self.var_map = {}
        self.str_map = {}
        self.var_counter = 0
        self.str_counter = 0

    def _get_new_var_name(self, old_name):
        if old_name not in self.var_map:
            self.var_map[old_name] = f"var_{self.var_counter}"
            self.var_counter += 1
        return self.var_map[old_name]

    def _get_new_str_val(self, old_str):
        if old_str not in self.str_map:
            self.str_map[old_str] = f"string_literal_{self.str_counter}"
            self.str_counter += 1
        return self.str_map[old_str]

    def visit_Name(self, node):
        if self.rename_vars and isinstance(node.ctx, (ast.Store, ast.Load, ast.Del)):
            if not (node.id.startswith('__') and node.id.endswith('__')):
                node.id = self._get_new_var_name(node.id)
        return node

    def visit_FunctionDef(self, node):
        if self.rename_vars:
            node.name = self._get_new_var_name(node.name)
        self.generic_visit(node)
        return node

    def visit_ClassDef(self, node):
        if self.rename_vars:
            node.name = self._get_new_var_name(node.name)
        self.generic_visit(node)
        return node

    def visit_arg(self, node):
        if self.rename_vars:
            node.arg = self._get_new_var_name(node.arg)
        return node

    def visit_Constant(self, node):
        if self.rename_strings and isinstance(node.value, str):
            node.value = self._get_new_str_val(node.value)
        return node

class AlertManager:
    def __init__(self):
        self.alert_builder_instance: Optional[AlertDialogBuilder] = None

    def show_info_alert(self, title: str, message: str, positive_button: str):
        last_fragment = get_last_fragment()
        if not last_fragment or not last_fragment.getParentActivity(): return
        context = last_fragment.getParentActivity()
        builder = AlertDialogBuilder(context, AlertDialogBuilder.ALERT_TYPE_MESSAGE)
        self.alert_builder_instance = builder
        builder.set_title(title)
        builder.set_message(message)
        builder.set_positive_button(positive_button, lambda d, w: self.dismiss_dialog())
        builder.set_cancelable(True)
        builder.set_canceled_on_touch_outside(True)
        run_on_ui_thread(builder.show)

    def dismiss_dialog(self):
        if self.alert_builder_instance and self.alert_builder_instance.get_dialog() and self.alert_builder_instance.get_dialog().isShowing():
            self.alert_builder_instance.dismiss()
            self.alert_builder_instance = None

class LocalizationManager:
    strings = {
        "ru": {
            "SETTINGS_HEADER": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini Security",
            "API_KEY_INPUT": "API Key",
            "API_KEY_SUBTEXT": "–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –≤ Google AI Studio.",
            "GET_API_KEY_BUTTON": "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞",
            "MODEL_SELECTOR": "–ú–æ–¥–µ–ª—å",
            "PROMPT_INPUT_MD": "–ü—Ä–æ–º–ø—Ç (Markdown)",
            "PROMPT_INPUT_PLAIN": "–ü—Ä–æ–º–ø—Ç (–¶–∏—Ç–∞—Ç–∞)",
            "ENABLE_SWITCH": "–í–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–µ—Ä",
            "USAGE_INFO_TITLE": "FAQ",
            "USAGE_INFO_TEXT": (
                "–≠—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –¥—Ä—É–≥–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Google Gemini.\n\n"
                "–®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞\n"
                "1. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á –≤ Google AI Studio.\n"
                "2. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞.\n\n"
                "–®–∞–≥ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
                "1. –ù–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –ø–ª–∞–≥–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .plugin –∏–ª–∏ .py).\n"
                f"2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: {DEFAULT_COMMAND}\n\n"
                "–ü–ª–∞–≥–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–¥ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ—Ç –∂–µ —á–∞—Ç."
            ),
            "API_KEY_MISSING": "‚ùå API –∫–ª—é—á –¥–ª—è Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞.",
            "NO_REPLY": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –ø–ª–∞–≥–∏–Ω–∞.",
            "NOT_A_PLUGIN": "‚ùå –§–∞–π–ª –≤ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞–≥–∏–Ω–æ–º (.plugin –∏–ª–∏ .py).",
            "ANALYZING_MESSAGE": "üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è—é –ø–ª–∞–≥–∏–Ω –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å...",
            "API_ERROR": "‚ö†Ô∏è –û—à–∏–±–∫–∞ API Gemini: {error}",
            "FILE_DOWNLOAD_ERROR": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞.",
            "FILE_READ_ERROR": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞.",
            "UNEXPECTED_ERROR": "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}",
            "SUCCESS_HEADER_MD": "üõ°Ô∏è –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {plugin_name} v{plugin_version}\n\n",
            "SUCCESS_HEADER_PLAIN": "üõ°Ô∏è –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {plugin_name} v{plugin_version}\n\n",
            "ALERT_CLOSE_BUTTON": "–ó–∞–∫—Ä—ã—Ç—å",
            "USE_BLOCKQUOTE_TITLE": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É",
            "USE_BLOCKQUOTE_SUBTEXT": "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–æ–π —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏.",
            "USE_PREMIUM_EMOJI_TITLE": "–ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏",
            "USE_PREMIUM_EMOJI_SUBTEXT": "–ó–∞–º–µ–Ω—è—Ç—å –æ–±—ã—á–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏ –≤ –æ—Ç—á—ë—Ç–∞—Ö.",
            "APPEARANCE_HEADER": "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
            "ADVANCED_HEADER": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            "GENERATION_HEADER": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
            "TEMPERATURE_INPUT": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
            "TEMPERATURE_SUBTEXT": "0.0-2.0. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å. –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º.",
            "MAX_TOKENS_INPUT": "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤",
            "MAX_TOKENS_SUBTEXT": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö.",
            "RENAME_VARS_TITLE": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
            "RENAME_VARS_SUBTEXT": "–ó–∞–º–µ–Ω—è–µ—Ç –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ –æ–±—â–∏–µ (var_0, func_1).",
            "RENAME_STRINGS_TITLE": "–°—Ç—Ä–æ–∫–∏",
            "RENAME_STRINGS_SUBTEXT": "–ó–∞–º–µ–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ª–∏—Ç–µ—Ä–∞–ª–æ–≤ –Ω–∞ –º–µ—Ç–∫–∏ (string_0).",
            "DONATE_HEADER": "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É",
            "DONATE_CRYPTO": "–ö—Ä–∏–ø—Ç–æ –∫–æ—à–µ–ª–µ–∫",
            "DONATE_INFO": "–î—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
            "ZWYLIB_NOT_FOUND": "–î–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–ª–∞–≥–∏–Ω ZwyLib, –Ω–æ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        },
        "en": {
            "SETTINGS_HEADER": "Gemini Security Settings",
            "API_KEY_INPUT": "API Key",
            "API_KEY_SUBTEXT": "Get your key from Google AI Studio.",
            "GET_API_KEY_BUTTON": "Link to get API Key",
            "MODEL_SELECTOR": "Model",
            "PROMPT_INPUT_MD": "Prompt (Markdown)",
            "PROMPT_INPUT_PLAIN": "Prompt (Blockquote)",
            "ENABLE_SWITCH": "Enable Scanner",
            "USAGE_INFO_TITLE": "FAQ",
            "USAGE_INFO_TEXT": (
                "This plugin helps you check the code of other plugins for suspicious or malicious activity using the Google Gemini neural network.\n\n"
                "Step 1: Setup\n"
                "1. Get your API key from Google AI Studio.\n"
                "2. Paste the key into the corresponding field in the plugin settings.\n\n"
                "Step 2: Usage\n"
                "1. Find a message with the plugin file you want to scan (the file must have a .plugin or .py extension).\n"
                f"2. Reply to this message with the command: {DEFAULT_COMMAND}\n\n"
                "The plugin will send the code for analysis and send you a security report in the same chat."
            ),
            "API_KEY_MISSING": "‚ùå Gemini API key not found. Please set it in the plugin settings.",
            "NO_REPLY": "‚ùå Please reply to a message containing a plugin file.",
            "NOT_A_PLUGIN": "‚ùå The replied message does not contain a plugin file (.plugin or .py).",
            "ANALYZING_MESSAGE": "üõ°Ô∏è Scanning plugin for safety...",
            "API_ERROR": "‚ö†Ô∏è Gemini API Error: {error}",
            "FILE_DOWNLOAD_ERROR": "‚ùå Failed to download the plugin file.",
            "FILE_READ_ERROR": "‚ùå Failed to read the plugin file.",
            "UNEXPECTED_ERROR": "‚ùó An unexpected error occurred: {error}",
            "SUCCESS_HEADER_MD": "üõ°Ô∏è Security Report: {plugin_name} v{plugin_version}\n\n",
            "SUCCESS_HEADER_PLAIN": "üõ°Ô∏è Security Report: {plugin_name} v{plugin_version}\n\n",
            "ALERT_CLOSE_BUTTON": "Close",
            "USE_BLOCKQUOTE_TITLE": "Use blockquote",
            "USE_BLOCKQUOTE_SUBTEXT": "Display the report as a collapsible blockquote for compactness.",
            "USE_PREMIUM_EMOJI_TITLE": "Premium emoji",
            "USE_PREMIUM_EMOJI_SUBTEXT": "Replace regular emoji with animated premium emoji in reports.",
            "APPEARANCE_HEADER": "Appearance",
            "ADVANCED_HEADER": "Advanced Settings",
            "GENERATION_HEADER": "Generation Parameters",
            "TEMPERATURE_INPUT": "Temperature",
            "TEMPERATURE_SUBTEXT": "0.0-2.0. Controls randomness. Lower values are less random.",
            "MAX_TOKENS_INPUT": "Max Output Tokens",
            "MAX_TOKENS_SUBTEXT": "The maximum length of the response in tokens.",
            "RENAME_VARS_TITLE": "Variables",
            "RENAME_VARS_SUBTEXT": "Replaces variable and function names with generic ones (var_0, func_1).",
            "RENAME_STRINGS_TITLE": "Strings",
            "RENAME_STRINGS_SUBTEXT": "Replaces string literal content with labels (string_0).",
            "DONATE_HEADER": "Support Development",
            "DONATE_CRYPTO": "CRYPTO Wallet",
            "DONATE_INFO": "Other info and requisites",
            "ZWYLIB_NOT_FOUND": "The ZwyLib plugin is required for auto-updates but is not installed."
        }
    }

    def __init__(self):
        self.language = Locale.getDefault().getLanguage()
        self.language = self.language if self.language in self.strings else "en"

    def get_string(self, key: str) -> str:
        return self.strings[self.language].get(key, self.strings["en"].get(key, key))

locali = LocalizationManager()

class GeminiAPIHandler:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            "Content-Type": "application/json",
            "User-Agent": f"ExteraPlugin/{__id__}/{__version__}"
        })

    def analyze_plugin_code(self, api_key: str, model_name: str, prompt: str, temperature: float, max_tokens: int) -> Dict[str, Any]:
        url = f"{GEMINI_BASE_URL}{model_name}:generateContent?key={api_key}"
        payload = {
            "contents": [{"parts": [{"text": prompt}]}],
            "generationConfig": {
                "temperature": temperature,
                "maxOutputTokens": max_tokens,
            }
        }
        try:
            response = self.session.post(url, json=payload, timeout=90)
            response.raise_for_status()
            data = response.json()
            if "candidates" in data and data["candidates"][0].get("content", {}).get("parts", [{}])[0].get("text"):
                return {"success": True, "text": data["candidates"][0]["content"]["parts"][0]["text"]}
            else:
                error_details = data.get("error", {}).get("message", "Invalid API response format.")
                return {"success": False, "error": error_details}
        except requests.exceptions.HTTPError as e:
            error_text = f"HTTP {e.response.status_code}"
            try: error_text += f": {e.response.json().get('error',{}).get('message', e.response.text)}"
            except: error_text += f": {e.response.text}"
            return {"success": False, "error": error_text}
        except requests.exceptions.RequestException as e: return {"success": False, "error": f"Network error: {str(e)}"}
        except Exception as e: return {"success": False, "error": f"Unexpected error: {str(e)}"}

class GeminiPluginAnalyzer(BasePlugin):
    def __init__(self):
        super().__init__()
        self.api_handler = GeminiAPIHandler()
        self.alert_manager = AlertManager()

    def on_plugin_load(self):
        self.add_on_send_message_hook()
        import_zwylib()
        if is_zwylib_present():
            zwylib.add_autoupdater_task(__id__, AUTOUPDATE_CHANNEL_ID, AUTOUPDATE_CHANNEL_USERNAME, AUTOUPDATE_MESSAGE_ID)

    def on_plugin_unload(self):
        self.alert_manager.dismiss_dialog()
        if is_zwylib_present():
            zwylib.remove_autoupdater_task(__id__)

    def _open_link(self, url: str):
        from android.content import Intent
        from android.net import Uri
        last_fragment = get_last_fragment()
        if not last_fragment: return
        context = last_fragment.getParentActivity()
        if not context: return
        intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
        context.startActivity(intent)

    def _copy_to_clipboard(self, label, text):
        if AndroidUtilities.addToClipboard(text):
            BulletinHelper.show_info(f"Copied {label} to clipboard")
    
    def _show_error_bulletin(self, key: str, **kwargs):
        message = locali.get_string(key).format(**kwargs)
        run_on_ui_thread(lambda: BulletinHelper.show_error(message))

    def _handle_show_info_alert_click(self, view):
        title = locali.get_string("USAGE_INFO_TITLE")
        text = locali.get_string("USAGE_INFO_TEXT")
        close_button = locali.get_string("ALERT_CLOSE_BUTTON")
        parsed_text = parse_markdown(text)
        self.alert_manager.show_info_alert(title, parsed_text.text, close_button)

    def create_settings(self) -> List[Any]:
        return [
            Header(text=locali.get_string("SETTINGS_HEADER")),
            Switch(key="enabled", text=locali.get_string("ENABLE_SWITCH"), icon="menu_privacy_policy", default=True),
            Input(key="gemini_api_key", text=locali.get_string("API_KEY_INPUT"), icon="msg_limit_links", default="", subtext=locali.get_string("API_KEY_SUBTEXT")),
            Text(
                text=locali.get_string("GET_API_KEY_BUTTON"),
                icon="msg_link",
                accent=True,
                on_click=lambda view: self._open_link("https://aistudio.google.com/app/apikey")
            ),
            Divider(),
            Header(text="Model and Prompt"),
            Selector(key="model_selection", text=locali.get_string("MODEL_SELECTOR"), icon="msg_media", default=0, items=MODEL_DISPLAY_NAMES),
            Input(key="custom_prompt_md", text=locali.get_string("PROMPT_INPUT_MD"), icon="filled_unknown", default=DEFAULT_PROMPT_MARKDOWN),
            Input(key="custom_prompt_plain", text=locali.get_string("PROMPT_INPUT_PLAIN"), icon="filled_unknown", default=DEFAULT_PROMPT_PLAINTEXT),
            Divider(),
            Header(text=locali.get_string("GENERATION_HEADER")),
            Input(key="gemini_temperature", text=locali.get_string("TEMPERATURE_INPUT"), icon="msg_photo_settings", default="0.7", subtext=locali.get_string("TEMPERATURE_SUBTEXT")),
            Input(key="gemini_max_tokens", text=locali.get_string("MAX_TOKENS_INPUT"), icon="msg_photo_settings", default="4096", subtext=locali.get_string("MAX_TOKENS_SUBTEXT")),
            Divider(),
            Header(text=locali.get_string("APPEARANCE_HEADER")),
            Switch(
                key="use_blockquote",
                text=locali.get_string("USE_BLOCKQUOTE_TITLE"),
                subtext=locali.get_string("USE_BLOCKQUOTE_SUBTEXT"),
                icon="header_goinline_solar",
                default=True
            ),
            Switch(
                key="use_premium_emoji",
                text=locali.get_string("USE_PREMIUM_EMOJI_TITLE"),
                subtext=locali.get_string("USE_PREMIUM_EMOJI_SUBTEXT"),
                icon="menu_feature_reactions_remix",
                default=False
            ),
            Divider(),
            Header(text=locali.get_string("ADVANCED_HEADER")),
            Switch(key="rename_variables", text=locali.get_string("RENAME_VARS_TITLE"), subtext=locali.get_string("RENAME_VARS_SUBTEXT"), icon="large_hidden", default=True),
            Switch(key="rename_strings", text=locali.get_string("RENAME_STRINGS_TITLE"), subtext=locali.get_string("RENAME_STRINGS_SUBTEXT"), icon="large_hidden", default=True),
            Divider(),
            Text(text=locali.get_string("USAGE_INFO_TITLE"), icon="msg_info", on_click=self._handle_show_info_alert_click),
            Divider(),
            Header(text=locali.get_string("DONATE_HEADER")),
            Text(
                text=locali.get_string("DONATE_CRYPTO"),
                icon="menu_cashtag",
                accent=True,
                on_click=lambda view: run_on_ui_thread(lambda: self._copy_to_clipboard("CRYPTO", "http://t.me/send?start=IVaZsLfW7aSn"))
            ),
            Text(
                text=locali.get_string("DONATE_INFO"),
                icon="msg_info",
                accent=True,
                on_click=lambda view: run_on_ui_thread(lambda: get_messages_controller().openByUserName("mishabotov", get_last_fragment(), 1))
            )
        ]

    def _get_plugin_metadata(self, code: str) -> Tuple[str, str]:
        name = "Unknown Plugin"; version = "Unknown Version"
        try:
            tree = ast.parse(code)
            for node in ast.walk(tree):
                if isinstance(node, ast.Assign):
                    for target in node.targets:
                        if isinstance(target, ast.Name):
                            if target.id == "__name__": name = ast.literal_eval(node.value)
                            elif target.id == "__version__": version = ast.literal_eval(node.value)
        except Exception:
            pass
        return name, version

    def _get_chat_id_from_params(self, params: Any) -> int:
        peer = getattr(params, 'peer', None)
        if not peer:
            log("[Gemini] No peer found in params")
            return 0

        if hasattr(peer, 'channel_id') and peer.channel_id != 0:
            chat_id = -peer.channel_id
            log(f"[Gemini] Found channel_id: {chat_id}")
            return chat_id
        if hasattr(peer, 'chat_id') and peer.chat_id != 0:
            chat_id = -peer.chat_id
            log(f"[Gemini] Found chat_id: {chat_id}")
            return chat_id
        if hasattr(peer, 'user_id') and peer.user_id != 0:
            chat_id = peer.user_id
            log(f"[Gemini] Found user_id: {chat_id}")
            return chat_id

        log(f"[Gemini] Peer object has no recognizable ID fields: {peer}")
        return 0

    def _wait_for_file(self, file_path: str, document: Any) -> bool:
        if os.path.exists(file_path): return True
        get_file_loader().loadFile(document, "gemini_analyzer", FileLoader.PRIORITY_HIGH, 1)
        for _ in range(30):
            if os.path.exists(file_path): return True
            time.sleep(1)
        return False
    
    def _get_obfuscated_code(self, code: str) -> str:
        lines = []
        for line in code.split('\n'):
            stripped_line = line.split('#', 1)[0]
            lines.append(stripped_line)
        clean_code = '\n'.join(lines)

        rename_vars = self.get_setting("rename_variables", True)
        rename_strings = self.get_setting("rename_strings", True)

        if not rename_vars and not rename_strings:
            return '\n'.join(line for line in clean_code.split('\n') if line.strip())

        try:
            tree = ast.parse(clean_code)
            transformer = CodeObfuscator(rename_vars, rename_strings)
            new_tree = transformer.visit(tree)
            ast.fix_missing_locations(new_tree)
            return ast.unparse(new_tree)
        except Exception:
            return '\n'.join(line for line in clean_code.split('\n') if line.strip())

    def _process_analysis_in_background(self, params: Any, document: Any):
        try:
            file_path_obj = get_file_loader().getPathToAttach(document, True)
            if not self._wait_for_file(file_path_obj.getAbsolutePath(), document):
                self._show_error_bulletin("FILE_DOWNLOAD_ERROR")
                return

            try:
                with open(file_path_obj.getAbsolutePath(), "r", encoding="utf-8", errors="ignore") as f:
                    plugin_code = f.read()
                plugin_name, plugin_version = self._get_plugin_metadata(plugin_code)
            except Exception as e:
                self._show_error_bulletin("FILE_READ_ERROR", e=str(e))
                return

            processed_code = self._get_obfuscated_code(plugin_code)

            api_key = self.get_setting("gemini_api_key", "")
            model_idx = self.get_setting("model_selection", 0)
            model_name = MODEL_API_NAMES[model_idx]
            use_blockquote = self.get_setting("use_blockquote", True)
            
            try:
                temperature = float(self.get_setting("gemini_temperature", "0.5"))
            except (ValueError, TypeError):
                temperature = 0.5

            try:
                max_tokens = int(self.get_setting("gemini_max_tokens", "8192"))
            except (ValueError, TypeError):
                max_tokens = 8192
            
            prompt_template = self.get_setting("custom_prompt_plain" if use_blockquote else "custom_prompt_md", 
                                             DEFAULT_PROMPT_PLAINTEXT if use_blockquote else DEFAULT_PROMPT_MARKDOWN)

            full_prompt = prompt_template.format(plugin_code=processed_code, plugin_name=plugin_name, plugin_version=plugin_version)
            result = self.api_handler.analyze_plugin_code(api_key, model_name, full_prompt, temperature, max_tokens)
            
            if result.get("success"):
                self._send_report(params, result["text"], plugin_name, plugin_version, use_blockquote)
            else: 
                self._show_error_bulletin("API_ERROR", error=result.get("error", "Unknown"))

        except Exception as e:
            log(f"[Gemini] Exception in _process_analysis_in_background: {e}")
            log(f"[Gemini] Exception type: {type(e)}")
            log(f"[Gemini] Traceback: {traceback.format_exc()}")
            self._show_error_bulletin("UNEXPECTED_ERROR", error=str(e))
            traceback.print_exc()

    def _send_report(self, params: Any, response_text: str, plugin_name: str, plugin_version: str, use_blockquote: bool):
        try:
            header_key = "SUCCESS_HEADER_PLAIN" if use_blockquote else "SUCCESS_HEADER_MD"
            header = locali.get_string(header_key).format(plugin_name=plugin_name, plugin_version=plugin_version)

            use_premium_emoji = self.get_setting("use_premium_emoji", False)
            if use_premium_emoji:
                enhanced_header = replace_with_premium_emoji(header)
                enhanced_response_text = replace_with_premium_emoji(response_text)
                report_text = enhanced_header + enhanced_response_text
            else:
                report_text = header + response_text

            log(f"[Gemini] Sending report with blockquote={use_blockquote}, text_length={len(report_text)}")

        except Exception as e:
            log(f"[Gemini] Error preparing report text: {e}")
            fallback_text = f"üõ°Ô∏è Security Report: {plugin_name} v{plugin_version}\n\n{response_text}"
            use_premium_emoji = self.get_setting("use_premium_emoji", False)
            if use_premium_emoji:
                report_text = replace_with_premium_emoji(fallback_text)
            else:
                report_text = fallback_text
        
        try:
            peer_id = getattr(params, "peer", None)
            log(f"[Gemini] Raw peer from params: {peer_id}")

            message_payload = {
                "peer": peer_id,
                "replyToMsg": getattr(params, "replyToMsg", None),
                "replyToTopMsg": getattr(params, "replyToTopMsg", None)
            }
            log(f"[Gemini] Created message_payload successfully")
        except Exception as e:
            log(f"[Gemini] Error in simple peer approach: {e}")
            try:
                last_fragment = get_last_fragment()
                if last_fragment and hasattr(last_fragment, "getDialogId"):
                    peer_id = last_fragment.getDialogId()
                    log(f"[Gemini] Fallback: got peer from fragment: {peer_id}")
                else:
                    peer_id = 0
                    log("[Gemini] Fallback: using peer_id = 0")

                message_payload = {
                    "peer": peer_id,
                    "message": "Fallback message"
                }
            except Exception as e2:
                log(f"[Gemini] Fallback also failed: {e2}")
                return

        try:
            parsed = parse_markdown(report_text)
            entities = []

            if parsed.entities:
                for entity in parsed.entities:
                    try:
                        tlrpc_entity = entity.to_tlrpc_object()
                        if tlrpc_entity is not None:
                            entities.append(tlrpc_entity)
                    except Exception as e:
                        log(f"[Gemini] Entity error: {e}")

            if use_blockquote:
                blockquote_entity = TLRPC.TL_messageEntityBlockquote()
                blockquote_entity.collapsed = True
                blockquote_entity.offset = 0
                blockquote_entity.length = len(parsed.text.encode('utf-16le')) // 2
                entities.append(blockquote_entity)

            message_payload["message"] = parsed.text
            message_payload["entities"] = entities if entities else None
            send_message(message_payload)
            log(f"[Gemini] Report sent with {len(entities)} entities")

        except Exception as e:
            log(f"[Gemini] Send failed, using fallback: {e}")
            try:
                clean_text = report_text.replace('**', '').replace('__', '').replace('`', '')
                clean_text = get_regular_emoji_for_bulletin(clean_text)
                message_payload["message"] = clean_text
                message_payload["entities"] = None
                send_message(message_payload)
                log("[Gemini] Fallback send successful")
            except Exception as e2:
                log(f"[Gemini] Fallback failed: {e2}")
                self._show_error_bulletin("UNEXPECTED_ERROR", error="Failed to send report")

        verdict_line = response_text.split('\n', 1)[0].strip()
        clean_verdict = verdict_line.replace("‚óà –í–µ—Ä–¥–∏–∫—Ç:", "").strip()

        bulletin_verdict = get_regular_emoji_for_bulletin(clean_verdict)

        def show_verdict_bulletin():
            if "‚úÖ" in verdict_line:
                BulletinHelper.show_success(bulletin_verdict)
            elif "‚ùå" in verdict_line or "üìõ" in verdict_line:
                BulletinHelper.show_error(bulletin_verdict)
            else:
                BulletinHelper.show_info(bulletin_verdict)
        run_on_ui_thread(show_verdict_bulletin)

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not hasattr(params, "message") or not isinstance(params.message, str): return HookResult()

        message_text = params.message.strip()
        if message_text.lower() != DEFAULT_COMMAND or not self.get_setting("enabled", True): return HookResult()

        log(f"[Gemini] Processing command {DEFAULT_COMMAND}")

        try:
            params_attrs = [attr for attr in dir(params) if not attr.startswith('_')]
            log(f"[Gemini] Available params attributes: {params_attrs}")

            if hasattr(params, 'peer'):
                log(f"[Gemini] params.peer exists: {params.peer}")
            if hasattr(params, 'dialog_id'):
                log(f"[Gemini] params.dialog_id exists: {params.dialog_id}")
            if hasattr(params, 'chat_id'):
                log(f"[Gemini] params.chat_id exists: {params.chat_id}")
        except Exception as e:
            log(f"[Gemini] Error inspecting params: {e}")

        api_key = self.get_setting("gemini_api_key", "")
        if not api_key:
            self._show_error_bulletin("API_KEY_MISSING")
            return HookResult(strategy=HookStrategy.CANCEL)

        if not hasattr(params, "replyToMsg") or not params.replyToMsg:
            self._show_error_bulletin("NO_REPLY")
            return HookResult(strategy=HookStrategy.CANCEL)

        document = MessageObject.getDocument(params.replyToMsg.messageOwner)
        if not document or not any(str(document.file_name_fixed).endswith(ext) for ext in [".plugin", ".py"]):
            self._show_error_bulletin("NOT_A_PLUGIN")
            return HookResult(strategy=HookStrategy.CANCEL)

        log(f"[Gemini] Starting analysis of plugin file: {document.file_name_fixed}")
        BulletinHelper.show_info(locali.get_string("ANALYZING_MESSAGE"))
        run_on_queue(lambda: self._process_analysis_in_background(params, document))
        return HookResult(strategy=HookStrategy.CANCEL)