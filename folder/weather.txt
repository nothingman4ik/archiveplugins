import requests
from java.util import Locale
from org.telegram.ui.ActionBar import AlertDialog
from android_utils import log
from ui.settings import Header, Switch, Divider, Input, Selector
from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import get_last_fragment, send_message, run_on_queue

__id__ = "weather"
__name__ = "Weather"
__description__ = "Get current weather using OpenWeatherMap [.wt]"
__author__ = "@exteraDev"
__min_version__ = "11.9.0"
__icon__ = "exteraDevPlugins/2"

API_BASE_URL = "https://api.openweathermap.org/data/2.5/weather"

LANG = {
    "en": {
        "settings_header": "Weather Plugin Settings",
        "api_key": "API Key",
        "api_key_sub": "Get your key at https://openweathermap.org/api",
        "default_city": "Default City",
        "default_city_sub": "City used if none is provided in the command",
        "units": "Temperature Unit",
        "units_items": ["Celsius", "Fahrenheit", "Kelvin"],
        "show_humidity": "Show Humidity",
        "show_humidity_sub": "Display air humidity",
        "show_wind": "Show Wind",
        "show_wind_sub": "Display wind speed",
        "usage": "Command: .wt [city]",
        "fetching": "Fetching weather...",
        "usage_full": "Usage: .wt [city]\nExample: .wt London",
        "no_api_key": "Please configure your OpenWeatherMap API Key in the plugin settings.",
        "no_city": "Please provide a city or set a default city in the settings.",
        "invalid_key": "Invalid or missing API Key.",
        "city_not_found": "City '{city}' not found.",
        "error_fetch": "Error fetching weather: {err}",
        "error_format": "Error formatting weather information.",
        "weather_in": "üå§Ô∏è Weather in {name}, {country}:\n",
        "desc": "‚Ä¢ {desc}\n",
        "temp": "‚Ä¢ Temperature: {temp}{unit} (Feels like: {feels}{unit})\n",
        "humidity": "‚Ä¢ Humidity: {humidity}%\n",
        "wind": "‚Ä¢ Wind: {wind_speed} m/s ({wind_dir})\n",
    },
    "pt": {
        "settings_header": "Configura√ß√µes do Clima",
        "api_key": "Chave da API",
        "api_key_sub": "Obtenha sua chave em https://openweathermap.org/api",
        "default_city": "Cidade padr√£o",
        "default_city_sub": "Cidade usada se n√£o for informada no comando",
        "units": "Unidade de Temperatura",
        "units_items": ["Celsius", "Fahrenheit", "Kelvin"],
        "show_humidity": "Mostrar Umidade",
        "show_humidity_sub": "Exibir umidade do ar",
        "show_wind": "Mostrar Vento",
        "show_wind_sub": "Exibir velocidade do vento",
        "usage": "Comando: .wt [cidade]",
        "fetching": "Buscando clima...",
        "usage_full": "Uso: .wt [cidade]\nExemplo: .wt S√£o Paulo",
        "no_api_key": "Configure sua chave da OpenWeatherMap nas configura√ß√µes do plugin.",
        "no_city": "Informe uma cidade ou defina uma cidade padr√£o nas configura√ß√µes.",
        "invalid_key": "Chave de API inv√°lida ou ausente.",
        "city_not_found": "Cidade '{city}' n√£o encontrada.",
        "error_fetch": "Erro ao buscar clima: {err}",
        "error_format": "Erro ao formatar informa√ß√µes do clima.",
        "weather_in": "üå§Ô∏è Clima em {name}, {country}:\n",
        "desc": "‚Ä¢ {desc}\n",
        "temp": "‚Ä¢ Temperatura: {temp}{unit} (Sensa√ß√£o: {feels}{unit})\n",
        "humidity": "‚Ä¢ Umidade: {humidity}%\n",
        "wind": "‚Ä¢ Vento: {wind_speed} m/s ({wind_dir})\n",
    },
    "ru": {
        "settings_header": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã",
        "api_key": "–ö–ª—é—á API",
        "api_key_sub": "–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://openweathermap.org/api",
        "default_city": "–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "default_city_sub": "–ì–æ—Ä–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ",
        "units": "–ï–¥–∏–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        "units_items": ["–¶–µ–ª—å—Å–∏–π", "–§–∞—Ä–µ–Ω–≥–µ–π—Ç", "–ö–µ–ª—å–≤–∏–Ω"],
        "show_humidity": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–ª–∞–∂–Ω–æ—Å—Ç—å",
        "show_humidity_sub": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞",
        "show_wind": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ—Ç–µ—Ä",
        "show_wind_sub": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞",
        "usage": "–ö–æ–º–∞–Ω–¥–∞: .wt [–≥–æ—Ä–æ–¥]",
        "fetching": "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã...",
        "usage_full": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .wt [–≥–æ—Ä–æ–¥]\n–ü—Ä–∏–º–µ—Ä: .wt –ú–æ—Å–∫–≤–∞",
        "no_api_key": "–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á OpenWeatherMap –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞.",
        "no_city": "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
        "invalid_key": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π API –∫–ª—é—á.",
        "city_not_found": "–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "error_fetch": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {err}",
        "error_format": "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.",
        "weather_in": "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {name}, {country}:\n",
        "desc": "‚Ä¢ {desc}\n",
        "temp": "‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}{unit} (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels}{unit})\n",
        "humidity": "‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n",
        "wind": "‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å ({wind_dir})\n",
    }
}

def _get_lang():
    lang = Locale.getDefault().getLanguage().lower()
    if lang.startswith("pt"):
        return "pt"
    if lang.startswith("ru"):
        return "ru"
    return "en"

def _tr(key, **kwargs):
    lang = _get_lang()
    val = LANG.get(lang, LANG["en"]).get(key, "")
    return val.format(**kwargs) if kwargs else val

class WeatherPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.progress_dialog = None

    def create_settings(self):
        lang = _get_lang()
        return [
            Header(text=_tr("settings_header")),
            Input(
                key="api_key",
                text=_tr("api_key"),
                default="",
                subtext=_tr("api_key_sub")
            ),
            Input(
                key="default_city",
                text=_tr("default_city"),
                default="S√£o Paulo",
                subtext=_tr("default_city_sub")
            ),
            Selector(
                key="units",
                text=_tr("units"),
                default=0,
                items=LANG[lang]["units_items"]
            ),
            Switch(
                key="show_humidity",
                text=_tr("show_humidity"),
                default=True,
                subtext=_tr("show_humidity_sub")
            ),
            Switch(
                key="show_wind",
                text=_tr("show_wind"),
                default=True,
                subtext=_tr("show_wind_sub")
            ),
            Divider(text=_tr("usage"))
        ]

    def on_plugin_load(self):
        self.add_on_send_message_hook()
        log("[WeatherPlugin] Loaded")

    def on_plugin_unload(self):
        log("[WeatherPlugin] Unloaded")
        pass

    def _get_units_param(self):
        idx = self.get_setting("units", 0)
        if idx == 0:
            return "metric", "¬∞C"
        elif idx == 1:
            return "imperial", "¬∞F"
        else:
            return "standard", "K"

    def _fetch_weather(self, city, api_key, units, lang):
        try:
            params = {
                "q": city,
                "appid": api_key,
                "units": units,
                "lang": lang
            }
            resp = requests.get(API_BASE_URL, params=params, timeout=10)
            if resp.status_code == 401:
                return None, _tr("invalid_key")
            if resp.status_code == 404:
                return None, _tr("city_not_found", city=city)
            if resp.status_code != 200:
                return None, _tr("error_fetch", err=resp.status_code)
            return resp.json(), None
        except Exception as e:
            log(f"[WeatherPlugin] Exception: {e}")
            return None, _tr("error_fetch", err=e)

    def _format_weather(self, data, temp_unit):
        try:
            name = data.get("name", "Unknown")
            sys = data.get("sys", {})
            country = sys.get("country", "")
            weather = data.get("weather", [{}])[0]
            desc = weather.get("description", "No description").capitalize()
            main = data.get("main", {})
            temp = main.get("temp", "?")
            feels = main.get("feels_like", "?")
            humidity = main.get("humidity", "?")
            wind = data.get("wind", {})
            wind_speed = wind.get("speed", "?")
            wind_deg = wind.get("deg", None)
            wind_dir = self._deg_to_dir(wind_deg) if wind_deg is not None else "?"
            msg = _tr("weather_in", name=name, country=country)
            msg += _tr("desc", desc=desc)
            msg += _tr("temp", temp=temp, feels=feels, unit=temp_unit)
            if self.get_setting("show_humidity", True):
                msg += _tr("humidity", humidity=humidity)
            if self.get_setting("show_wind", True):
                msg += _tr("wind", wind_speed=wind_speed, wind_dir=wind_dir)
            return msg
        except Exception as e:
            log(f"[WeatherPlugin] Format error: {e}")
            return _tr("error_format")

    def _deg_to_dir(self, deg):
        dirs = ["N", "NE", "E", "SE", "S", "SW", "W", "NW"]
        ix = int((deg + 22.5) // 45) % 8
        return dirs[ix]

    def on_send_message_hook(self, account, params):
        if not hasattr(params, 'message') or not isinstance(params.message, str):
            return HookResult()
        msg = params.message.strip()
        if not msg.startswith(".wt"):
            return HookResult()

        usage = _tr("usage_full")
        parts = msg.split(None, 1)
        city_arg = None
        if len(parts) == 1:
            city_arg = None
        else:
            city_arg = parts[1].strip() if parts[1].strip() else None

        default_city = self.get_setting("default_city", "").strip()
        if not default_city:
            default_city = "S√£o Paulo"

        if not city_arg and not default_city:
            params.message = usage
            return HookResult(strategy=HookStrategy.MODIFY, params=params)

        def fetch_and_reply(city_arg):
            try:
                api_key = self.get_setting("api_key", "").strip()
                if not api_key:
                    self._dismiss_dialog()
                    send_message({"peer": getattr(params, "peer", None), "message": _tr("no_api_key")})
                    return
                city = city_arg if city_arg else default_city
                if not city or not city.strip():
                    self._dismiss_dialog()
                    send_message({"peer": getattr(params, "peer", None), "message": _tr("no_city")})
                    return
                units, temp_unit = self._get_units_param()
                data, error = self._fetch_weather(city, api_key, units, _get_lang())
                if error:
                    self._dismiss_dialog()
                    send_message({"peer": getattr(params, "peer", None), "message": error})
                    return
                out_msg = self._format_weather(data, temp_unit)
                self._dismiss_dialog()
                send_message({"peer": getattr(params, "peer", None), "message": out_msg})
            except Exception as e:
                log(f"[WeatherPlugin] Error: {e}")
                self._dismiss_dialog()
                send_message({"peer": getattr(params, "peer", None), "message": _tr("error_fetch", err=e)})

        try:
            fragment = get_last_fragment()
            if fragment is not None:
                self.progress_dialog = AlertDialog(fragment.getParentActivity(), 3)
                self.progress_dialog.show()
        except Exception as e:
            log(f"[WeatherPlugin] Progress dialog error: {e}")

        run_on_queue(lambda: fetch_and_reply(city_arg))
        params.message = _tr("fetching")
        return HookResult(strategy=HookStrategy.CANCEL)

    def _dismiss_dialog(self):
        try:
            if self.progress_dialog is not None and self.progress_dialog.isShowing():
                self.progress_dialog.dismiss()
        except Exception:
            pass
        finally:
            self.progress_dialog = None