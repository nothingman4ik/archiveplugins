import traceback
from android_utils import log, OnClickListener
from base_plugin import BasePlugin, PluginsConstants
from ui.settings import Header, Switch, Input
from hook_utils import find_class, get_private_field
from android.view import View
from android.os import Bundle
from client_utils import get_user_config
from org.telegram.ui import ChatActivity
from org.telegram.messenger import R
from com.exteragram.messenger.plugins.ui import PluginsActivity
from ui.bulletin import BulletinHelper

__id__ = "custom_fab"
__name__ = "Custom FAB"
__description__ = "Customize FAB (Floating Action Button)"
__version__ = "1.3.0"
__author__ = "@itsv1eds & @immat0x1"
__icon__ = "exteraPluginsSup/3"
__min_version__ = "11.9.0"

DEFAULT_HIDE_SMALL = False
DEFAULT_HIDE_LARGE = False
DEFAULT_USE_SAVED = False
DEFAULT_USE_PLUGIN_SETTINGS = False
DEFAULT_USE_PROFILE = False
DEFAULT_USE_SEARCH = False
DEFAULT_USE_CALLS = False
ON_APP_EVENT = PluginsConstants.ON_APP_EVENT
APP_START = PluginsConstants.APP_START

class FabPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.hook_ref = None
        self.hook_resume_ref = None

    def _on_use_saved_change(self, v):
        if v:
            if self.get_setting("use_plugin_settings", DEFAULT_USE_PLUGIN_SETTINGS):
                BulletinHelper.show_info(self._get_string('disable_plugin_settings_first'))
            if self.get_setting("use_profile", DEFAULT_USE_PROFILE):
                BulletinHelper.show_info(self._get_string('disable_profile_first'))
            if self.get_setting("use_calls", DEFAULT_USE_CALLS):
                BulletinHelper.show_info(self._get_string('disable_calls_first'))
        self._apply_hook()

    def _on_use_plugin_settings_change(self, v):
        if v:
            if self.get_setting("use_saved", DEFAULT_USE_SAVED):
                BulletinHelper.show_info(self._get_string('disable_saved_first'))
            if self.get_setting("use_profile", DEFAULT_USE_PROFILE):
                BulletinHelper.show_info(self._get_string('disable_profile_first'))
            if self.get_setting("use_calls", DEFAULT_USE_CALLS):
                BulletinHelper.show_info(self._get_string('disable_calls_first'))
        self._apply_hook()

    def _on_use_profile_change(self, v):
        if v:
            if self.get_setting("use_saved", DEFAULT_USE_SAVED):
                BulletinHelper.show_info(self._get_string('disable_saved_first'))
            if self.get_setting("use_plugin_settings", DEFAULT_USE_PLUGIN_SETTINGS):
                BulletinHelper.show_info(self._get_string('disable_plugin_settings_first'))
            if self.get_setting("use_calls", DEFAULT_USE_CALLS):
                BulletinHelper.show_info(self._get_string('disable_calls_first'))
        self._apply_hook()

    def _on_use_calls_change(self, v):
        if v:
            if self.get_setting("use_saved", DEFAULT_USE_SAVED):
                BulletinHelper.show_info(self._get_string('disable_saved_first'))
            if self.get_setting("use_plugin_settings", DEFAULT_USE_PLUGIN_SETTINGS):
                BulletinHelper.show_info(self._get_string('disable_plugin_settings_first'))
            if self.get_setting("use_profile", DEFAULT_USE_PROFILE):
                BulletinHelper.show_info(self._get_string('disable_profile_first'))
        self._apply_hook()

    def _on_use_search_change(self, v):
        if v:
            if self.get_setting("hide_small", DEFAULT_HIDE_SMALL):
                BulletinHelper.show_info(self._get_string('enable_small_fab_first'))
        self._apply_hook()

    def _get_string(self, key):
        from org.telegram.messenger import LocaleController
        lang = LocaleController.getInstance().getCurrentLocale().getLanguage()

        strings = {
            'ru': {
                'settings_title': "Настройки",
                'hide_small_fab': "Скрыть маленькую кнопку",
                'hide_small_fab_subtext': "Отключить маленькую кнопку",
                'search_shortcut': "Поиск",
                'search_shortcut_subtext': "Заменить маленькую кнопку и открыть поиск",
                'hide_large_fab': "Скрыть большую кнопку",
                'hide_large_fab_subtext': "Отключить большую кнопку",
                'saved_messages_shortcut': "Сохраненные сообщения",
                'saved_messages_shortcut_subtext': "Заменить большую кнопку и открыть сохраненные сообщения",
                'plugin_settings_shortcut': "Настройки плагинов",
                'plugin_settings_shortcut_subtext': "Заменить большую кнопку и открыть настройки плагинов",
                'calls_shortcut': "Звонки",
                'calls_shortcut_subtext': "Заменить большую кнопку и открыть звонки",
                'profile_shortcut': "Профиль",
                'profile_shortcut_subtext': "Заменить большую кнопку и открыть профиль",
                'profile_id': "ID профиля",
                'profile_id_subtext': "Введите ID профиля для открытия",
                'disable_saved_first': "Сначала отключите сохраненные сообщения",
                'disable_plugin_settings_first': "Сначала отключите настройки плагинов",
                'disable_profile_first': "Сначала отключите профиль",
                'disable_calls_first': "Сначала отключите звонки",
                'enable_small_fab_first': "Сначала включите маленькую кнопку"
            },
            'en': {
                'settings_title': "Settings",
                'hide_small_fab': "Hide small FAB",
                'hide_small_fab_subtext': "Disable small FAB",
                'search_shortcut': "Search shortcut",
                'search_shortcut_subtext': "Replace small FAB and open Search",
                'hide_large_fab': "Hide large FAB",
                'hide_large_fab_subtext': "Disable large FAB",
                'saved_messages_shortcut': "Saved Messages shortcut",
                'saved_messages_shortcut_subtext': "Replace large FAB and open Saved Messages",
                'plugin_settings_shortcut': "Plugin Settings shortcut",
                'plugin_settings_shortcut_subtext': "Replace large FAB and open Plugins settings",
                'calls_shortcut': "Calls shortcut",
                'calls_shortcut_subtext': "Replace large FAB and open Calls",
                'profile_shortcut': "Profile shortcut",
                'profile_shortcut_subtext': "Replace large FAB and open Profile",
                'profile_id': "Profile ID",
                'profile_id_subtext': "Enter Profile ID to open",
                'disable_saved_first': "Disable Saved Messages shortcut first",
                'disable_plugin_settings_first': "Disable Plugin Settings shortcut first",
                'disable_profile_first': "Disable Profile ID shortcut first",
                'disable_calls_first': "Disable Calls shortcut first",
                'enable_small_fab_first': "Enable small FAB first"
            }
        }

        lang_key = 'ru' if lang.startswith('ru') else 'en'
        return strings[lang_key].get(key, key)

    def create_settings(self):
        hide_large_current = self.get_setting("hide_large", DEFAULT_HIDE_LARGE)
        hide_small_current = self.get_setting("hide_small", DEFAULT_HIDE_SMALL)
        items = [
            Header(text=self._get_string('settings_title')),
            Switch(
                key="hide_small",
                text=self._get_string('hide_small_fab'),
                icon="floating_pencil",
                subtext=self._get_string('hide_small_fab_subtext'),
                default=DEFAULT_HIDE_SMALL,
                on_change=lambda v: self._apply_hook()
            ),
        ]
        if not hide_small_current:
            items.append(
                Switch(
                    key="use_search",
                    text=self._get_string('search_shortcut'),
                    icon="ic_ab_search",
                    subtext=self._get_string('search_shortcut_subtext'),
                    default=DEFAULT_USE_SEARCH,
                    on_change=lambda v: self._on_use_search_change(v)
                )
            )
        items.append(
            Switch(
                key="hide_large",
                text=self._get_string('hide_large_fab'),
                icon="msg_camera",
                subtext=self._get_string('hide_large_fab_subtext'),
                default=DEFAULT_HIDE_LARGE,
                on_change=lambda v: self._apply_hook()
            ),
        )
        if not hide_large_current:
            items.extend([
                Switch(
                    key="use_saved",
                    text=self._get_string('saved_messages_shortcut'),
                    icon="chats_saved",
                    subtext=self._get_string('saved_messages_shortcut_subtext'),
                    default=DEFAULT_USE_SAVED,
                    on_change=lambda v: self._on_use_saved_change(v)
                ),
                Switch(
                    key="use_plugin_settings",
                    text=self._get_string('plugin_settings_shortcut'),
                    icon="msg_plugins",
                    subtext=self._get_string('plugin_settings_shortcut_subtext'),
                    default=DEFAULT_USE_PLUGIN_SETTINGS,
                    on_change=lambda v: self._on_use_plugin_settings_change(v)
                ),
                Switch(
                    key="use_calls",
                    text=self._get_string('calls_shortcut'),
                    icon="msg_calls",
                    subtext=self._get_string('calls_shortcut_subtext'),
                    default=DEFAULT_USE_CALLS,
                    on_change=lambda v: self._on_use_calls_change(v)
                ),
                Switch(
                    key="use_profile",
                    text=self._get_string('profile_shortcut'),
                    icon="msg_contacts",
                    subtext=self._get_string('profile_shortcut_subtext'),
                    default=DEFAULT_USE_PROFILE,
                    on_change=lambda v: self._on_use_profile_change(v)
                ),
            ])
        if self.get_setting("use_profile", DEFAULT_USE_PROFILE) and not hide_large_current:
            items.append(
                Input(
                    key="profile_id",
                    text=self._get_string('profile_id'),
                    icon="msg_pin_code",
                    default="",
                    subtext=self._get_string('profile_id_subtext'),
                    on_change=lambda v: self._apply_hook()
                )
            )
        return items
    
    def on_app_event(self, event_type):
        if event_type == APP_START:
            self._apply_hook()

    def on_plugin_load(self):
        self.add_hook(ON_APP_EVENT)
        self._apply_hook()
        try:
            cls = find_class("org.telegram.ui.DialogsActivity")
            method = cls.getClass().getDeclaredMethod("onResume")
            self.hook_resume_ref = self.hook_method(method, ResumeHook(self))
            log(f"[{__id__}] hooked onResume")
        except Exception as e:
            log(f"[{__id__}] resume hook error: {e}")
        
        log(f"[{__id__}] Testing settings:")
        log(f"[{__id__}] hide_small: {self.get_setting('hide_small', DEFAULT_HIDE_SMALL)}")
        log(f"[{__id__}] hide_large: {self.get_setting('hide_large', DEFAULT_HIDE_LARGE)}")
        log(f"[{__id__}] use_search: {self.get_setting('use_search', DEFAULT_USE_SEARCH)}")
        log(f"[{__id__}] use_calls: {self.get_setting('use_calls', DEFAULT_USE_CALLS)}")
        
        log(f"[{__id__}] plugin loaded")

    def on_plugin_unload(self):
        self._remove_hook()
        log(f"[{__id__}] plugin unloaded")

    def _apply_hook(self):
        self._remove_hook()
        try:
            cls = find_class("org.telegram.ui.DialogsActivity")
            ctx = find_class("android.content.Context")
            method = cls.getClass().getDeclaredMethod("createView", ctx.getClass())
            self.hook_ref = self.hook_method(method, CreateViewHook(self))
            log(f"[{__id__}] hooked createView")
        except Exception as e:
            log(f"[{__id__}] hook error: {e}\n{traceback.format_exc()}")

    def _remove_hook(self):
        if getattr(self, 'hook_ref', None):
            self.unhook_method(self.hook_ref)
            self.hook_ref = None
        if getattr(self, 'hook_resume_ref', None):
            self.unhook_method(self.hook_resume_ref)
            self.hook_resume_ref = None

class CreateViewHook:
    def __init__(self, plugin: FabPlugin):
        self.plugin = plugin

    def after_hooked_method(self, param):
        frag = param.thisObject
        try:
            hide_small = self.plugin.get_setting("hide_small", DEFAULT_HIDE_SMALL)
            hide_large = self.plugin.get_setting("hide_large", DEFAULT_HIDE_LARGE)
            use_saved = self.plugin.get_setting("use_saved", DEFAULT_USE_SAVED)
            use_plugin_settings = self.plugin.get_setting("use_plugin_settings", DEFAULT_USE_PLUGIN_SETTINGS)
            use_profile = self.plugin.get_setting("use_profile", DEFAULT_USE_PROFILE)
            use_search = self.plugin.get_setting("use_search", DEFAULT_USE_SEARCH)
            use_calls = self.plugin.get_setting("use_calls", DEFAULT_USE_CALLS)
            profile_id = self.plugin.get_setting("profile_id", "")
            
            log(f"[{__id__}] Settings: hide_small={hide_small}, hide_large={hide_large}, use_search={use_search}, use_calls={use_calls}")
            
            small_btn = get_private_field(frag, "floatingButton2Container")
            large_btn = get_private_field(frag, "floatingButtonContainer")
            icon = get_private_field(frag, "floatingButton")
            small_icon = get_private_field(frag, "floatingButton2")
            search_item = get_private_field(frag, "searchItem")
            only_select = get_private_field(frag, "onlySelect")
            
            log(f"[{__id__}] Buttons: small_btn={small_btn}, large_btn={large_btn}, icon={icon}, small_icon={small_icon}")
            
            if search_item is not None and use_search:
                log(f"[{__id__}] Hiding search item because search shortcut is enabled")
                search_item.setVisibility(View.GONE)
            elif search_item is not None:
                log(f"[{__id__}] Showing search item")
                search_item.setVisibility(View.VISIBLE)
            
            if only_select:
                log(f"[{__id__}] Only select mode, hiding buttons")
                if small_btn is not None:
                    small_btn.setVisibility(View.GONE)
                if large_btn is not None:
                    large_btn.setVisibility(View.GONE)
                return

            if small_btn is not None:
                if hide_small:
                    log(f"[{__id__}] Hiding small button")
                    small_btn.setVisibility(View.GONE)
                    small_btn.setOnClickListener(None)
                else:
                    log(f"[{__id__}] Showing small button")
                    small_btn.setVisibility(View.VISIBLE)
                    if use_search and small_icon is not None:
                        log(f"[{__id__}] Setting search icon for small button")
                        small_icon.setImageResource(R.drawable.ic_ab_search)
                        def open_search():
                            try:
                                log(f"[{__id__}] Opening search via searchItem.toggleSearch")
                                if search_item is not None:
                                    search_item.toggleSearch(True)
                                    log(f"[{__id__}] searchItem.toggleSearch called successfully")
                                else:
                                    log(f"[{__id__}] searchItem is None!")
                            except Exception as ex:
                                log(f"[{__id__}] open_search error: {ex}")
                        small_btn.setOnClickListener(OnClickListener(open_search))

            if large_btn is not None:
                if hide_large:
                    log(f"[{__id__}] Hiding large button")
                    large_btn.setVisibility(View.GONE)
                    large_btn.setOnClickListener(None)
                else:
                    log(f"[{__id__}] Showing large button")
                    large_btn.setVisibility(View.VISIBLE)
                    
                    if icon is not None:
                        icon.setImageResource(R.drawable.msg_camera)
                    
                    if use_profile and profile_id:
                        log(f"[{__id__}] Setting profile functionality")
                        if icon is not None:
                            icon.setImageResource(R.drawable.msg_contacts)
                        def open_profile():
                            try:
                                uid = int(profile_id)
                                b = Bundle()
                                b.putLong("user_id", uid)
                                act = frag.getParentActivity()
                                if act:
                                    frag.presentFragment(ChatActivity(b))
                            except Exception as ex:
                                log(f"[{__id__}] open_profile error: {ex}")
                        large_btn.setOnClickListener(OnClickListener(open_profile))
                    elif use_saved:
                        log(f"[{__id__}] Setting saved messages functionality")
                        if icon is not None:
                            icon.setImageResource(R.drawable.chats_saved)
                        def open_saved():
                            try:
                                uid = get_user_config().getClientUserId()
                                b = Bundle()
                                b.putLong("user_id", uid)
                                act = frag.getParentActivity()
                                if act:
                                    frag.presentFragment(ChatActivity(b))
                            except Exception as ex:
                                log(f"[{__id__}] open_saved error: {ex}")
                        large_btn.setOnClickListener(OnClickListener(open_saved))
                    elif use_plugin_settings:
                        log(f"[{__id__}] Setting plugin settings functionality")
                        if icon is not None:
                            icon.setImageResource(R.drawable.msg_plugins)
                        def open_plugin_settings():
                            try:
                                act = frag.getParentActivity()
                                if act:
                                    frag.presentFragment(PluginsActivity())
                            except Exception as ex:
                                log(f"[{__id__}] open_plugin_settings error: {ex}")
                        large_btn.setOnClickListener(OnClickListener(open_plugin_settings))
                    elif use_calls:
                        log(f"[{__id__}] Setting calls functionality")
                        if icon is not None:
                            icon.setImageResource(R.drawable.msg_calls)
                        def open_calls():
                            try:
                                from org.telegram.ui import CallLogActivity
                                act = frag.getParentActivity()
                                if act:
                                    frag.presentFragment(CallLogActivity())
                            except Exception as ex:
                                log(f"[{__id__}] open_calls error: {ex}")
                        large_btn.setOnClickListener(OnClickListener(open_calls))
        except Exception as e:
            log(f"[{__id__}] after_hook error: {e}\n{traceback.format_exc()}")

class ResumeHook:
    def __init__(self, plugin: FabPlugin):
        self.plugin = plugin

    def after_hooked_method(self, param):
        try:
            frag = param.thisObject
            use_search = self.plugin.get_setting("use_search", DEFAULT_USE_SEARCH)
            search_item = get_private_field(frag, "searchItem")
            
            if search_item is not None and use_search:
                log(f"[{__id__}] ResumeHook: Hiding search item because search shortcut is enabled")
                search_item.setVisibility(View.GONE)
            elif search_item is not None:
                log(f"[{__id__}] ResumeHook: Showing search item")
                search_item.setVisibility(View.VISIBLE)
                
            CreateViewHook(self.plugin).after_hooked_method(param)
        except Exception as e:
            log(f"[{__id__}] resume after_hook error: {e}\n{traceback.format_exc()}")