__id__ = "Unlimited_Pins"
__name__ = "Unlimited Pins"
__description__ = "Закрепляйте локально бесконечное количество чатов и каналов, обходя ограничение Telegram."
__version__ = "1.2.0"
__author__ = "@MorePlugins"
__icon__ = "sPluginIDE/14"
__min_version__ = "11.12.0"

import json
import traceback
from typing import Any, List, Optional

from base_plugin import BasePlugin, MethodHook, HookResult, HookStrategy
from client_utils import get_last_fragment, get_messages_controller
from android_utils import run_on_ui_thread, log
from hook_utils import find_class
from ui.bulletin import BulletinHelper
from ui.settings import Header, Switch, Text, Divider

class UnlimitedPinsPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.pinned_chats: List[int] = []
        self.dialogs_activity_hook = None
        self.pin_dialog_hook = None
        self.is_reorder_hook_active = False
        self.DialogsActivity: Optional[type] = None
        self.MessagesController: Optional[type] = None

    def on_plugin_load(self):
        try:
            self._load_classes()
            self._load_pinned_chats()
            self._setup_pin_hook()
            self.add_app_event_hook()
            log(f"[{__id__}] Плагин Unlimited Pins успешно загружен.")
        except Exception as e:
            log(f"[{__id__}] Ошибка при загрузке плагина: {e}\n{traceback.format_exc()}")
            BulletinHelper.show_error("Ошибка загрузки Unlimited Pins")

    def on_plugin_unload(self):
        if self.dialogs_activity_hook:
            self.dialogs_activity_hook.unhook()
        if self.pin_dialog_hook:
            self.pin_dialog_hook.unhook()
        self.is_reorder_hook_active = False
        log(f"[{__id__}] Плагин Unlimited Pins выгружен.")

    def _load_classes(self):
        if not self.DialogsActivity:
            self.DialogsActivity = find_class("org.telegram.ui.DialogsActivity")
        if not self.MessagesController:
            self.MessagesController = find_class("org.telegram.messenger.MessagesController")

    def create_settings(self):
        settings_list = [
            Header(text="Локальные закрепленные чаты"),
            Switch(
                key="enabled",
                text="Включить локальные закрепления",
                default=True,
                icon="msg_pin_solar",
                subtext="Когда выключено, чаты не будут переупорядочиваться."
            ),
            Divider()
        ]

        self._load_pinned_chats()
        
        if not self.pinned_chats:
            settings_list.append(Text(text="У вас пока нет локально закрепленных чатов.", icon="msg_info"))
        else:
            settings_list.append(Header(text=f"Закрепленные чаты ({len(self.pinned_chats)})"))
            mc = get_messages_controller()
            for chat_id in self.pinned_chats:
                chat = mc.getChat(-chat_id if chat_id < 0 else 0)
                user = mc.getUser(chat_id if chat_id > 0 else 0)
                
                title = "Неизвестный чат"
                if chat:
                    title = chat.title
                elif user:
                    title = f"{user.first_name or ''} {user.last_name or ''}".strip()

                def create_unpin_action(pb_id):
                    def action(view):
                        self._remove_local_pin(pb_id)
                        frag = get_last_fragment()
                        if frag and hasattr(frag, 'rebuildAllFragments'):
                           run_on_ui_thread(lambda: frag.rebuildAllFragments(True))
                    return action

                settings_list.append(
                    Text(
                        text=title,
                        subtext=f"ID: {chat_id}",
                        icon="msg_unpin_solar",
                        on_click=create_unpin_action(chat_id)
                    )
                )
            settings_list.append(Divider())

        return settings_list

    def on_app_event_hook(self, event_type: str, fragment: Any):
        if not self.get_setting("enabled", True):
            if self.is_reorder_hook_active:
                self._remove_dialogs_reorder_hook()
            return
            
        is_dialogs_fragment = fragment and isinstance(fragment, self.DialogsActivity)
        
        if is_dialogs_fragment and not self.is_reorder_hook_active:
            self._add_dialogs_reorder_hook()
        elif not is_dialogs_fragment and self.is_reorder_hook_active:
            self._remove_dialogs_reorder_hook()

    def _setup_pin_hook(self):
        if self.pin_dialog_hook or not self.MessagesController:
            return
        try:
            TLRPC_RequestDelegate = find_class("org.telegram.tgnet.TLRPC$RequestDelegate")
            long_type = find_class("java.lang.Long").TYPE
            boolean_type = find_class("java.lang.Boolean").TYPE

            method_to_hook = self.MessagesController.getDeclaredMethod(
                "pinDialog", long_type, boolean_type, TLRPC_RequestDelegate, long_type
            )
            self.pin_dialog_hook = self.hook_method(
                method_to_hook,
                self.PinDialogHook(self)
            )
            log(f"[{__id__}] Хук на MessagesController.pinDialog успешно установлен.")
        except Exception as e:
            log(f"[{__id__}] Не удалось установить хук на pinDialog: {e}\n{traceback.format_exc()}")

    def _load_pinned_chats(self):
        try:
            pinned_json = self.get_setting("pinned_chats_list", "[]")
            self.pinned_chats = json.loads(pinned_json)
        except (json.JSONDecodeError, TypeError):
            self.pinned_chats = []
            self.set_setting("pinned_chats_list", "[]")

    def _save_pinned_chats(self):
        self.set_setting("pinned_chats_list", json.dumps(self.pinned_chats))
        self._force_update_dialogs()

    def _add_local_pin(self, dialog_id: int):
        if dialog_id not in self.pinned_chats:
            self.pinned_chats.insert(0, dialog_id)
            self._save_pinned_chats()
            BulletinHelper.show_success("Чат закреплен локально")

    def _remove_local_pin(self, dialog_id: int):
        if dialog_id in self.pinned_chats:
            self.pinned_chats.remove(dialog_id)
            self._save_pinned_chats()
            BulletinHelper.show_success("Чат откреплен локально")

    def _add_dialogs_reorder_hook(self):
        if self.is_reorder_hook_active or not self.DialogsActivity:
            return
        try:
            method_to_hook = self.DialogsActivity.getDeclaredMethod("updateRows", bool)
            self.dialogs_activity_hook = self.hook_method(
                method_to_hook,
                self.DialogsReorderHook(self)
            )
            self.is_reorder_hook_active = True
            log(f"[{__id__}] Хук на DialogsActivity.updateRows для сортировки установлен.")
            self._force_update_dialogs()
        except Exception as e:
            log(f"[{__id__}] Не удалось установить хук на updateRows: {e}")

    def _remove_dialogs_reorder_hook(self):
        if self.dialogs_activity_hook:
            self.dialogs_activity_hook.unhook()
            self.dialogs_activity_hook = None
        self.is_reorder_hook_active = False
        log(f"[{__id__}] Хук с DialogsActivity.updateRows снят.")
        self._force_update_dialogs()

    def _force_update_dialogs(self):
        fragment = get_last_fragment()
        if fragment and isinstance(fragment, self.DialogsActivity):
            run_on_ui_thread(lambda: fragment.updateRows(False))

    class PinDialogHook(MethodHook):
        def __init__(self, plugin_instance):
            self.plugin = plugin_instance

        def before_hooked_method(self, param):
            if not self.plugin.get_setting("enabled", True):
                return HookResult()
            
            dialog_id = param.args[0]
            is_pinning = param.args[1]

            if is_pinning:
                self.plugin._add_local_pin(dialog_id)
                param.result = HookResult(strategy=HookStrategy.CANCEL)
            else:
                self.plugin._remove_local_pin(dialog_id)
                param.result = HookResult()

    class DialogsReorderHook(MethodHook):
        def __init__(self, plugin_instance):
            self.plugin = plugin_instance

        def before_hooked_method(self, param):
            if not self.plugin.get_setting("enabled", True) or not self.plugin.pinned_chats:
                return

            dialogs_activity = param.thisObject
            if not hasattr(dialogs_activity, 'dialogsList') or not dialogs_activity.dialogsList:
                return

            original_dialogs = list(dialogs_activity.dialogsList)
            pinned_dialog_objects = []
            other_dialog_objects = []

            for dialog in original_dialogs:
                if dialog.id in self.plugin.pinned_chats:
                    pinned_dialog_objects.append(dialog)
                else:
                    other_dialog_objects.append(dialog)

            if not pinned_dialog_objects:
                return

            pinned_dialog_objects.sort(key=lambda d: self.plugin.pinned_chats.index(d.id))

            dialogs_activity.dialogsList.clear()
            dialogs_activity.dialogsList.addAll(pinned_dialog_objects)
            dialogs_activity.dialogsList.addAll(other_dialog_objects)