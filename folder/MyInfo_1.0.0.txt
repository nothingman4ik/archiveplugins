# –ü—Ä–∏–≤–µ—Ç! üëã
# –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º –∫–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π —É–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞: @RnPlugins
# –Ø –Ω–µ –ø—Ä–æ—Ç–∏–≤, –¥–µ–ª–∞–π –∫—Ä—É—Ç—ã–µ —à—Ç—É–∫–∏, —Ä–∞–∑–≤–∏–≤–∞–π, —É–ª—É—á—à–∞–π ‚Äî —Ç–æ–ª—å–∫–æ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º üôå
# –ü—É—Å—Ç—å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è, —É–¥–∞—á–∏ —Ç–µ–±–µ –≤ –∫–æ–¥–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!)

import re
from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import get_last_fragment
from org.telegram.tgnet import TLRPC
from org.telegram.messenger import LocaleController
from ui.settings import Header, Input, Divider, Selector, Switch
from ui.bulletin import BulletinHelper
from java.util import ArrayList
from markdown_utils import parse_markdown

__id__ = "info_block"
__name__ = "Info Block"
__description__ = """–í–∞—à–µ –±–∏–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ; –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏/–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö

Your bio by command; setting by commands/in settings"""
__author__ = "@RnPlugins"
__version__ = "1.0.0"
__icon__ = "RnPluginsS/5"
__min_version__ = "11.12.0"

class InfoPlugin(BasePlugin):
    def on_plugin_load(self):
        self.add_on_send_message_hook()

    def create_settings(self):
        lang = LocaleController.getInstance().getCurrentLocale().getLanguage()
        ru = lang.startswith("ru")
        items = ["–û–±—ã—á–Ω—ã–π", "–ö—Ä–∞—Ç–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–ö—Ä–∞—Ç–∫–∏–π –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"] if ru else ["Normal", "Short"]
        items2 = [
            "‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ‚Ä¢‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ|‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ‚Ä¢‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ",
            "‚úß ‚ñ¨‚ñ≠‚ñ¨ ‚ñ¨‚ñ≠‚ñ¨ ‚ú¶‚úß‚ú¶ ‚ñ¨‚ñ≠‚ñ¨ ‚ñ¨‚ñ≠‚ñ¨ ‚úß",
            "‡ºª‡º∫‚îÖ‚îÅ‚îÅ‚îÅ‚îÖ‡≠®‡≠ß‚îÖ‚îÅ‚îÅ‚îÅ‚îÖ‡ºª‡º∫",
            "‚îç‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îô‚óÜ‚îï‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îë|‚îï‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îë‚óÜ‚îç‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îô",
            "–°–≤–æ–π" if ru else "Custom"
        ]
        s = {
            "hstyle": "–°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤" if ru else "Heading style",
            "rstyle": "–°—Ç–∏–ª—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π" if ru else "Separator style",
            "header": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞" if ru else "Account info",
            "name": "–ò–º—è" if ru else "Name",
            "age": "–í–æ–∑—Ä–∞—Å—Ç" if ru else "Age",
            "accage": "–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞" if ru else "Account age",
            "bday": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if ru else "Birthday",
            "activity": "–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" if ru else "Activity time",
            "about": "–û —Å–µ–±–µ" if ru else "About",
            "addy": "–°–≤–æ—ë" if ru else "Your",
            "items": items,
            "items2": items2,
            "custom_sep": "–°–≤–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å" if ru else "Custom separator",
            "custom_sep_sub": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '|' –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–≥–æ –∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ" if ru else "Use '|' to separate lower and upper",
            "command": "–ö–æ–º–∞–Ω–¥–∞" if ru else "Command",
            "sub_command": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: .info" if ru else "Default: .info",
            "thanks": "–°–æ–∑–¥–∞–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è @RnPlugins" if ru else "Created and updated by @RnPlugins",
            "collapse": "–°–≤–µ—Ä–Ω—É—Ç—å —Ü–∏—Ç–∞—Ç—É" if ru else "Collapse quote",
            "collapse_sub": "–¶–∏—Ç–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤—ë—Ä–Ω—É—Ç–∞" if ru else "The quote will be collapsed by default",
            "addy_sub": "–°–≤–æ–π —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: *–¢–µ–∫—Å—Ç:* –≠—Ç–æ —Ç–µ–∫—Å—Ç" if ru else "Your text, for example: *Text:* This is text",
            "help": (
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown: *–ñ–∏—Ä–Ω—ã–π* _–ö—É—Ä—Å–∏–≤_ ~–ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π~\n\n"
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏, –ø–∏—à–∏—Ç–µ your_command(name|age|accage|bday|activity|about|addy) <—Ç–µ–∫—Å—Ç>"
            ) if ru else (
                "Markdown is supported: *Bold* _Italic_ ~Strikethrough~\n\n"
                "To change with commands, write your_command(name|age|accage|bday|activity|about|addy) <text>"
            )
        }
        return [
            Divider(text=s["help"].replace("your_command", self.get_setting("cus_command", ".info"))),
            Selector(key="hstyle", text=s["hstyle"], items=s["items"], default=0, icon="msg_channel_14"),
            Selector(key="rstyle", text=s["rstyle"], items=s["items2"], default=0, icon="msg_colors"),
            Input(key="custom_sep", text=s["custom_sep"], subtext=s["custom_sep_sub"], icon="msg_edit")
                if self.get_setting("rstyle", 0) == len(items2) - 1 else None,
            Switch(key="collapsed", text=s["collapse"], default=True, subtext=s["collapse_sub"], icon="msg_log"),
            Divider(),
            Input(key="cus_command", text=s["command"], icon="input_bot1", default=".info"),
            Divider(),
            Header(text=s["header"]),
            Input(key="name", text=s["name"], default="", icon="msg_contacts"),
            Input(key="age", text=s["age"], default="", icon="msg_contacts_14"),
            Input(key="accage", text=s["accage"], default="", icon="msg_calendar2"),
            Input(key="bday", text=s["bday"], default="", icon="msg_gift_premium"),
            Input(key="activity", text=s["activity"], default="", icon="menu_premium_clock"),
            Input(key="about", text=s["about"], default="", icon="msg_folders_requests"),
            Input(key="addy", text=s["addy"], default="", icon="msg_media", subtext=s["addy_sub"]),
            Divider(text=s["thanks"])
        ]

    def on_send_message_hook(self, account, params):
        msg = params.message
        if not isinstance(msg, str):
            return HookResult()

        command = self.get_setting("cus_command", ".info")
        if msg.strip() == command:
            lang = LocaleController.getInstance().getCurrentLocale().getLanguage()
            ru = lang.startswith("ru")

            def lab(k):
                return {
                    "name":     ("–ò–º—è", "–∏–º—è", "Name", "name"),
                    "age":      ("–í–æ–∑—Ä–∞—Å—Ç", "–≤–æ–∑—Ä–∞—Å—Ç", "Age", "age"),
                    "accage":   ("–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞", "–∞–∫–∫—É", "Account age", "acc age"),
                    "bday":     ("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–¥—Ä", "Birthday", "bday"),
                    "activity": ("–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–≤ —Å–µ—Ç–∏", "Activity time", "online"),
                    "about":    ("–û –º–Ω–µ", "–æ –º–Ω–µ", "About", "about"),
                    "addy":     ("", "", "", "")
                }[k][self.get_setting("hstyle", 0) if ru else self.get_setting("hstyle", 0) + 2]

            keys = ["name", "age", "accage", "bday", "activity", "about", "addy"]

            rstyle = self.get_setting("rstyle", 0)
            if rstyle == 0:
                sep, end = "‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ‚Ä¢‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ", "‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ‚Ä¢‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ"
            elif rstyle == 1:
                sep = end = "‚úß ‚ñ¨‚ñ≠‚ñ¨ ‚ñ¨‚ñ≠‚ñ¨ ‚ú¶‚úß‚ú¶ ‚ñ¨‚ñ≠‚ñ¨ ‚ñ¨‚ñ≠‚ñ¨ ‚úß"
            elif rstyle == 2:
                sep = end = "‡ºª‡º∫‚îÖ‚îÅ‚îÅ‚îÅ‚îÖ‡≠®‡≠ß‚îÖ‚îÅ‚îÅ‚îÅ‚îÖ‡ºª‡º∫"
            elif rstyle == 3:
                sep, end = "‚îç‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îô‚óÜ‚îï‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îë", "‚îï‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îë‚óÜ‚îç‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îÅ‚îÄ‚îÄ‚îô"
            else:
                parts = self.get_setting("custom_sep", "").split("|", 1)
                sep = parts[0] if parts[0] else ""
                end = parts[1] if len(parts) > 1 else sep

            segments = []
            for k in keys:
                v = self.get_setting(k, "")
                if v:
                    if k == "addy":
                        segments.append(v)
                    else:
                        segments.append(f"*{lab(k)}*: {v}")

            body = "\n\n".join(segments)
            full = f"{sep}\n{body}\n{end}"

            try:
                parsed = parse_markdown(full)
                params.message = parsed.text
                ents = ArrayList()
                for ent in parsed.entities:
                    ents.add(ent.to_tlrpc_object())
            except Exception:
                params.message = full
                ents = ArrayList()

            start = len(sep) + 1
            full_text = params.message
            end_index = full_text.find("\n" + end)
            if end_index == -1:
                block_length = len(full_text) - start
            else:
                block_length = end_index - start

            block = TLRPC.TL_messageEntityBlockquote()
            block.collapsed = self.get_setting("collapsed", True)
            block.offset = start
            block.length = block_length
            ents.add(block)

            params.entities = ents
            return HookResult(strategy=HookStrategy.MODIFY, params=params)

        m = re.match(
            fr"^\.{command}"
            r"(name|age|accage|bday|activity|about|addy)\s+(.+)",
            msg.strip(), re.IGNORECASE
        )
        if m:
            k, val = m.group(1).lower(), m.group(2).strip()
            self.set_setting(k, val)
            BulletinHelper.show_success(f"{k} = {val}", get_last_fragment())
            return HookResult(strategy=HookStrategy.CANCEL)

        return HookResult()
        
# –ü—Ä–∏–≤–µ—Ç! üëã
# –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º –∫–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π —É–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞: @RnPlugins
# –Ø –Ω–µ –ø—Ä–æ—Ç–∏–≤, –¥–µ–ª–∞–π –∫—Ä—É—Ç—ã–µ —à—Ç—É–∫–∏, —Ä–∞–∑–≤–∏–≤–∞–π, —É–ª—É—á—à–∞–π ‚Äî —Ç–æ–ª—å–∫–æ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º üôå
# –ü—É—Å—Ç—å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è, —É–¥–∞—á–∏ —Ç–µ–±–µ –≤ –∫–æ–¥–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!)