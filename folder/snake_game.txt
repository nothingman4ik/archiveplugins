
from base_plugin import BasePlugin, MenuItemData, MenuItemType
from ui.bulletin import BulletinHelper
from client_utils import get_last_fragment
from android_utils import run_on_ui_thread
from hook_utils import find_class
from android.content import Context, Intent
from android.net import Uri
from java import dynamic_proxy
import uuid

__id__ = "snake_game"
__name__ = "Snake Game apple üåü"
__description__ = "a snake running after an apple"
__author__ = "@SaturnFake @JasonVurhyz"
__version__ = "1.5.2"
__min_version__ = "11.12.0"
__icon__ = "Plugins_Test/1"

url = "https://snake-test-silk.vercel.app"

class SnakeGamePlugin(BasePlugin):
    WindowManager, LayoutParams, PixelFormat, WebView, Button, LinearLayout, ApplicationLoader, View, OnClickListener = (None,) * 9
    window_manager = None
    browser_view = None
    is_game_open = False

    def __init__(self):
        super().__init__()

    def load_android_classes(self):
        if self.WindowManager:
            return
        try:
            self.WindowManager = find_class("android.view.WindowManager")
            self.LayoutParams = find_class("android.view.WindowManager$LayoutParams")
            self.PixelFormat = find_class("android.graphics.PixelFormat")
            self.WebView = find_class("android.webkit.WebView")
            self.Button = find_class("android.widget.Button")
            self.LinearLayout = find_class("android.widget.LinearLayout")
            self.ApplicationLoader = find_class("org.telegram.messenger.ApplicationLoader")
            self.View = find_class("android.view.View")
            self.OnClickListener = find_class("android.view.View$OnClickListener")
        except Exception as e:
            raise

    def on_plugin_load(self):
        try:
            self.load_android_classes()
            self.add_menu_item(MenuItemData(
                menu_type=MenuItemType.CHAT_ACTION_MENU,
                text="Snake gameüíé",
                icon="book_logo",
                on_click=self.toggle_game
            ))
        except Exception as e:
            BulletinHelper.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

    def on_plugin_unload(self):
        try:
            run_on_ui_thread(self.close_game)
        except Exception as e:
            pass

    def toggle_game(self, context: dict):
        try:
            chat_id = context.get("dialog_id")
            if chat_id:
                pass

            drawer_layout = context.get("drawer_layout")
            if drawer_layout:
                drawer_layout.closeDrawer(False)

            if self.is_game_open:
                run_on_ui_thread(self.close_game)
            else:
                run_on_ui_thread(self.open_game)
        except Exception as e:
            BulletinHelper.show_error(f"–û—à–∏–±–∫–∞: {e}")

    def open_game(self):
        if self.is_game_open:
            return

        self.is_game_open = True
        try:
            app_context = self.ApplicationLoader.applicationContext
            if not app_context:
                self.is_game_open = False
                return

            self.window_manager = app_context.getSystemService(Context.WINDOW_SERVICE)
            display = self.window_manager.getDefaultDisplay()
            size = find_class("android.graphics.Point")()
            display.getSize(size)
            screen_width, screen_height = size.x, size.y

            layout = self.LinearLayout(app_context)
            layout.setOrientation(self.LinearLayout.VERTICAL)

            web_view = self.WebView(app_context)
            web_settings = web_view.getSettings()
            web_settings.setJavaScriptEnabled(True)
            web_settings.setDomStorageEnabled(True)
            web_settings.setCacheMode(web_settings.LOAD_NO_CACHE)

            web_view.loadUrl(url) 

            layout_params_web = self.LinearLayout.LayoutParams(
                self.LinearLayout.LayoutParams.MATCH_PARENT,
                0,
                1.0
            )
            layout.addView(web_view, layout_params_web)

            close_button = self.Button(app_context)
            close_button.setText("–ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É")

            class CloseButtonListener(dynamic_proxy(self.OnClickListener)):
                def __init__(self, plugin):
                    super().__init__()
                    self.plugin = plugin

                def onClick(self, view):
                    run_on_ui_thread(self.plugin.close_game)

            close_button.setOnClickListener(CloseButtonListener(self))

            layout_params_button = self.LinearLayout.LayoutParams(
                self.LinearLayout.LayoutParams.MATCH_PARENT,
                self.LinearLayout.LayoutParams.WRAP_CONTENT
            )
            layout.addView(close_button, layout_params_button)

            self.browser_view = layout

            params = self.LayoutParams()
            Build_VERSION = find_class("android.os.Build$VERSION")
            params.type = self.LayoutParams.TYPE_APPLICATION_OVERLAY if Build_VERSION.SDK_INT >= 26 else self.LayoutParams.TYPE_PHONE
            params.flags = self.LayoutParams.FLAG_LAYOUT_NO_LIMITS
            params.format = self.PixelFormat.TRANSLUCENT
            params.gravity = find_class("android.view.Gravity").TOP | find_class("android.view.Gravity").LEFT
            params.width = int(screen_width * 0.9) + 100
            params.height = int(screen_height * 0.8) + 450
            params.x = int(screen_width * 0.0015625)
            params.y = int(screen_height * 0.00001)

            Settings = find_class("android.provider.Settings")
            if Build_VERSION.SDK_INT >= 23 and not Settings.canDrawOverlays(app_context):
                fragment = get_last_fragment()
                activity = fragment.getParentActivity() if fragment else None
                if activity:
                    intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                                    Uri.parse("package:" + app_context.getPackageName()))
                    activity.startActivity(intent)
                    self.is_game_open = False
                    BulletinHelper.show_error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã.")
                    return
                else:
                    self.is_game_open = False
                    return

            self.window_manager.addView(self.browser_view, params)
        except Exception as e:
            self.is_game_open = False
            BulletinHelper.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä—ã: {e}")
            self.close_game()

    def close_game(self):
        if not self.is_game_open:
            return

        self.is_game_open = False
        try:
            if self.window_manager and self.browser_view:
                self.window_manager.removeView(self.browser_view)
            self.browser_view = None
            self.window_manager = None
        except Exception as e:
            BulletinHelper.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä—ã: {e}")
